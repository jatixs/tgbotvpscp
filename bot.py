import asyncio
import os
import psutil
import re
import json
import urllib.parse
import logging
import requests
import sys
import signal # Needed for shutdown handler
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import qrcode
from PIL import Image
import io
from aiogram.types import BufferedInputFile
import time



TOKEN = os.environ.get("TG_BOT_TOKEN")
INSTALL_MODE = os.environ.get("INSTALL_MODE", "secure")
ADMIN_USERNAME = os.environ.get("TG_ADMIN_USERNAME")

try:
    ADMIN_USER_ID = int(os.environ.get("TG_ADMIN_ID"))
except (ValueError, TypeError):
    print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_ADMIN_ID –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    sys.exit(1)

if not TOKEN:
    print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    sys.exit(1)

if not ADMIN_USERNAME:
    print("-------------------------------------------------------")
    print("–í–ù–ò–ú–ê–ù–ò–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TG_ADMIN_USERNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    print("–ö–Ω–æ–ø–∫–∞ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å ID' –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –ü–†–û–§–ò–õ–¨ –∞–¥–º–∏–Ω–∞,")
    print("–∞ –Ω–µ –ª–∏—á–Ω—ã–π —á–∞—Ç. –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä—è–º–æ–≥–æ —á–∞—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ")
    print("—ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (—É–∫–∞–∑–∞–≤ —Å–≤–æ–π —é–∑–µ—Ä–Ω–µ–π–º –±–µ–∑ @).")
    print("-------------------------------------------------------")


BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_DIR = os.path.join(BASE_DIR, "logs")
CONFIG_DIR = os.path.join(BASE_DIR, "config")
os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(CONFIG_DIR, exist_ok=True)

USERS_FILE = os.path.join(CONFIG_DIR, "users.json")
REBOOT_FLAG_FILE = os.path.join(CONFIG_DIR, "reboot_flag.txt")
RESTART_FLAG_FILE = os.path.join(CONFIG_DIR, "restart_flag.txt")
ALERTS_CONFIG_FILE = os.path.join(CONFIG_DIR, "alerts_config.json")

LOG_FILE = os.path.join(LOG_DIR, "bot.log")
logging.basicConfig(level=logging.INFO, filename=LOG_FILE, format='%(asctime)s - %(levelname)s - %(message)s', encoding='utf-8')
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(console_handler)

TRAFFIC_INTERVAL = 5
RESOURCE_CHECK_INTERVAL = 60 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (1 –º–∏–Ω—É—Ç–∞)
CPU_THRESHOLD = 90.0
RAM_THRESHOLD = 90.0
DISK_THRESHOLD = 95.0

# --- [–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø] –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤ ---
RESOURCE_ALERT_COOLDOWN = 1800 # 30 –º–∏–Ω—É—Ç (1800 —Å–µ–∫) - –∫–∞–∫ —á–∞—Å—Ç–æ —Å–ª–∞—Ç—å –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø
LAST_RESOURCE_ALERT_TIME = {"cpu": 0, "ram": 0, "disk": 0}
# --------------------------------------------------

ALLOWED_USERS = {}
USER_NAMES = {}
TRAFFIC_PREV = {}
LAST_MESSAGE_IDS = {}
TRAFFIC_MESSAGE_IDS = {}
ALERTS_CONFIG = {}
RESOURCE_ALERT_STATE = {"cpu": False, "ram": False, "disk": False}


bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class GenerateVlessStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_name = State()

class ManageUsersStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_group = State()
    # waiting_for_change_group = State() # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å, —É–±–∏—Ä–∞–µ–º

def load_alerts_config():
    global ALERTS_CONFIG
    try:
        if os.path.exists(ALERTS_CONFIG_FILE):
            with open(ALERTS_CONFIG_FILE, "r", encoding='utf-8') as f:
                ALERTS_CONFIG = json.load(f)
                ALERTS_CONFIG = {int(k): v for k, v in ALERTS_CONFIG.items()}
            logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        else:
            ALERTS_CONFIG = {}
            logging.info("–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ alerts_config.json: {e}")
        ALERTS_CONFIG = {}

def save_alerts_config():
    try:
        os.makedirs(os.path.dirname(ALERTS_CONFIG_FILE), exist_ok=True)
        with open(ALERTS_CONFIG_FILE, "w", encoding='utf-8') as f:
            json.dump({str(k): v for k, v in ALERTS_CONFIG.items()}, f, indent=4, ensure_ascii=False)
        logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è alerts_config.json: {e}")

load_alerts_config()

def get_country_flag(ip: str) -> str:
    if not ip or ip in ["localhost", "127.0.0.1", "::1"]:
        return "üè†"
    try:
        response = requests.get(f"http://ip-api.com/json/{ip}?fields=countryCode", timeout=2)
        if response.status_code == 200:
            data = response.json()
            country_code = data.get("countryCode")
            if country_code:
                flag = "".join(chr(ord(char) + 127397) for char in country_code.upper())
                return flag
    except requests.exceptions.RequestException as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞ –¥–ª—è IP {ip}: {e}")
        return "‚ùì"
    return "üåç"

def escape_html(text):
    if text is None:
        return ""
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')

def load_users():
    global ALLOWED_USERS, USER_NAMES
    try:
        os.makedirs(os.path.dirname(USERS_FILE), exist_ok=True)
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, "r", encoding='utf-8') as f:
                data = json.load(f)
                ALLOWED_USERS = {int(user["id"]): user["group"] for user in data.get("allowed_users", [])}
                USER_NAMES = data.get("user_names", {})

        if ADMIN_USER_ID not in ALLOWED_USERS:
            ALLOWED_USERS[ADMIN_USER_ID] = "–ê–¥–º–∏–Ω—ã"
            USER_NAMES[str(ADMIN_USER_ID)] = "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"
            save_users()

        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –†–∞–∑—Ä–µ—à–µ–Ω–æ ID: {list(ALLOWED_USERS.keys())}")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}")
        ALLOWED_USERS = {ADMIN_USER_ID: "–ê–¥–º–∏–Ω—ã"}
        USER_NAMES = {str(ADMIN_USER_ID): "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"}
        save_users()

def save_users():
    try:
        user_names_to_save = {str(k): v for k, v in USER_NAMES.items()}
        data = {
            "allowed_users": [{"id": uid, "group": group} for uid, group in ALLOWED_USERS.items()],
            "user_names": user_names_to_save
        }
        os.makedirs(os.path.dirname(USERS_FILE), exist_ok=True)
        with open(USERS_FILE, "w", encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ users.json")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json: {e}")

def is_allowed(user_id, command=None):
    if user_id not in ALLOWED_USERS:
        return False

    user_commands = ["start", "menu", "back_to_menu", "uptime", "traffic", "selftest", "get_id", "get_id_inline", "notifications_menu", "toggle_alert_resources", "toggle_alert_logins", "toggle_alert_bans", "alert_downtime_stub"]
    if command in user_commands:
        return True

    is_admin_group = user_id == ADMIN_USER_ID or ALLOWED_USERS.get(user_id) == "–ê–¥–º–∏–Ω—ã"
    if not is_admin_group:
        return False

    admin_only_commands = [
        "manage_users", "generate_vless", "speedtest", "top", "updatexray", "adduser", "add_user"
    ]
    if command in admin_only_commands:
        return True

    root_only_commands = [
        "reboot_confirm", "reboot", "fall2ban", "sshlog", "logs", "restart", "update"
    ]
    if command in root_only_commands:
        return INSTALL_MODE == "root"

    # –î–æ–±–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if command and any(cmd in command for cmd in ["delete_user", "set_group", "change_group", "xray_install", "back_to_manage_users", "back_to_delete_users"]):
        return True

    return False


# --- [–ò–ó–ú–ï–ù–ï–ù–ò–ï] –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω ---
async def refresh_user_names():
    needs_save = False
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–æ–ø–∏–∏ –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —é–∑–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ (—Ö–æ—Ç—è –∑–¥–µ—Å—å —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ)
    user_ids_to_check = list(ALLOWED_USERS.keys())

    logging.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –¥–ª—è {len(user_ids_to_check)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for uid in user_ids_to_check:
        uid_str = str(uid)
        current_name = USER_NAMES.get(uid_str)

        # –û–±–Ω–æ–≤–ª—è–µ–º, –µ—Å–ª–∏:
        # 1. ID –≤–æ–æ–±—â–µ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–º–µ–Ω
        # 2. –ò–º—è - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ "–ù–æ–≤—ã–π_..."
        # 3. –ò–º—è - —ç—Ç–æ –∑–∞–ø–∞—Å–Ω–æ–µ "ID: ..." (–µ—Å–ª–∏ get_chat —Ä–∞–Ω–µ–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª)
        # 4. –ò–º—è - —ç—Ç–æ "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω" (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞–¥–º–∏–Ω —Å–º–µ–Ω–∏–ª –∏–º—è)
        should_refresh = (
            not current_name
            or current_name.startswith("–ù–æ–≤—ã–π_")
            or current_name.startswith("ID: ")
            or current_name == "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"
        )

        if should_refresh:
            try:
                logging.debug(f"–ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –¥–ª—è ID: {uid}")
                chat = await bot.get_chat(uid)
                # –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–º—è: –ò–º—è > –Æ–∑–µ—Ä–Ω–µ–π–º > –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                new_name = chat.first_name or chat.username
                if not new_name:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∏–º–µ–Ω–∏, –Ω–∏ —é–∑–µ—Ä–Ω–µ–π–º–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
                    new_name = f"ID: {uid}"
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ò–º—è/–Æ–∑–µ—Ä–Ω–µ–π–º –¥–ª—è {uid}, –∏—Å–ø–æ–ª—å–∑—É—é '{new_name}'")
                else:
                    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
                    new_name = escape_html(new_name)

                # –û–±–Ω–æ–≤–ª—è–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–º—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if current_name != new_name:
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –¥–ª—è {uid}: '{current_name}' -> '{new_name}'")
                    USER_NAMES[uid_str] = new_name
                    needs_save = True
                else:
                    logging.debug(f"–ò–º—è –¥–ª—è {uid} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ('{current_name}').")

            except TelegramBadRequest as e:
                # –ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç?) –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                if "chat not found" in str(e) or "bot was blocked by the user" in str(e):
                     logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –¥–ª—è {uid}: {e}. –ò—Å–ø–æ–ª—å–∑—É—é 'ID: {uid}'.")
                     # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–µ –∏–º—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                     if current_name != f"ID: {uid}":
                          USER_NAMES[uid_str] = f"ID: {uid}"
                          needs_save = True
                else:
                     # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ API Telegram
                     logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –¥–ª—è {uid}: {e}")
                     # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏–º—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–µ
                     if not current_name or current_name.startswith("–ù–æ–≤—ã–π_"):
                          USER_NAMES[uid_str] = f"ID: {uid}"
                          needs_save = True
            except Exception as e:
                # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
                logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –¥–ª—è {uid}: {e}")
                if not current_name or current_name.startswith("–ù–æ–≤—ã–π_"):
                     USER_NAMES[uid_str] = f"ID: {uid}"
                     needs_save = True

    if needs_save:
        logging.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–º–µ–Ω–∞—Ö, —Å–æ—Ö—Ä–∞–Ω—è—é users.json...")
        save_users()
    else:
        logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
# --- [–ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø] ---


async def get_user_name(user_id):
    try:
        cached_name = USER_NAMES.get(str(user_id))
        if cached_name and "Unknown" not in cached_name and "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω" not in cached_name:
            return cached_name

        chat = await bot.get_chat(user_id)
        name = chat.first_name or chat.username or f"Unknown_{user_id}"
        USER_NAMES[str(user_id)] = name
        save_users()
        return name
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–ª—è ID {user_id}: {e}")
        return f"Unknown_{user_id}"

async def send_access_denied_message(user_id, chat_id, command):
    await delete_previous_message(user_id, command, chat_id)

    text_to_send = f"–º–æ–π ID: {user_id}"
    admin_link = ""

    if ADMIN_USERNAME:
        admin_link = f"https://t.me/{ADMIN_USERNAME}?text={urllib.parse.quote(text_to_send)}"
    else:
        admin_link = f"tg://user?id={ADMIN_USER_ID}&text={urllib.parse.quote(text_to_send)}"
        logging.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TG_ADMIN_USERNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –ø–æ ID (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å).")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", url=admin_link)]
    ])
    sent_message = await bot.send_message(
        chat_id,
        f"‚õî –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞. –í–∞—à ID: <code>{user_id}</code>.\n"
        "–ö –∫–æ–º–∞–Ω–¥–∞–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

def get_main_reply_keyboard(user_id):
    is_admin = user_id == ADMIN_USER_ID or ALLOWED_USERS.get(user_id) == "–ê–¥–º–∏–Ω—ã"

    buttons = [
        [KeyboardButton(text="üõ† –°–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"), KeyboardButton(text="üì° –¢—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏")],
        [KeyboardButton(text="‚è± –ê–ø—Ç–∞–π–º"), KeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
    ]

    admin_buttons_flat = [btn.text for row in buttons for btn in row]

    if is_admin:
        if INSTALL_MODE == 'secure':
            secure_admin_buttons = [
                [KeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üîó VLESS-—Å—Å—ã–ª–∫–∞")],
                [KeyboardButton(text="üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏"), KeyboardButton(text="üî• –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")],
                [KeyboardButton(text="ü©ª –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ X-ray")],
            ]
            for row in reversed(secure_admin_buttons):
                new_row = [btn for btn in row if btn.text not in admin_buttons_flat]
                if new_row:
                    buttons.insert(0, new_row)
                    admin_buttons_flat.extend([btn.text for btn in new_row])


        elif INSTALL_MODE == 'root':
             root_admin_buttons = [
                 [KeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üîó VLESS-—Å—Å—ã–ª–∫–∞")],
                 [KeyboardButton(text="üî• –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"), KeyboardButton(text="üìú SSH-–ª–æ–≥")],
                 [KeyboardButton(text="üîí Fail2Ban Log"), KeyboardButton(text="üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")],
                 [KeyboardButton(text="üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏")],
                 [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPS"), KeyboardButton(text="ü©ª –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ X-ray")],
                 [KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"), KeyboardButton(text="‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")]
             ]
             for row in reversed(root_admin_buttons):
                 new_row = [btn for btn in row if btn.text not in admin_buttons_flat]
                 if new_row:
                     buttons.insert(0, new_row)
                     admin_buttons_flat.extend([btn.text for btn in new_row])


    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é...")
    return keyboard

def get_manage_users_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            InlineKeyboardButton(text="üÜî –ú–æ–π ID", callback_data="get_id_inline")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def get_delete_users_keyboard(current_user_id):
    buttons = []
    sorted_users = sorted(ALLOWED_USERS.items(), key=lambda item: USER_NAMES.get(str(item[0]), f"ID: {item[0]}"), reverse=False) # Fallback to ID if name missing

    for uid, group in sorted_users:
        if uid == ADMIN_USER_ID:
            continue
        user_name = USER_NAMES.get(str(uid), f"ID: {uid}") # Use fallback here too
        button_text = f"{user_name} ({group})"
        callback_data = f"delete_user_{uid}"
        if uid == current_user_id:
            button_text = f"‚ùå –£–¥–∞–ª–∏—Ç—å —Å–µ–±—è ({user_name}, {group})"
            callback_data = f"request_self_delete_{uid}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_users")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_change_group_keyboard():
    buttons = []
    sorted_users = sorted(ALLOWED_USERS.items(), key=lambda item: USER_NAMES.get(str(item[0]), f"ID: {item[0]}"), reverse=False)
    for uid, group in sorted_users:
        if uid == ADMIN_USER_ID:
            continue
        user_name = USER_NAMES.get(str(uid), f"ID: {uid}")
        buttons.append([InlineKeyboardButton(text=f"{user_name} ({group})", callback_data=f"select_user_change_group_{uid}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_users")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_group_selection_keyboard(user_id_to_change=None):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω—ã", callback_data=f"set_group_{user_id_to_change or 'new'}_–ê–¥–º–∏–Ω—ã"),
            InlineKeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=f"set_group_{user_id_to_change or 'new'}_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        ],
        [
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_manage_users")
        ]
    ])
    return keyboard

def get_self_delete_confirmation_keyboard(user_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_self_delete_{user_id}"),
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_delete_users")
        ]
    ])
    return keyboard

def get_reboot_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reboot"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def get_back_keyboard(callback_data="back_to_manage_users"):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)
        ]
    ])
    return keyboard

def get_alerts_menu_keyboard(user_id):
    user_config = ALERTS_CONFIG.get(user_id, {})
    res_enabled = user_config.get("resources", False)
    logins_enabled = user_config.get("logins", False)
    bans_enabled = user_config.get("bans", False)

    res_text = f"{'‚úÖ' if res_enabled else '‚ùå'} –†–µ—Å—É—Ä—Å—ã (CPU/RAM/Disk)"
    logins_text = f"{'‚úÖ' if logins_enabled else '‚ùå'} –í—Ö–æ–¥—ã/–í—ã—Ö–æ–¥—ã SSH"
    bans_text = f"{'‚úÖ' if bans_enabled else '‚ùå'} –ë–∞–Ω—ã (Fail2Ban)"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=res_text, callback_data="toggle_alert_resources")],
        [InlineKeyboardButton(text=logins_text, callback_data="toggle_alert_logins")],
        [InlineKeyboardButton(text=bans_text, callback_data="toggle_alert_bans")],
        [InlineKeyboardButton(text="‚è≥ –î–∞—É–Ω—Ç–∞–π–º —Å–µ—Ä–≤–µ—Ä–∞", callback_data="alert_downtime_stub")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    return keyboard


def convert_json_to_vless(json_data, custom_name):
    try:
        config = json.loads(json_data)
        outbound = config['outbounds'][0]
        vnext = outbound['settings']['vnext'][0]
        user = vnext['users'][0]
        reality = outbound['streamSettings']['realitySettings']
        vless_params = {
            'id': user['id'],
            'address': vnext['address'],
            'port': vnext['port'],
            'security': outbound['streamSettings']['security'],
            'host': reality['serverName'],
            'fp': reality['fingerprint'],
            'pbk': reality['publicKey'],
            'sid': reality['shortId'],
            'type': outbound['streamSettings']['network'],
            'flow': user['flow'],
            'encryption': user['encryption'],
            'headerType': 'none'
        }
        vless_url = (f"vless://{vless_params['id']}@{vless_params['address']}:{vless_params['port']}"
                     f"?security={vless_params['security']}"
                     f"&encryption={vless_params['encryption']}"
                     f"&pbk={urllib.parse.quote(vless_params['pbk'])}"
                     f"&host={urllib.parse.quote(vless_params['host'])}"
                     f"&headerType={vless_params['headerType']}"
                     f"&fp={vless_params['fp']}"
                     f"&type={vless_params['type']}"
                     f"&flow={vless_params['flow']}"
                     f"&sid={vless_params['sid']}"
                     f"#{urllib.parse.quote(custom_name)}")
        return vless_url
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS-—Å—Å—ã–ª–∫–∏: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS-—Å—Å—ã–ª–∫–∏: {str(e)}"

def format_traffic(bytes_value):
    units = ["–ë", "–ö–ë", "–ú–ë", "–ì–ë", "–¢–ë", "–ü–ë"]
    value = float(bytes_value)
    unit_index = 0
    while value >= 1024 and unit_index < len(units) - 1:
        value /= 1024
        unit_index += 1
    return f"{value:.2f} {units[unit_index]}"

def format_uptime(seconds):
    seconds = int(seconds)
    years = seconds // (365 * 24 * 3600)
    remaining = seconds % (365 * 24 * 3600)
    days = remaining // (24 * 3600)
    remaining %= (24 * 3600)
    hours = remaining // 3600
    remaining %= 3600
    mins = remaining // 60
    secs = remaining % 60
    parts = []
    if years > 0:
        parts.append(f"{years}–≥")
    if days > 0:
        parts.append(f"{days}–¥")
    if hours > 0:
        parts.append(f"{hours}—á")
    if mins > 0:
        parts.append(f"{mins}–º")
    if seconds < 60 or not parts:
       parts.append(f"{secs}—Å")
    return " ".join(parts) if parts else "0—Å"

def get_server_timezone_label():
    try:
        offset_str = time.strftime("%z")
        if not offset_str or len(offset_str) != 5:
            return ""

        sign = offset_str[0]
        hours_str = offset_str[1:3]
        mins_str = offset_str[3:5]

        hours_int = int(hours_str)

        if mins_str == "00":
            return f" (GMT{sign}{hours_int})"
        else:
            return f" (GMT{sign}{hours_int}:{mins_str})"
    except Exception:
        return ""

async def delete_previous_message(user_id: int, command, chat_id: int):
    cmds_to_delete = [command] if not isinstance(command, list) else command
    for cmd in cmds_to_delete:
        try:
            if user_id in LAST_MESSAGE_IDS and cmd in LAST_MESSAGE_IDS[user_id]:
                msg_id = LAST_MESSAGE_IDS[user_id].pop(cmd)
                await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except TelegramBadRequest as e:
            if "message to delete not found" not in str(e) and "message can't be deleted" not in str(e):
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}/{cmd}: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}/{cmd}: {e}")

async def send_alert(message: str, alert_type: str):
    if not alert_type:
        logging.warning("send_alert –≤—ã–∑–≤–∞–Ω –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è alert_type")
        return

    sent_count = 0
    users_to_alert = []
    for user_id, config in ALERTS_CONFIG.items():
        if config.get(alert_type, False):
           users_to_alert.append(user_id)

    if not users_to_alert:
        logging.info(f"–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ —Ç–∏–ø–∞ '{alert_type}'.")
        return

    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ —Ç–∏–ø–∞ '{alert_type}' {len(users_to_alert)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
    for user_id in users_to_alert:
        try:
            await bot.send_message(user_id, message, parse_mode="HTML")
            sent_count += 1
            await asyncio.sleep(0.1)
        except TelegramBadRequest as e:
            if "chat not found" in str(e) or "bot was blocked by the user" in str(e):
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            else:
                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ TelegramBadRequest –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª–µ—Ä—Ç–∞ {user_id}: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    logging.info(f"–ê–ª–µ—Ä—Ç —Ç–∏–ø–∞ '{alert_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")


# --- [–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø] –ü–∞—Ä—Å–µ—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ ---

async def parse_ssh_log_line(line: str) -> str | None:
    match = re.search(r"Accepted\s+(?:\S+)\s+for\s+(\S+)\s+from\s+(\S+)", line)
    if match:
        try:
            user = escape_html(match.group(1))
            ip = escape_html(match.group(2))
            flag = await asyncio.to_thread(get_country_flag, ip)
            tz_label = get_server_timezone_label()
            now_time = datetime.now().strftime('%H:%M:%S')
            return (f"üîî <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ SSH</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user}</b>\n"
                    f"üåç IP: <b>{flag} {ip}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è: <b>{now_time}</b>{tz_label}")
        except Exception as e:
            logging.warning(f"parse_ssh_log_line: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
    return None

async def parse_f2b_log_line(line: str) -> str | None:
    match = re.search(r"fail2ban\.actions.* Ban\s+(\S+)", line)
    if match:
        try:
            ip = escape_html(match.group(1).strip(" \n\t,"))
            flag = await asyncio.to_thread(get_country_flag, ip)
            tz_label = get_server_timezone_label()
            now_time = datetime.now().strftime('%H:%M:%S')
            return (f"üõ°Ô∏è <b>Fail2Ban –∑–∞–±–∞–Ω–∏–ª IP</b>\n\n"
                    f"üåç IP: <b>{flag} {ip}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è: <b>{now_time}</b>{tz_label}")
        except Exception as e:
            logging.warning(f"parse_f2b_log_line: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
    return None

# --- [–ò–ù–¢–ï–ì–†–ê–¶–ò–Ø] –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä –ª–æ–≥–æ–≤ (tail -f) (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô v3) ---

async def reliable_tail_log_monitor(log_file_path: str, alert_type: str, parse_function: callable):
    process = None
    stdout_closed = asyncio.Event()
    stderr_closed = asyncio.Event()

    async def close_pipe(pipe, name, event):
        if pipe and not pipe.at_eof():
            try:
                pipe.feed_eof()
                logging.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–π–ø–∞ {name}...")
            except Exception as e:
                logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—à–∏–±–∫–∞ –ø—Ä–∏ feed_eof() –¥–ª—è –ø–∞–π–ø–∞ {name}: {e}")
            finally:
                 event.set()
        else:
            event.set()

    try:
        while True:
            stdout_closed.clear()
            stderr_closed.clear()

            if not await asyncio.to_thread(os.path.exists, log_file_path):
                 logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä: {log_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60—Å.")
                 await asyncio.sleep(60)
                 continue

            logging.info(f"–ó–∞–ø—É—Å–∫ (–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫) –º–æ–Ω–∏—Ç–æ—Ä–∞ {alert_type} –¥–ª—è {log_file_path}")
            try:
                process = await asyncio.create_subprocess_shell(
                    f"tail -n 0 -f {log_file_path}",
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type} (PID: {process.pid}) —Å–ª–µ–¥–∏—Ç –∑–∞ {log_file_path}")

                while True:
                    tasks = [
                        asyncio.create_task(process.stdout.readline()),
                        asyncio.create_task(process.stderr.readline())
                    ]
                    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

                    for task in pending: task.cancel()

                    stdout_line = None
                    stderr_line = None

                    for task in done:
                        try:
                            result = task.result()
                            if task == tasks[0]: stdout_line = result
                            else: stderr_line = result
                        except asyncio.CancelledError: pass
                        except Exception as e:
                             logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–∞–π–ø–∞: {e}")
                             if process.returncode is None: await asyncio.sleep(0.1)
                             if process.returncode is not None: break

                    if stdout_line:
                        line_str = stdout_line.decode('utf-8', errors='ignore').strip()
                        message = await parse_function(line_str)
                        if message: await send_alert(message, alert_type)
                    elif stdout_line is not None:
                         logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: stdout –¥–æ—Å—Ç–∏–≥ EOF.")
                         stdout_closed.set()

                    if stderr_line:
                        stderr_str = stderr_line.decode('utf-8', errors='ignore').strip()
                        logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type} (tail stderr): {stderr_str}")
                    elif stderr_line is not None:
                         logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: stderr –¥–æ—Å—Ç–∏–≥ EOF.")
                         stderr_closed.set()

                    if process.returncode is not None:
                        logging.warning(f"–ü—Ä–æ—Ü–µ—Å—Å 'tail' –¥–ª—è {alert_type} (PID: {process.pid if process else 'N/A'}) —É–º–µ—Ä —Å –∫–æ–¥–æ–º {process.returncode}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                        stdout_closed.set()
                        stderr_closed.set()
                        process = None
                        break

                    if stdout_closed.is_set() and stderr_closed.is_set() and process and process.returncode is None:
                         logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û–±–∞ –ø–∞–π–ø–∞ –∑–∞–∫—Ä—ã—Ç—ã, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å tail (PID: {process.pid}) –µ—â–µ –∂–∏–≤. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
                         break

            except PermissionError:
                 logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ {log_file_path}. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60—Å.")
                 await asyncio.sleep(60)
            except Exception as e:
                pid_info = f"(PID: {process.pid})" if process else ""
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ü–∏–∫–ª–µ reliable_tail_log_monitor ({log_file_path}) {pid_info}: {e}")
                if process and process.returncode is None:
                    try: process.terminate()
                    except ProcessLookupError: pass
                process = None
                await asyncio.sleep(10)

    except asyncio.CancelledError:
         logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type} –æ—Ç–º–µ–Ω–µ–Ω (—à—Ç–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ).")

    finally:
        pid = process.pid if process else None
        logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞ {alert_type}, –ø–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ 'tail' (PID: {pid})...")

        pipe_close_tasks = []
        if process:
             if hasattr(process, 'stdout') and process.stdout:
                 pipe_close_tasks.append(close_pipe(process.stdout, 'stdout', stdout_closed))
             else: stdout_closed.set()
             if hasattr(process, 'stderr') and process.stderr:
                 pipe_close_tasks.append(close_pipe(process.stderr, 'stderr', stderr_closed))
             else: stderr_closed.set()

        if pipe_close_tasks:
             try:
                 await asyncio.wait_for(asyncio.gather(*pipe_close_tasks), timeout=1.0)
                 logging.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–π–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
             except asyncio.TimeoutError:
                 logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–π–ø–æ–≤.")
             except Exception as pipe_e:
                  logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞–π–ø–æ–≤: {pipe_e}")

        if process and process.returncode is None:
            logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ tail (PID: {pid}).")
            try:
                process.terminate()
                try:
                    await asyncio.wait_for(process.wait(), timeout=2.0)
                    logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (terminate).")
                except asyncio.TimeoutError:
                    logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 2 —Å–µ–∫ –ø–æ—Å–ª–µ terminate(). –ü–æ–ø—ã—Ç–∫–∞ kill().")
                    try:
                        process.kill()
                        await asyncio.wait_for(process.wait(), timeout=1.0)
                        logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) —É—Å–ø–µ—à–Ω–æ —É–±–∏—Ç (kill).")
                    except asyncio.TimeoutError: logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ kill().")
                    except ProcessLookupError: pass
                    except Exception as kill_e: logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—à–∏–±–∫–∞ –ø—Ä–∏ kill() 'tail' (PID: {pid}): {kill_e}")
            except ProcessLookupError: pass
            except Exception as e: logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ 'tail' (PID: {pid}): {e}")
        elif process:
             logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω (–∫–æ–¥: {process.returncode}) –¥–æ –±–ª–æ–∫–∞ finally.")
        else:
            logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –ü—Ä–æ—Ü–µ—Å—Å tail –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –æ—á–∏—â–µ–Ω.")

# --- [ –ö–û–ù–ï–¶ –ë–õ–û–ö–û–í –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ] ---


@dp.message(Command("start", "menu"))
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def start_or_menu_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "start" if message.text == "/start" else "menu"
    await state.clear()
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, ["start", "menu", "manage_users", "reboot_confirm", "generate_vless", "adduser", "notifications_menu", "traffic", "get_id"], chat_id)
    if str(user_id) not in USER_NAMES:
       await refresh_user_names()
    sent_message = await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ. –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π /menu.",
        reply_markup=get_main_reply_keyboard(user_id)
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    await state.clear()

    if not is_allowed(user_id, "menu"):
        await send_access_denied_message(user_id, chat_id, "menu")
        await callback.answer()
        return

    await delete_previous_message(
        user_id,
        ["start", "menu", "manage_users", "reboot_confirm", "generate_vless",
         "adduser", "notifications_menu", "traffic", "get_id"],
        chat_id
    )

    sent_message = await bot.send_message(
        chat_id,
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_reply_keyboard(user_id)
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})["menu"] = sent_message.message_id
    await callback.answer()

@dp.message(F.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def manage_users_handler(message: types.Message):
    user_id = message.from_user.id
    command = "manage_users"
    if not is_allowed(user_id, command):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await delete_previous_message(user_id, command, message.chat.id)

    user_list = "\n".join([
        f" ‚Ä¢ {USER_NAMES.get(str(uid), f'ID: {uid}')} (<b>{group}</b>)"
        for uid, group in ALLOWED_USERS.items() if uid != ADMIN_USER_ID
    ])
    if not user_list:
        user_list = "–î—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç."

    sent_message = await message.answer(
        f"üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>:\n\n{user_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_manage_users_keyboard(),
        parse_mode="HTML"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(F.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
async def reboot_confirm_handler(message: types.Message):
    user_id = message.from_user.id
    command = "reboot_confirm"
    if not is_allowed(user_id, command):
        await bot.send_message(message.chat.id, "‚õî –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ 'root'.")
        return
    await delete_previous_message(user_id, command, message.chat.id)
    sent_message = await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä</b>? –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω—ã.", reply_markup=get_reboot_confirmation_keyboard(), parse_mode="HTML")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(F.text == "üîó VLESS-—Å—Å—ã–ª–∫–∞")
async def generate_vless_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    command = "generate_vless"
    if not is_allowed(user_id, command):
        await bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await delete_previous_message(user_id, command, message.chat.id)
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–û—Ç–º–µ–Ω–∏—Ç—å"
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_menu")]
    ])
    
    sent_message = await message.answer(
        "üì§ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray (JSON)</b>\n\n<i>–í–∞–∂–Ω–æ: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é outbound —Å Reality.</i>", 
        reply_markup=cancel_keyboard,
        parse_mode="HTML"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    await state.set_state(GenerateVlessStates.waiting_for_file)

# --- Original Handlers ---
async def fall2ban_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "fall2ban"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)
    try:
        F2B_LOG_FILE = "/var/log/fail2ban.log"

        if not await asyncio.to_thread(os.path.exists, F2B_LOG_FILE):
             sent_message = await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–∞ Fail2Ban –Ω–µ –Ω–∞–π–¥–µ–Ω: <code>{F2B_LOG_FILE}</code>", parse_mode="HTML")
             LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
             return

        def read_f2b_log():
             try:
                  with open(F2B_LOG_FILE, "r", encoding='utf-8', errors='ignore') as f:
                       return f.readlines()[-50:]
             except Exception as read_e:
                  logging.error(f"Error reading Fail2Ban log file: {read_e}")
                  return None

        lines = await asyncio.to_thread(read_f2b_log)

        if lines is None:
             raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ª–æ–≥–∞.")

        log_entries = []
        tz_label = get_server_timezone_label()
        regex_ban = r"(\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d{3}).*fail2ban\.actions.* Ban\s+(\S+)"
        regex_already = r"(\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2},\d{3}).*fail2ban\.actions.* (\S+)\s+already banned"

        for line in reversed(lines):
            line = line.strip()
            if "fail2ban.actions" not in line:
                continue

            match = None
            ban_type = None
            ip = None
            timestamp_str = None

            match_ban_found = re.search(regex_ban, line)
            if match_ban_found:
                match = match_ban_found
                ban_type = "–ë–∞–Ω"
                timestamp_str, ip = match.groups()
            else:
                match_already_found = re.search(regex_already, line)
                if match_already_found:
                    match = match_already_found
                    ban_type = "–£–∂–µ –∑–∞–±–∞–Ω–µ–Ω"
                    timestamp_str, ip = match.groups()

            if match and ip and timestamp_str:
                try:
                    dt = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S,%f")
                    flag = await asyncio.to_thread(get_country_flag, ip)
                    formatted_time = dt.strftime('%H:%M:%S')
                    formatted_date = dt.strftime('%d.%m.%Y')
                    log_entries.append(f"üîí <b>{ban_type}</b>\nüåç IP: <b>{flag} {ip}</b>\n‚è∞ –í—Ä–µ–º—è: <b>{formatted_time}</b>{tz_label}\nüóìÔ∏è –î–∞—Ç–∞: <b>{formatted_date}</b>")
                except ValueError:
                    logging.warning(f"Could not parse Fail2Ban timestamp: {timestamp_str}")
                    continue
                except Exception as parse_e:
                    logging.error(f"Error processing Fail2Ban line: {parse_e} | Line: {line}")
                    continue

            if len(log_entries) >= 10:
                break

        if log_entries:
            log_output = "\n\n".join(log_entries)
            sent_message = await message.answer(f"üîí <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP (Fail2Ban):</b>\n\n{log_output}", parse_mode="HTML")
        else:
            sent_message = await message.answer("üîí –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP –≤ –ª–æ–≥–∞—Ö Fail2Ban (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫).")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ Fail2Ban: {e}")
        sent_message = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ Fail2Ban: {str(e)}")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id


async def sshlog_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "sshlog"
    if not is_allowed(user_id, command):
         await send_access_denied_message(user_id, chat_id, command)
         return

    await delete_previous_message(user_id, command, chat_id)
    sent_message = await message.answer("üîç –ò—â—É –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–±—ã—Ç–∏–π SSH (–≤—Ö–æ–¥/–ø—Ä–æ–≤–∞–ª)...")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

    try:
        log_file = None
        if await asyncio.to_thread(os.path.exists, "/var/log/secure"):
            log_file = "/var/log/secure"
        elif await asyncio.to_thread(os.path.exists, "/var/log/auth.log"):
            log_file = "/var/log/auth.log"

        lines = []
        source = ""
        log_entries = []
        found_count = 0

        if log_file:
            source = f" (–∏–∑ {os.path.basename(log_file)})"
            cmd = f"tail -n 200 {log_file}"
            process = await asyncio.create_subprocess_shell(
                cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate()
            if process.returncode != 0: raise Exception(stderr.decode())
            lines = stdout.decode().strip().split('\n')
        else:
            source = " (–∏–∑ journalctl, –∑–∞ –º–µ—Å—è—Ü)"
            cmd = "journalctl -u ssh -n 100 --no-pager --since '1 month ago' -o short-precise"
            process = await asyncio.create_subprocess_shell(
                cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
            )
            try:
                stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=5.0)
            except asyncio.TimeoutError:
                raise Exception("journalctl –∑–∞–≤–∏—Å (—Ç–∞–π–º-–∞—É—Ç 5—Å)")
            if process.returncode != 0: raise Exception(stderr.decode())
            lines = stdout.decode().strip().split('\n')

        tz_label = get_server_timezone_label()

        for line in reversed(lines):
            if found_count >= 10:
                break

            line = line.strip()
            if "sshd" not in line:
                continue

            dt_object = None
            date_match_iso = re.search(r"(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})", line)
            date_match_syslog = re.search(r"(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})", line)

            try:
                if date_match_iso:
                    dt_object = datetime.strptime(date_match_iso.group(1), "%Y-%m-%dT%H:%M:%S")
                elif date_match_syslog:
                    log_timestamp = datetime.strptime(date_match_syslog.group(1), "%b %d %H:%M:%S")
                    current_year = datetime.now().year
                    dt_object = log_timestamp.replace(year=current_year)
                    if dt_object > datetime.now():
                        dt_object = dt_object.replace(year=current_year - 1)
                else:
                    continue
            except Exception as e:
                logging.warning(f"Sshlog: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {e}. –°—Ç—Ä–æ–∫–∞: {line}")
                continue

            formatted_time = dt_object.strftime('%H:%M:%S')
            formatted_date = dt_object.strftime('%d.%m.%Y')

            entry = None

            match = re.search(r"Accepted\s+(?:\S+)\s+for\s+(\S+)\s+from\s+(\S+)", line)
            if match:
                user = match.group(1)
                ip = match.group(2)
                flag = await asyncio.to_thread(get_country_flag, ip)
                entry = f"‚úÖ <b>–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥</b>\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user}</b>\nüåç IP: <b>{flag} {ip}</b>\n‚è∞ {formatted_time}{tz_label} ({formatted_date})"

            if not entry:
                match = re.search(r"Failed\s+(?:\S+)\s+for\s+invalid\s+user\s+(\S+)\s+from\s+(\S+)", line)
                if match:
                    user = match.group(1)
                    ip = match.group(2)
                    flag = await asyncio.to_thread(get_country_flag, ip)
                    entry = f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —é–∑–µ—Ä</b>\nüë§ –ü–æ–ø—ã—Ç–∫–∞: <b>{user}</b>\nüåç IP: <b>{flag} {ip}</b>\n‚è∞ {formatted_time}{tz_label} ({formatted_date})"

            if not entry:
                match = re.search(r"Failed password for (\S+) from (\S+)", line)
                if match:
                    user = match.group(1)
                    ip = match.group(2)
                    flag = await asyncio.to_thread(get_country_flag, ip)
                    entry = f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å</b>\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user}</b>\nüåç IP: <b>{flag} {ip}</b>\n‚è∞ {formatted_time}{tz_label} ({formatted_date})"

            if not entry:
                match = re.search(r"authentication failure;.*rhost=(\S+)\s+user=(\S+)", line)
                if match:
                    ip = match.group(1)
                    user = match.group(2)
                    flag = await asyncio.to_thread(get_country_flag, ip)
                    entry = f"‚ùå <b>–ü—Ä–æ–≤–∞–ª (PAM)</b>\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user}</b>\nüåç IP: <b>{flag} {ip}</b>\n‚è∞ {formatted_time}{tz_label} ({formatted_date})"

            if entry:
                log_entries.append(entry)
                found_count += 1

        if log_entries:
            log_output = "\n\n".join(log_entries)
            await bot.edit_message_text(f"üîê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {found_count} —Å–æ–±—ã—Ç–∏–π SSH{source}:</b>\n\n{log_output}", chat_id=chat_id, message_id=sent_message.message_id, parse_mode="HTML")
        else:
            await bot.edit_message_text(f"üîê –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π SSH (–≤—Ö–æ–¥/–ø—Ä–æ–≤–∞–ª){source}.", chat_id=chat_id, message_id=sent_message.message_id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ SSH: {e}")
        await bot.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ SSH: {str(e)}", chat_id=chat_id, message_id=sent_message.message_id)


async def logs_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "logs"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)
    try:
        cmd = "journalctl -n 20 --no-pager -o short-precise"
        process = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
        stdout, stderr = await process.communicate()
        if process.returncode != 0:
            raise Exception(stderr.decode())
        log_output = escape_html(stdout.decode())
        sent_message = await message.answer(f"üìú <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã:</b>\n<pre>{log_output}</pre>", parse_mode="HTML")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–æ–≤: {e}")
        sent_message = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–æ–≤: {str(e)}")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id


async def restart_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "restart"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)
    sent_msg = await message.answer("‚ôªÔ∏è –ë–æ—Ç —É—Ö–æ–¥–∏—Ç –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫‚Ä¶")
    try:
        with open(RESTART_FLAG_FILE, "w") as f:
            f.write(f"{chat_id}:{sent_msg.message_id}")
        restart_cmd = "sudo systemctl restart tg-bot.service"
        process = await asyncio.create_subprocess_shell(restart_cmd)
        await process.wait()
        logging.info("Restart command sent for tg-bot.service")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ restart_handler –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        if os.path.exists(RESTART_FLAG_FILE):
            os.remove(RESTART_FLAG_FILE)
        try:
            await bot.edit_message_text(text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}", chat_id=chat_id, message_id=sent_msg.message_id)
        except Exception as edit_e:
            logging.error(f"Failed to edit restart error message: {edit_e}")


async def selftest_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "selftest"

    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)
    sent_message = await message.answer("üîç –°–æ–±–∏—Ä–∞—é —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ...")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

    def get_system_stats_sync():
        psutil.cpu_percent(interval=None)
        time.sleep(0.2)
        cpu = psutil.cpu_percent(interval=None)
        mem = psutil.virtual_memory().percent
        disk = psutil.disk_usage('/').percent
        with open("/proc/uptime") as f:
            uptime_sec = float(f.readline().split()[0])
        counters = psutil.net_io_counters()
        rx = counters.bytes_recv
        tx = counters.bytes_sent
        return cpu, mem, disk, uptime_sec, rx, tx

    try:
        cpu, mem, disk, uptime_sec, rx, tx = await asyncio.to_thread(get_system_stats_sync)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await bot.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", chat_id=chat_id, message_id=sent_message.message_id)
        return

    uptime_str = format_uptime(uptime_sec)

    ping_cmd = "ping -c 1 -W 1 8.8.8.8"
    ping_process = await asyncio.create_subprocess_shell(
        ping_cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )
    ping_stdout, _ = await ping_process.communicate()
    ping_result = ping_stdout.decode()
    ping_match = re.search(r"time=([\d\.]+) ms", ping_result)
    ping_time = ping_match.group(1) if ping_match else "N/A"
    internet = "‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω" if ping_match else "‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"

    ip_cmd = "curl -4 -s --max-time 3 ifconfig.me"
    ip_process = await asyncio.create_subprocess_shell(
        ip_cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )
    ip_stdout, _ = await ip_process.communicate()
    external_ip = ip_stdout.decode().strip() or "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

    last_login_info = ""
    if INSTALL_MODE == "root":
        try:
            log_file = None
            if await asyncio.to_thread(os.path.exists, "/var/log/secure"):
                log_file = "/var/log/secure"
            elif await asyncio.to_thread(os.path.exists, "/var/log/auth.log"):
                log_file = "/var/log/auth.log"

            line = None
            source = ""

            if log_file:
                source = f" (–∏–∑ {os.path.basename(log_file)})"
                cmd = f"tail -n 100 {log_file}"
                process = await asyncio.create_subprocess_shell(
                    cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
                )
                stdout, stderr = await process.communicate()
                if process.returncode != 0: raise Exception(stderr.decode())

                for l in reversed(stdout.decode().strip().split('\n')):
                    if "Accepted" in l and "sshd" in l:
                        line = l.strip()
                        break
            else:
                source = " (–∏–∑ journalctl)"
                cmd = "journalctl -u ssh --no-pager -g 'Accepted' | tail -n 1"
                process = await asyncio.create_subprocess_shell(
                    cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
                )
                try:
                    stdout, stderr = await asyncio.wait_for(process.communicate(), timeout=5.0)
                except asyncio.TimeoutError:
                    raise Exception("journalctl –∑–∞–≤–∏—Å (—Ç–∞–π–º-–∞—É—Ç 5—Å)")

                if process.returncode != 0: raise Exception(stderr.decode())
                line = stdout.decode().strip()

            if line:
                dt_object = None
                date_match_iso = re.search(r"(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})", line)
                date_match_syslog = re.search(r"(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})", line)

                try:
                    if date_match_iso:
                        dt_object = datetime.strptime(date_match_iso.group(1), "%Y-%m-%dT%H:%M:%S")
                    elif date_match_syslog:
                        log_timestamp = datetime.strptime(date_match_syslog.group(1), "%b %d %H:%M:%S")
                        current_year = datetime.now().year
                        dt_object = log_timestamp.replace(year=current_year)
                        if dt_object > datetime.now():
                            dt_object = dt_object.replace(year=current_year - 1)
                except Exception as e:
                    logging.warning(f"Selftest: –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É: {e}. –°—Ç—Ä–æ–∫–∞: {line}")

                login_match = re.search(r"Accepted\s+(?:\S+)\s+for\s+(\S+)\s+from\s+(\S+)", line)

                if dt_object and login_match:
                    user = login_match.group(1)
                    ip = login_match.group(2)
                    flag = await asyncio.to_thread(get_country_flag, ip)

                    tz_label = get_server_timezone_label()
                    formatted_time = dt_object.strftime("%H:%M")
                    formatted_date = dt_object.strftime("%d.%m.%Y")

                    last_login_info = (
                        f"\n\nüìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π SSH-–≤—Ö–æ–¥{source}:</b>\n"
                        f"üë§ <b>{user}</b>\n"
                        f"üåç IP: <b>{flag} {ip}</b>\n"
                        f"‚è∞ –í—Ä–µ–º—è: <b>{formatted_time}</b>{tz_label}\n"
                        f"üóìÔ∏è –î–∞—Ç–∞: <b>{formatted_date}</b>"
                    )
                else:
                    logging.warning(f"Selftest: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É SSH (login_match={login_match}, dt_object={dt_object}): {line}")
                    last_login_info = f"\n\nüìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π SSH-–≤—Ö–æ–¥{source}:</b>\n–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞."
            else:
                last_login_info = f"\n\nüìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π SSH-–≤—Ö–æ–¥{source}:</b>\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π."

        except Exception as e:
            logging.warning(f"SSH log check skipped: {e}")
            last_login_info = f"\n\nüìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π SSH-–≤—Ö–æ–¥:</b>\n‚è≥ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}"
    else:
        last_login_info = "\n\nüìÑ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π SSH-–≤—Ö–æ–¥:</b>\n<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ root</i>"

    response_text = (
        f"üõ† <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:</b>\n\n"
        f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        f"üìä –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: <b>{cpu:.1f}%</b>\n"
        f"üíæ –û–ó–£: <b>{mem:.1f}%</b>\n"
        f"üíΩ –ü–ó–£: <b>{disk:.1f}%</b>\n"
        f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <b>{uptime_str}</b>\n"
        f"{internet}\n"
        f"‚åõ –ó–∞–¥–µ—Ä–∂–∫–∞ (8.8.8.8): <b>{ping_time} –º—Å</b>\n"
        f"üåê –í–Ω–µ—à–Ω–∏–π IP: <code>{external_ip}</code>\n"
        f"üì° –¢—Ä–∞—Ñ–∏–∫ ‚¨á <b>{format_traffic(rx)}</b> / ‚¨Ü <b>{format_traffic(tx)}</b>"
    )

    response_text += last_login_info

    await bot.edit_message_text(response_text, chat_id=chat_id, message_id=sent_message.message_id, parse_mode="HTML")


async def speedtest_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "speedtest"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)
    sent_message = await message.answer("üöÄ –ó–∞–ø—É—Å–∫ speedtest... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

    cmd = "speedtest --accept-license --accept-gdpr --format=json"
    process = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    stdout, stderr = await process.communicate()

    await delete_previous_message(user_id, command, chat_id)

    if process.returncode == 0:
        output = stdout.decode('utf-8', errors='ignore')
        try:
            data = json.loads(output)
            download_speed = data.get("download", {}).get("bandwidth", 0) / 125000
            upload_speed = data.get("upload", {}).get("bandwidth", 0) / 125000
            ping_latency = data.get("ping", {}).get("latency", "N/A")
            server_name = data.get("server", {}).get("name", "N/A")
            server_location = data.get("server", {}).get("location", "N/A")
            result_url = data.get("result", {}).get("url", "N/A")

            response_text = (f"üöÄ <b>Speedtest –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>\n\n"
                             f"‚¨áÔ∏è <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ:</b> {download_speed:.2f} –ú–±–∏—Ç/—Å\n"
                             f"‚¨ÜÔ∏è <b>–ó–∞–≥—Ä—É–∑–∫–∞:</b> {upload_speed:.2f} –ú–±–∏—Ç/—Å\n"
                             f"‚è± <b>–ü–∏–Ω–≥:</b> {ping_latency} –º—Å\n\n"
                             f"üè¢ <b>–°–µ—Ä–≤–µ—Ä:</b> {server_name} ({server_location})\n"
                             f"üîó <b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b> {result_url}")
        except json.JSONDecodeError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç speedtest: {e}\nOutput: {output[:500]}")
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ speedtest: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞.\n<pre>{escape_html(output[:1000])}</pre>"
        except Exception as e:
             logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ speedtest: {e}")
             response_text = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ speedtest: {escape_html(str(e))}"
    else:
        error_output = stderr.decode('utf-8', errors='ignore') or stdout.decode('utf-8', errors='ignore')
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è speedtest. –ö–æ–¥: {process.returncode}. –í—ã–≤–æ–¥: {error_output}")
        response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ speedtest:\n<pre>{escape_html(error_output)}</pre>"

    sent_message_final = await message.answer(response_text, parse_mode="HTML", disable_web_page_preview=True)
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message_final.message_id


async def top_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "top"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)
    cmd = "ps aux --sort=-%cpu | head -n 15"
    process = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    stdout, stderr = await process.communicate()
    if process.returncode == 0:
        output = escape_html(stdout.decode())
        response_text = f"üî• <b>–¢–æ–ø 14 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ CPU:</b>\n<pre>{output}</pre>"
    else:
        error_output = escape_html(stderr.decode())
        response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n<pre>{error_output}</pre>"
    sent_message = await message.answer(response_text, parse_mode="HTML")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id


async def traffic_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "traffic"
    if not is_allowed(user_id, command):
         await send_access_denied_message(user_id, chat_id, command)
         return

    all_commands_to_delete = [
        "start", "menu", "manage_users", "reboot_confirm", "generate_vless", 
        "adduser", "notifications_menu", "traffic", "get_id", "fall2ban", 
        "sshlog", "logs", "restart", "selftest", "speedtest", "top", 
        "update", "uptime", "updatexray"
    ]

    if user_id in TRAFFIC_MESSAGE_IDS:
        logging.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {user_id} (IF –±–ª–æ–∫)")
        try:
            message_id = TRAFFIC_MESSAGE_IDS.pop(user_id)
            await bot.delete_message(chat_id=chat_id, message_id=message_id)
        except (TelegramBadRequest, KeyError) as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        
        TRAFFIC_PREV.pop(user_id, None)
        logging.debug("–û—Å—Ç–∞–Ω–æ–≤–∫–∞: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await delete_previous_message(user_id, all_commands_to_delete, chat_id)
        sent_message = await message.answer("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=get_main_reply_keyboard(user_id))
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
        logging.debug(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞: –°–æ–æ–±—â–µ–Ω–∏–µ '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' (ID: {sent_message.message_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ LAST_MESSAGE_IDS.")

    else:
        logging.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {user_id} (ELSE –±–ª–æ–∫)")
        logging.debug("–ó–∞–ø—É—Å–∫: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        await delete_previous_message(user_id, all_commands_to_delete, chat_id)

        def get_initial_counters():
            return psutil.net_io_counters()

        try:
            counters = await asyncio.to_thread(get_initial_counters)
            TRAFFIC_PREV[user_id] = (counters.bytes_recv, counters.bytes_sent)
            msg_text = ("üì° <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω</b>...\n\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ù–ï –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫. –ù–∞–∂–º–∏—Ç–µ 'üì° –¢—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏' –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.</i>")
            sent_message = await message.answer(msg_text, parse_mode="HTML")
            TRAFFIC_MESSAGE_IDS[user_id] = sent_message.message_id
            logging.debug(f"–ó–∞–ø—É—Å–∫: –°–æ–æ–±—â–µ–Ω–∏–µ '–í–∫–ª—é—á–µ–Ω' (ID: {sent_message.message_id}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ TRAFFIC_MESSAGE_IDS.")
        except Exception as e:
            logging.error(f"Error starting traffic monitor for {user_id}: {e}")
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞: {e}")


async def update_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "update"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)
    sent_message = await message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPS... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    cmd = "sudo DEBIAN_FRONTEND=noninteractive apt update && sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y && sudo apt autoremove -y"
    process = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    stdout, stderr = await process.communicate()
    output = stdout.decode('utf-8', errors='ignore')
    error_output = stderr.decode('utf-8', errors='ignore')

    await delete_previous_message(user_id, command, chat_id)

    if process.returncode == 0:
        response_text = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n<pre>{escape_html(output[-4000:])}</pre>"
    else:
        response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–ö–æ–¥: {process.returncode}):\n<pre>{escape_html(error_output[-4000:])}</pre>"

    sent_message_final = await message.answer(response_text, parse_mode="HTML")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message_final.message_id


async def uptime_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "uptime"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)
    try:
        def read_uptime_file():
            with open("/proc/uptime") as f:
                return float(f.readline().split()[0])

        uptime_sec = await asyncio.to_thread(read_uptime_file)
        uptime_str = format_uptime(uptime_sec)
        sent_message = await message.answer(f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: <b>{uptime_str}</b>", parse_mode="HTML")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    except Exception as e:
       logging.error(f"–û—à–∏–±–∫–∞ –≤ uptime_handler: {e}")
       sent_message = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ø—Ç–∞–π–º–∞: {str(e)}")
       LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id


async def detect_xray_client():
    cmd = "docker ps --format '{{.Names}} {{.Image}}'"
    process = await asyncio.create_subprocess_shell(
        cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()

    if process.returncode != 0:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 'docker ps': {stderr.decode()}")
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å 'docker ps'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω, –∏ —É –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞.\n<pre>{stderr.decode()}</pre>")

    containers = stdout.decode().strip().split('\n')
    if not containers:
        logging.warning("detect_xray_client: 'docker ps' –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")
        return None, None

    # –ü–æ–∏—Å–∫ Amnezia
    for line in containers:
        if not line: continue
        try:
            name, image = line.split(' ', 1)
            if 'amnezia' in image.lower() and 'xray' in image.lower():
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω Amnezia (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {name}, –æ–±—Ä–∞–∑: {image})")
                return "amnezia", name
        except ValueError: continue

    # –ü–æ–∏—Å–∫ Marzban
    for line in containers:
        if not line: continue
        try:
            name, image = line.split(' ', 1)
            if ('marzban' in image.lower() or 'marzban' in name.lower()) and 'xray' not in name.lower():
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω Marzban (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {name}, –æ–±—Ä–∞–∑: {image})")
                return "marzban", name
        except ValueError: continue

    logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Xray (Marzban, Amnezia).")
    return None, None


async def updatexray_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "updatexray"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)
    sent_msg = await message.answer("üîç –û–ø—Ä–µ–¥–µ–ª—è—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Xray...")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_msg.message_id
    try:
        client, container_name = await detect_xray_client() 

        if not client:
            await bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç Xray (Marzban, Amnezia). –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", chat_id=chat_id, message_id=sent_msg.message_id)
            return

        version = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π"
        client_name_display = client.capitalize()

        await bot.edit_message_text(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω: <b>{client_name_display}</b> (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: <code>{escape_html(container_name)}</code>). –ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...", chat_id=chat_id, message_id=sent_msg.message_id, parse_mode="HTML")

        update_cmd = ""
        version_cmd = ""

        if client == "amnezia":
            update_cmd = (
                f'docker exec {container_name} /bin/bash -c "'
                'rm -f Xray-linux-64.zip xray geoip.dat geosite.dat && '
                'wget -q -O Xray-linux-64.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip && '
                'wget -q -O geoip.dat https://github.com/v2fly/geoip/releases/latest/download/geoip.dat && '
                'wget -q -O geosite.dat https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat && '
                'unzip -o Xray-linux-64.zip xray && '
                'cp xray /usr/bin/xray && '
                'cp geoip.dat /usr/bin/geoip.dat && '
                'cp geosite.dat /usr/bin/geosite.dat && '
                'rm Xray-linux-64.zip xray geoip.dat geosite.dat" && '
                f'docker restart {container_name}'
            )
            version_cmd = f"docker exec {container_name} /usr/bin/xray version"

        elif client == "marzban":
             check_deps_cmd = "command -v unzip >/dev/null 2>&1 || (DEBIAN_FRONTEND=noninteractive apt-get update -y && apt-get install -y unzip wget)"
             download_unzip_cmd = (
                "mkdir -p /var/lib/marzban/xray-core && "
                "cd /var/lib/marzban/xray-core && "
                "wget -q -O Xray-linux-64.zip https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-64.zip && "
                "wget -q -O geoip.dat https://github.com/v2fly/geoip/releases/latest/download/geoip.dat && "
                "wget -q -O geosite.dat https://github.com/v2fly/domain-list-community/releases/latest/download/dlc.dat && "
                "unzip -o Xray-linux-64.zip xray && "
                "rm Xray-linux-64.zip"
            )
             env_file = "/opt/marzban/.env"
             update_env_cmd = (
                 f"if ! grep -q '^XRAY_EXECUTABLE_PATH=' {env_file}; then echo 'XRAY_EXECUTABLE_PATH=/var/lib/marzban/xray-core/xray' >> {env_file}; else sed -i 's|^XRAY_EXECUTABLE_PATH=.*|XRAY_EXECUTABLE_PATH=/var/lib/marzban/xray-core/xray|' {env_file}; fi && "
                 f"if ! grep -q '^XRAY_ASSETS_PATH=' {env_file}; then echo 'XRAY_ASSETS_PATH=/var/lib/marzban/xray-core' >> {env_file}; else sed -i 's|^XRAY_ASSETS_PATH=.*|XRAY_ASSETS_PATH=/var/lib/marzban/xray-core|' {env_file}; fi"
             )
             restart_cmd = f"docker restart {container_name}"
             update_cmd = f"{check_deps_cmd} && {download_unzip_cmd} && {update_env_cmd} && {restart_cmd}"
             version_cmd = f'docker exec {container_name} /var/lib/marzban/xray-core/xray version'

        process_update = await asyncio.create_subprocess_shell(update_cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
        stdout_update, stderr_update = await process_update.communicate()

        if process_update.returncode != 0:
            error_output = stderr_update.decode() or stdout_update.decode()
            raise Exception(f"–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {client_name_display} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:\n<pre>{escape_html(error_output)}</pre>")

        process_version = await asyncio.create_subprocess_shell(version_cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
        stdout_version, _ = await process_version.communicate()
        version_output = stdout_version.decode('utf-8', 'ignore')
        version_match = re.search(r'Xray\s+([\d\.]+)', version_output)
        if version_match:
            version = version_match.group(1)

        final_message = f"‚úÖ Xray –¥–ª—è <b>{client_name_display}</b> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ <b>{version}</b>"
        await bot.edit_message_text(final_message, chat_id=chat_id, message_id=sent_msg.message_id, parse_mode="HTML")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ updatexray_handler: {e}")
        error_msg = f"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Xray:</b>\n\n{str(e)}"
        try:
             await bot.edit_message_text(error_msg , chat_id=chat_id, message_id=sent_msg.message_id, parse_mode="HTML")
        except TelegramBadRequest as edit_e:
             if "message to edit not found" in str(edit_e):
                  logging.warning("UpdateXray: Failed to edit error message, likely deleted.")
                  await message.answer(error_msg, parse_mode="HTML")
             else:
                  raise
    finally:
        await state.clear()


# --- [–ë–õ–û–ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô] –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π (callback) ---

# –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è back_to_menu
@dp.callback_query(F.data == "back_to_menu")
async def cq_back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    command = "back_to_menu"
    try:
        await state.clear()
        if not is_allowed(user_id, command):
            await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
            return
        await callback.message.edit_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...", reply_markup=None)
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): pass
        elif "message to edit not found" in str(e): pass
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_back_to_menu (edit): {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_back_to_menu: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é.", show_alert=True)
    finally:
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è toggle_alert_*, alert_downtime_stub, get_id_inline, back_to_manage_users
@dp.callback_query(F.data.startswith("toggle_alert_"))
async def cq_toggle_alert(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, "toggle_alert_resources"): 
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        alert_type = callback.data.split('_', 2)[-1]
        if alert_type not in ["resources", "logins", "bans"]: raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞: {alert_type}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data –≤ cq_toggle_alert: {e} (data: {callback.data})")
        await callback.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π callback).", show_alert=True)
        return
    if user_id not in ALERTS_CONFIG: ALERTS_CONFIG[user_id] = {}
    current_state = ALERTS_CONFIG[user_id].get(alert_type, False)
    new_state = not current_state
    ALERTS_CONFIG[user_id][alert_type] = new_state
    save_alerts_config() 
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª '{alert_type}' –Ω–∞ {new_state}")
    new_keyboard = get_alerts_menu_keyboard(user_id)
    try:
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        if alert_type == "resources": alert_name = "–†–µ—Å—É—Ä—Å—ã"
        elif alert_type == "logins": alert_name = "–í—Ö–æ–¥—ã/–í—ã—Ö–æ–¥—ã SSH"
        else: alert_name = "–ë–∞–Ω—ã"
        await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{alert_name}' {'‚úÖ –í–ö–õ–Æ–ß–ï–ù–´' if new_state else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–´'}.")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ cq_toggle_alert: {e}")
        await callback.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)

@dp.callback_query(F.data == "alert_downtime_stub")
async def cq_alert_downtime_stub(callback: types.CallbackQuery):
    await callback.answer(
        "‚è≥ –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–∞—É–Ω—Ç–∞–π–º–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, UptimeRobot).", 
        show_alert=True
    )

@dp.callback_query(F.data == "get_id_inline")
async def cq_get_id_inline(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    command = "get_id_inline"
    if not is_allowed(user_id, command):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        await callback.message.edit_text(
            f"–í–∞—à ID: <code>{user_id}</code>",
            parse_mode="HTML",
            reply_markup=get_back_keyboard("back_to_manage_users")
        )
        await callback.answer(f"–í–∞—à ID: {user_id}")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): await callback.answer("–í—ã —É–∂–µ –∑–¥–µ—Å—å.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_get_id_inline (edit): {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_get_id_inline: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data == "back_to_manage_users")
async def cq_back_to_manage_users(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    command = "back_to_manage_users"
    if not is_allowed(user_id, command):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        await state.clear() 
        user_list = "\n".join([
            f" ‚Ä¢ {USER_NAMES.get(str(uid), f'ID: {uid}')} (<b>{group}</b>)"
            for uid, group in ALLOWED_USERS.items() if uid != ADMIN_USER_ID
        ])
        if not user_list: user_list = "–î—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç."
        await callback.message.edit_text(
            f"üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>:\n\n{user_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_manage_users_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): await callback.answer("–í—ã —É–∂–µ –∑–¥–µ—Å—å.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_back_to_manage_users (edit): {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_back_to_manage_users: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
@dp.callback_query(F.data == "add_user")
async def cq_add_user_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_allowed(user_id, "add_user"):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_back_keyboard("back_to_manage_users"),
        parse_mode="HTML"
    )
    await state.set_state(ManageUsersStates.waiting_for_user_id)
    await callback.answer()

@dp.message(StateFilter(ManageUsersStates.waiting_for_user_id))
async def process_add_user_id(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    original_question_msg_id = None
    if user_id in LAST_MESSAGE_IDS and "manage_users" in LAST_MESSAGE_IDS[user_id]:
        original_question_msg_id = LAST_MESSAGE_IDS[user_id].get("manage_users") # Use get for safety
    elif message.reply_to_message and message.reply_to_message.from_user.is_bot:
         original_question_msg_id = message.reply_to_message.message_id

    try:
        new_user_id = int(message.text.strip())
        if new_user_id in ALLOWED_USERS:
            await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            return

        await state.update_data(new_user_id=new_user_id)

        if original_question_msg_id:
            try:
                await bot.edit_message_text(
                    "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    chat_id=message.chat.id,
                    message_id=original_question_msg_id,
                    reply_markup=get_group_selection_keyboard()
                )
                await message.delete()
            except TelegramBadRequest as edit_err:
                 logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {original_question_msg_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã: {edit_err}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
                 await message.reply(
                    "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    reply_markup=get_group_selection_keyboard()
                 )
        else:
             await message.reply(
                "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=get_group_selection_keyboard()
             )

        await state.set_state(ManageUsersStates.waiting_for_group)
    except ValueError:
        await message.reply("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_add_user_id: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.callback_query(StateFilter(ManageUsersStates.waiting_for_group), F.data.startswith("set_group_new_"))
async def process_add_user_group(callback: types.CallbackQuery, state: FSMContext):
    try:
        group = callback.data.split('_')[-1]
        user_data = await state.get_data()
        new_user_id = user_data.get('new_user_id')

        if not new_user_id:
             raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM.")

        ALLOWED_USERS[new_user_id] = group
        USER_NAMES[str(new_user_id)] = f"–ù–æ–≤—ã–π_{new_user_id}" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
        save_users() # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
        logging.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_id} –≤ –≥—Ä—É–ø–ø—É '{group}'")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(refresh_user_names())

        await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{new_user_id}</code> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É <b>{group}</b>.", parse_mode="HTML", reply_markup=get_back_keyboard("back_to_manage_users"))
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_add_user_group: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_back_keyboard("back_to_manage_users"))
    finally:
        await callback.answer()


@dp.callback_query(F.data == "delete_user")
async def cq_delete_user_list(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, "delete_user"):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    keyboard = get_delete_users_keyboard(user_id)
    await callback.message.edit_text("‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data.startswith("delete_user_"))
async def cq_delete_user_confirm(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if not is_allowed(admin_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        user_id_to_delete = int(callback.data.split('_')[-1])
        if user_id_to_delete == ADMIN_USER_ID:
            await callback.answer("‚õî –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∞.", show_alert=True)
            return
        if user_id_to_delete not in ALLOWED_USERS:
            await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            keyboard = get_delete_users_keyboard(admin_id)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            return

        deleted_user_name = USER_NAMES.get(str(user_id_to_delete), f"ID: {user_id_to_delete}")
        deleted_group = ALLOWED_USERS.pop(user_id_to_delete, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        USER_NAMES.pop(str(user_id_to_delete), None)
        save_users()
        logging.info(f"–ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {deleted_user_name} ({user_id_to_delete}) –∏–∑ –≥—Ä—É–ø–ø—ã '{deleted_group}'")

        keyboard = get_delete_users_keyboard(admin_id)
        await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{deleted_user_name}</b> —É–¥–∞–ª–µ–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard, parse_mode="HTML")
        await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {deleted_user_name} —É–¥–∞–ª–µ–Ω.", show_alert=False)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_delete_user_confirm: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)

@dp.callback_query(F.data.startswith("request_self_delete_"))
async def cq_request_self_delete(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        user_id_to_delete = int(callback.data.split('_')[-1])
        if user_id != user_id_to_delete:
             await callback.answer("‚õî –û—à–∏–±–∫–∞: ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.", show_alert=True)
             return
        if user_id_to_delete == ADMIN_USER_ID:
            await callback.answer("‚õî –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è.", show_alert=True)
            return

        keyboard = get_self_delete_confirmation_keyboard(user_id)
        await callback.message.edit_text("‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞?</b>\n–í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º.", reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_request_self_delete: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("confirm_self_delete_"))
async def cq_confirm_self_delete(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        user_id_to_delete = int(callback.data.split('_')[-1])
        if user_id != user_id_to_delete:
             await callback.answer("‚õî –û—à–∏–±–∫–∞: ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.", show_alert=True)
             return
        if user_id_to_delete == ADMIN_USER_ID:
            await callback.answer("‚õî –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è.", show_alert=True)
            return

        deleted_user_name = USER_NAMES.get(str(user_id_to_delete), f"ID: {user_id_to_delete}")
        deleted_group = ALLOWED_USERS.pop(user_id_to_delete, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        USER_NAMES.pop(str(user_id_to_delete), None)
        save_users()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {deleted_user_name} ({user_id_to_delete}) —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–∑ –≥—Ä—É–ø–ø—ã '{deleted_group}'")

        await callback.message.delete()
        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_confirm_self_delete: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)

@dp.callback_query(F.data == "back_to_delete_users")
async def cq_back_to_delete_users(callback: types.CallbackQuery):
     await cq_delete_user_list(callback)


@dp.callback_query(F.data == "change_group")
async def cq_change_group_list(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, "change_group"):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    keyboard = get_change_group_keyboard()
    await callback.message.edit_text("üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@dp.callback_query(F.data.startswith("select_user_change_group_"))
async def cq_select_user_for_group_change(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        user_id_to_change = int(callback.data.split('_')[-1])
        if user_id_to_change not in ALLOWED_USERS or user_id_to_change == ADMIN_USER_ID:
            await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω.", show_alert=True)
            return

        user_name = USER_NAMES.get(str(user_id_to_change), f"ID: {user_id_to_change}")
        current_group = ALLOWED_USERS[user_id_to_change]
        keyboard = get_group_selection_keyboard(user_id_to_change)
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user_name}</b>\n–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: <b>{current_group}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_select_user_for_group_change: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data.startswith("set_group_"))
async def cq_set_group(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    is_adding_new_user = current_state == ManageUsersStates.waiting_for_group

    admin_id = callback.from_user.id
    if not is_allowed(admin_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return

    if is_adding_new_user:
        await process_add_user_group(callback, state)
        return

    try:
        parts = callback.data.split('_')
        user_id_to_change = int(parts[2])
        new_group = parts[3]

        if user_id_to_change not in ALLOWED_USERS or user_id_to_change == ADMIN_USER_ID:
            await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω.", show_alert=True)
            return

        old_group = ALLOWED_USERS[user_id_to_change]
        ALLOWED_USERS[user_id_to_change] = new_group
        save_users()
        user_name = USER_NAMES.get(str(user_id_to_change), f"ID: {user_id_to_change}")
        logging.info(f"–ê–¥–º–∏–Ω {admin_id} –∏–∑–º–µ–Ω–∏–ª –≥—Ä—É–ø–ø—É –¥–ª—è {user_name} ({user_id_to_change}) —Å '{old_group}' –Ω–∞ '{new_group}'")

        keyboard = get_change_group_keyboard()
        await callback.message.edit_text(
             f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è <b>{user_name}</b> –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_group}</b>.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
             reply_markup=keyboard,
             parse_mode="HTML"
        )
        await callback.answer(f"–ì—Ä—É–ø–ø–∞ –¥–ª—è {user_name} –∏–∑–º–µ–Ω–µ–Ω–∞.")

    except (IndexError, ValueError) as e:
         logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data –≤ cq_set_group: {e} (data: {callback.data})")
         await callback.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_set_group: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã.", show_alert=True)


# --- [ –ö–û–ù–ï–¶ –ë–õ–û–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ] ---


# --- Text Handlers ---
@dp.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def notifications_menu_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "notifications_menu"

    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id)

    keyboard = get_alerts_menu_keyboard(user_id)
    sent_message = await message.answer(
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id


@dp.message(F.text == "üîí Fail2Ban Log")
async def text_fall2ban_handler(message: types.Message):
    await fall2ban_handler(message)

@dp.message(F.text == "üìú SSH-–ª–æ–≥")
async def text_sshlog_handler(message: types.Message):
    await sshlog_handler(message)

@dp.message(F.text == "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
async def text_logs_handler(message: types.Message):
    await logs_handler(message)

@dp.message(F.text == "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
async def text_restart_handler(message: types.Message):
    await restart_handler(message)

@dp.message(F.text == "üõ† –°–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
async def text_selftest_handler(message: types.Message):
    await selftest_handler(message)

@dp.message(F.text == "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏")
async def text_speedtest_handler(message: types.Message):
    await speedtest_handler(message)

@dp.message(F.text == "üî• –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
async def text_top_handler(message: types.Message):
    await top_handler(message)

@dp.message(F.text == "üì° –¢—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏")
async def text_traffic_handler(message: types.Message):
    await traffic_handler(message)

@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPS")
async def text_update_handler(message: types.Message):
    await update_handler(message)

@dp.message(F.text == "‚è± –ê–ø—Ç–∞–π–º")
async def text_uptime_handler(message: types.Message):
    await uptime_handler(message)

@dp.message(F.text == "ü©ª –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ X-ray")
async def text_updatexray_handler(message: types.Message, state: FSMContext):
    await updatexray_handler(message, state)


@dp.message(F.text == "üÜî –ú–æ–π ID")
async def text_get_id_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "get_id"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    
    await delete_previous_message(user_id, command, message.chat.id)
    sent_message = await message.answer(
        f"–í–∞—à ID: <code>{user_id}</code>\n\n"
        "<i>(–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–µ –≤ –º–µ–Ω—é 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')</i>", 
        parse_mode="HTML"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id


# --- Reboot Handler ---
@dp.callback_query(F.data == "reboot")
async def reboot_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    command = "reboot" 

    if not is_allowed(user_id, command):
        try:
             await callback.answer("‚õî –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ (–Ω–µ root).", show_alert=True) 
        except TelegramBadRequest:
             pass
        return

    try:
        await bot.edit_message_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. <b>–ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É VPS</b>...", chat_id=chat_id, message_id=message_id, parse_mode="HTML")
    except TelegramBadRequest:
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞–ª–µ–Ω–æ).")

    try:
        with open(REBOOT_FLAG_FILE, "w") as f:
            f.write(str(user_id))
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    try:
        # –£–±–∏—Ä–∞–µ–º sudo, –µ—Å–ª–∏ —É–∂–µ root
        reboot_cmd = "reboot" if INSTALL_MODE == "root" else "sudo reboot"
        logging.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {reboot_cmd}")
        process = await asyncio.create_subprocess_shell(reboot_cmd)
        logging.info("–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã reboot: {e}")
        try:
            await bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        except Exception as send_e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {send_e}")


# --- Background Tasks & Startup ---
async def traffic_monitor():
    await asyncio.sleep(TRAFFIC_INTERVAL)
    while True:
        current_users = list(TRAFFIC_MESSAGE_IDS.keys())
        if not current_users:
            await asyncio.sleep(TRAFFIC_INTERVAL)
            continue

        for user_id in current_users:
            if user_id not in TRAFFIC_MESSAGE_IDS: continue
            message_id = TRAFFIC_MESSAGE_IDS.get(user_id)
            if not message_id:
                logging.warning(f"Traffic monitor: Missing message ID for user {user_id}")
                TRAFFIC_MESSAGE_IDS.pop(user_id, None)
                continue

            try:
                def get_traffic_update():
                    counters_now = psutil.net_io_counters()
                    rx_now = counters_now.bytes_recv
                    tx_now = counters_now.bytes_sent
                    prev_rx, prev_tx = TRAFFIC_PREV.get(user_id, (rx_now, tx_now))
                    rx_delta = max(0, rx_now - prev_rx)
                    tx_delta = max(0, tx_now - prev_tx)
                    rx_speed = rx_delta * 8 / 1024 / 1024 / TRAFFIC_INTERVAL
                    tx_speed = tx_delta * 8 / 1024 / 1024 / TRAFFIC_INTERVAL
                    return rx_now, tx_now, rx_speed, tx_speed

                rx, tx, rx_speed, tx_speed = await asyncio.to_thread(get_traffic_update)
                TRAFFIC_PREV[user_id] = (rx, tx)

                msg_text = (f"üì° –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:\n"
                            f"=========================\n"
                            f"‚¨áÔ∏è RX: {format_traffic(rx)}\n"
                            f"‚¨ÜÔ∏è TX: {format_traffic(tx)}\n\n"
                            f"‚ö°Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n"
                            f"=========================\n"
                            f"‚¨áÔ∏è RX: {rx_speed:.2f} –ú–±–∏—Ç/—Å\n"
                            f"‚¨ÜÔ∏è TX: {tx_speed:.2f} –ú–±–∏—Ç/—Å")

                await bot.edit_message_text(chat_id=user_id, message_id=message_id, text=msg_text)

            except TelegramRetryAfter as e:
                logging.warning(f"Traffic Monitor: TelegramRetryAfter for {user_id}: Wait {e.retry_after}s")
                await asyncio.sleep(e.retry_after)
            except TelegramBadRequest as e:
                if "message is not modified" in str(e): pass
                elif "message to edit not found" in str(e) or "chat not found" in str(e):
                    logging.warning(f"Traffic Monitor: Message/Chat not found for user {user_id}. Stopping monitor.")
                    TRAFFIC_MESSAGE_IDS.pop(user_id, None)
                    TRAFFIC_PREV.pop(user_id, None)
                else:
                    logging.error(f"Traffic Monitor: Unexpected TelegramBadRequest for {user_id}: {e}")
                    TRAFFIC_MESSAGE_IDS.pop(user_id, None)
                    TRAFFIC_PREV.pop(user_id, None)
            except Exception as e:
                logging.error(f"Traffic Monitor: Critical error updating for {user_id}: {e}")
                TRAFFIC_MESSAGE_IDS.pop(user_id, None)
                TRAFFIC_PREV.pop(user_id, None)

        await asyncio.sleep(TRAFFIC_INTERVAL)

# –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
async def resource_monitor():
    global RESOURCE_ALERT_STATE, LAST_RESOURCE_ALERT_TIME
    logging.info("–ú–æ–Ω–∏—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.sleep(15)

    while True:
        try:
            def check_resources_sync():
                cpu = psutil.cpu_percent(interval=1)
                ram = psutil.virtual_memory().percent
                disk = psutil.disk_usage('/').percent
                return cpu, ram, disk

            cpu_usage, ram_usage, disk_usage = await asyncio.to_thread(check_resources_sync)
            logging.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: CPU={cpu_usage}%, RAM={ram_usage}%, Disk={disk_usage}%")

            alerts_to_send = []
            current_time = time.time()

            # –õ–æ–≥–∏–∫–∞ CPU
            if cpu_usage >= CPU_THRESHOLD:
                if not RESOURCE_ALERT_STATE["cpu"]:
                    msg = f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ CPU!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{cpu_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {CPU_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç CPU.")
                    RESOURCE_ALERT_STATE["cpu"] = True
                    LAST_RESOURCE_ALERT_TIME["cpu"] = current_time
                elif current_time - LAST_RESOURCE_ALERT_TIME["cpu"] > RESOURCE_ALERT_COOLDOWN:
                    msg = f"‚ÄºÔ∏è <b>CPU –≤—Å–µ –µ—â–µ –í–´–°–û–ö–ò–ô!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{cpu_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {CPU_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç CPU.")
                    LAST_RESOURCE_ALERT_TIME["cpu"] = current_time
            elif cpu_usage < CPU_THRESHOLD and RESOURCE_ALERT_STATE["cpu"]:
                 alerts_to_send.append(f"‚úÖ <b>–ù–∞–≥—Ä—É–∑–∫–∞ CPU –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∞—Å—å.</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{cpu_usage:.1f}%</b>")
                 logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ CPU.")
                 RESOURCE_ALERT_STATE["cpu"] = False
                 LAST_RESOURCE_ALERT_TIME["cpu"] = 0

            # –õ–æ–≥–∏–∫–∞ RAM
            if ram_usage >= RAM_THRESHOLD:
                if not RESOURCE_ALERT_STATE["ram"]:
                    msg = f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ RAM!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{ram_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {RAM_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç RAM.")
                    RESOURCE_ALERT_STATE["ram"] = True
                    LAST_RESOURCE_ALERT_TIME["ram"] = current_time
                elif current_time - LAST_RESOURCE_ALERT_TIME["ram"] > RESOURCE_ALERT_COOLDOWN:
                    msg = f"‚ÄºÔ∏è <b>RAM –≤—Å–µ –µ—â–µ –í–´–°–û–ö–ê–Ø!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{ram_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {RAM_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç RAM.")
                    LAST_RESOURCE_ALERT_TIME["ram"] = current_time
            elif ram_usage < RAM_THRESHOLD and RESOURCE_ALERT_STATE["ram"]:
                 alerts_to_send.append(f"‚úÖ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–æ—Å—å.</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{ram_usage:.1f}%</b>")
                 logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ RAM.")
                 RESOURCE_ALERT_STATE["ram"] = False
                 LAST_RESOURCE_ALERT_TIME["ram"] = 0

            # –õ–æ–≥–∏–∫–∞ Disk
            if disk_usage >= DISK_THRESHOLD:
                if not RESOURCE_ALERT_STATE["disk"]:
                    msg = f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ Disk!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{disk_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {DISK_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç Disk.")
                    RESOURCE_ALERT_STATE["disk"] = True
                    LAST_RESOURCE_ALERT_TIME["disk"] = current_time
                elif current_time - LAST_RESOURCE_ALERT_TIME["disk"] > RESOURCE_ALERT_COOLDOWN:
                    msg = f"‚ÄºÔ∏è <b>Disk –≤—Å–µ –µ—â–µ –í–´–°–û–ö–ò–ô!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{disk_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {DISK_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç Disk.")
                    LAST_RESOURCE_ALERT_TIME["disk"] = current_time
            elif disk_usage < DISK_THRESHOLD and RESOURCE_ALERT_STATE["disk"]:
                 alerts_to_send.append(f"‚úÖ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Disk –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–æ—Å—å.</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{disk_usage:.1f}%</b>")
                 logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Disk.")
                 RESOURCE_ALERT_STATE["disk"] = False
                 LAST_RESOURCE_ALERT_TIME["disk"] = 0

            if alerts_to_send:
                full_alert_message = "\n\n".join(alerts_to_send)
                await send_alert(full_alert_message, "resources")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

        await asyncio.sleep(RESOURCE_CHECK_INTERVAL)


async def initial_restart_check():
    if os.path.exists(RESTART_FLAG_FILE):
        try:
            with open(RESTART_FLAG_FILE, "r") as f:
                content = f.read().strip()
                chat_id, message_id = map(int, content.split(':'))
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
            logging.info(f"–ò–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≤ —á–∞—Ç–µ ID: {chat_id}")
        except FileNotFoundError: logging.info("Restart flag file not found on startup.")
        except ValueError: logging.error("Invalid content in restart flag file.")
        except TelegramBadRequest as e: logging.warning(f"Failed to edit restart message (likely deleted or invalid): {e}")
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        finally:
            try: os.remove(RESTART_FLAG_FILE)
            except OSError as e:
                 if e.errno != 2: logging.error(f"Error removing restart flag file: {e}")


async def initial_reboot_check():
    if os.path.exists(REBOOT_FLAG_FILE):
        try:
            with open(REBOOT_FLAG_FILE, "r") as f:
                user_id_str = f.read().strip()
                if not user_id_str.isdigit(): raise ValueError("Invalid content in reboot flag file.")
                user_id = int(user_id_str)
            await bot.send_message(chat_id=user_id, text="‚úÖ <b>–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω! –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏.</b>", parse_mode="HTML")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id}")
        except FileNotFoundError: logging.info("Reboot flag file not found on startup.")
        except ValueError as ve: logging.error(f"Error processing reboot flag file content: {ve}")
        except TelegramBadRequest as e: logging.warning(f"Failed to send reboot notification to user {user_id_str}: {e}")
        except Exception as e: logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        finally:
             try: os.remove(REBOOT_FLAG_FILE)
             except OSError as e:
                  if e.errno != 2: logging.error(f"Error removing reboot flag file: {e}")


# –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ `main` –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (v3)
async def main():
    background_tasks = set()

    async def shutdown(dispatcher: Dispatcher, bot_instance: Bot):
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling...")
        try:
            await dispatcher.stop_polling()
            logging.info("Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: {e}")

        logging.info("–ù–∞—á–∏–Ω–∞—é –æ—Ç–º–µ–Ω—É —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
        for task in list(background_tasks):
            if task and not task.done():
                task.cancel()

        logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)...")
        results = await asyncio.gather(*background_tasks, return_exceptions=True)
        background_tasks.clear()

        for i, result in enumerate(results):
             if isinstance(result, Exception) and not isinstance(result, asyncio.CancelledError):
                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–∏–Ω–¥–µ–∫—Å {i}): {result}")
        logging.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

        session_to_close = getattr(bot_instance, 'session', None)
        underlying_session = getattr(session_to_close, 'session', None)

        if underlying_session and not underlying_session.closed:
            logging.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
            await session_to_close.close()
            logging.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        elif session_to_close:
             logging.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
        else:
             logging.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    loop = asyncio.get_event_loop()
    try:
        signals = (signal.SIGINT, signal.SIGTERM)
        for s in signals:
            loop.add_signal_handler(s, lambda s=s: asyncio.create_task(shutdown(dp, bot)))
        logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGINT –∏ SIGTERM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except NotImplementedError:
        logging.warning("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.")

    try:
        logging.info(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ: {INSTALL_MODE.upper()}")
        await asyncio.to_thread(load_users)
        load_alerts_config()
        await refresh_user_names() # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await initial_reboot_check()
        await initial_restart_check()

        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–æ–≤
        ssh_log_file_to_monitor = None
        if os.path.exists("/var/log/secure"): ssh_log_file_to_monitor = "/var/log/secure"
        elif os.path.exists("/var/log/auth.log"): ssh_log_file_to_monitor = "/var/log/auth.log"
        f2b_log_file_to_monitor = "/var/log/fail2ban.log"

        if ssh_log_file_to_monitor:
            task_logins = asyncio.create_task(reliable_tail_log_monitor(ssh_log_file_to_monitor, "logins", parse_ssh_log_line), name="LoginsMonitor")
            background_tasks.add(task_logins)
        else: logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω –ª–æ–≥ SSH. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SSH (logins) –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
            
        task_bans = asyncio.create_task(reliable_tail_log_monitor(f2b_log_file_to_monitor, "bans", parse_f2b_log_line), name="BansMonitor")
        background_tasks.add(task_bans)
        task_traffic = asyncio.create_task(traffic_monitor(), name="TrafficMonitor")
        background_tasks.add(task_traffic)
        task_resources = asyncio.create_task(resource_monitor(), name="ResourceMonitor")
        background_tasks.add(task_resources)
        
        logging.info("Starting polling...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
        
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt/SystemExit –≤ –±–ª–æ–∫–µ try —Ñ—É–Ω–∫—Ü–∏–∏ main.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}", exc_info=True)
        
    finally:
        session_to_check = getattr(bot, 'session', None)
        underlying_session_to_check = getattr(session_to_check, 'session', None)
        session_closed_attr = getattr(underlying_session_to_check, 'closed', True)

        if not session_closed_attr:
             logging.warning("Polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∏–ª–∏ shutdown –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏...")
             await shutdown(dp, bot)
        
        logging.info("–§—É–Ω–∫—Ü–∏—è main –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    import signal
    try:
        logging.info("–ó–∞–ø—É—Å–∫ asyncio.run(main())...")
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt –≤ __main__).")
    except Exception as e:
        logging.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–Ω–µ —Ü–∏–∫–ª–∞ asyncio: {e}", exc_info=True)
    finally:
         logging.info("–°–∫—Ä–∏–ø—Ç bot.py –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")