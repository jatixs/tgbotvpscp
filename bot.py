# /opt/tg-bot/bot.py
import asyncio
import logging
import signal
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

# --- –ü–ï–†–ï–ö–õ–Æ–ß–ê–¢–ï–õ–ò –ú–û–î–£–õ–ï–ô ---
ENABLE_SELFTEST = True
ENABLE_TRAFFIC = True
ENABLE_UPTIME = True
ENABLE_NOTIFICATIONS = True
ENABLE_USERS = True
ENABLE_VLESS = True
ENABLE_SPEEDTEST = True
ENABLE_TOP = True
ENABLE_XRAY = True
ENABLE_SSHLOG = True
ENABLE_FAIL2BAN = True
ENABLE_LOGS = True
ENABLE_UPDATE = True
ENABLE_REBOOT = True
ENABLE_RESTART = True
# ------------------------------

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —è–¥—Ä–∞
from core import config, shared_state, auth, utils, keyboards, messaging

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from modules import (
    selftest, traffic, uptime, notifications, users, vless,
    speedtest, top, xray, sshlog, fail2ban, logs, update, reboot, restart
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
config.setup_logging()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–∞—Ä—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
buttons_map = {
    "user": [],
    "admin": [],
    "root": []
}
# –ù–∞–±–æ—Ä —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
background_tasks = set()

def register_module(module, admin_only=False, root_only=False):
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª—è."""
    try:
        # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
        module.register_handlers(dp)

        # 2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–Ω–æ–ø–∫–∏
        button_level = "user"
        if root_only:
            button_level = "root"
        elif admin_only:
            button_level = "admin"

        # 3. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞—Ä—Ç—É
        buttons_map[button_level].append(module.get_button())

        # 4. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if hasattr(module, 'start_background_tasks'):
            tasks = module.start_background_tasks(bot) # –û–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫
            for task in tasks:
                background_tasks.add(task)

        logging.info(f"–ú–æ–¥—É–ª—å '{module.__name__}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è '{module.__name__}': {e}", exc_info=True)


# --- (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ (Start/Menu) ---

async def show_main_menu(user_id: int, chat_id: int, state: FSMContext):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    command = "menu" # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∫–æ–º–∞–Ω–¥—É 'menu' –ø—Ä–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –≤—ã–∑–æ–≤–µ
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ
    if not auth.is_allowed(user_id, command):
        await auth.send_access_denied_message(bot, user_id, chat_id, command)
        return

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞—Ä—Ç–∞ –∫–Ω–æ–ø–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∞ –±–æ—Ç—É
    bot.buttons_map = buttons_map

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú
    await messaging.delete_previous_message(
        user_id,
        ["start", "menu", "manage_users", "reboot_confirm", "generate_vless",
         "adduser", "notifications_menu", "traffic", "get_id", "fall2ban",
         "sshlog", "logs", "restart", "selftest", "speedtest", "top",
         "update", "uptime", "updatexray"],
        chat_id,
        bot
    )

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if str(user_id) not in shared_state.USER_NAMES:
       await auth.refresh_user_names(bot) # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä bot

    # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
    menu_text = "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ. –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π /menu."
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.buttons_map, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    reply_markup = keyboards.get_main_reply_keyboard(user_id, bot.buttons_map)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    try:
        sent_message = await bot.send_message(
            chat_id,
            menu_text,
            reply_markup=reply_markup
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é
        shared_state.LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


@dp.message(Command("start", "menu"))
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é") # –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç ReplyKeyboard
async def start_or_menu_handler_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–û–õ–¨–ö–û –¥–ª—è –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (/start, /menu, –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é')."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await show_main_menu(user_id, chat_id, state)


@dp.callback_query(F.data == "back_to_menu") # –≠—Ç–æ—Ç callback –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç InlineKeyboard
async def back_to_menu_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'."""
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ù–ê–ñ–ê–í–®–ï–ì–û –∫–Ω–æ–ø–∫—É
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    try:
        await callback.message.delete()
    except TelegramBadRequest as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        if "message to delete not found" not in str(e).lower():
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ back_to_menu: {e}")

    # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú user_id
    await show_main_menu(user_id, chat_id, state)
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()

# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---


# --- [!!!] –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ú–û–î–£–õ–ï–ô ---
def load_modules():
    logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π...")

    # User
    if ENABLE_SELFTEST: register_module(selftest)
    if ENABLE_TRAFFIC: register_module(traffic)
    if ENABLE_UPTIME: register_module(uptime)
    if ENABLE_NOTIFICATIONS: register_module(notifications)

    # Admin
    if ENABLE_USERS: register_module(users, admin_only=True)
    if ENABLE_VLESS: register_module(vless, admin_only=True)
    if ENABLE_SPEEDTEST: register_module(speedtest, admin_only=True)
    if ENABLE_TOP: register_module(top, admin_only=True)
    if ENABLE_XRAY: register_module(xray, admin_only=True)

    # Root
    if ENABLE_SSHLOG: register_module(sshlog, root_only=True)
    if ENABLE_FAIL2BAN: register_module(fail2ban, root_only=True)
    if ENABLE_LOGS: register_module(logs, root_only=True)
    if ENABLE_UPDATE: register_module(update, root_only=True)
    if ENABLE_REBOOT: register_module(reboot, root_only=True)
    if ENABLE_RESTART: register_module(restart, root_only=True)

    logging.info("--- –ö–∞—Ä—Ç–∞ –∫–Ω–æ–ø–æ–∫ ---")
    logging.info(f"User: {[btn.text for btn in buttons_map['user']]}")
    logging.info(f"Admin: {[btn.text for btn in buttons_map['admin']]}")
    logging.info(f"Root: {[btn.text for btn in buttons_map['root']]}")
    logging.info("---------------------")


# --- –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
async def shutdown(dispatcher: Dispatcher, bot_instance: Bot):
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling...")
    try:
        await dispatcher.stop_polling()
        logging.info("Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ polling: {e}")

    logging.info("–ù–∞—á–∏–Ω–∞—é –æ—Ç–º–µ–Ω—É —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
    for task in list(background_tasks):
        if task and not task.done():
            task.cancel()

    logging.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)...")
    results = await asyncio.gather(*background_tasks, return_exceptions=True)
    background_tasks.clear()

    for i, result in enumerate(results):
         if isinstance(result, Exception) and not isinstance(result, asyncio.CancelledError):
             logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–∏–Ω–¥–µ–∫—Å {i}): {result}")
    logging.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

    session_to_close = getattr(bot_instance, 'session', None)
    underlying_session = getattr(session_to_close, 'session', None)

    if underlying_session and not underlying_session.closed:
        logging.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞...")
        await session_to_close.close()
        logging.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    elif session_to_close:
         logging.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ —É–∂–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞.")
    else:
         logging.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –Ω–µ –±—ã–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

async def main():
    loop = asyncio.get_event_loop()
    try:
        signals = (signal.SIGINT, signal.SIGTERM)
        for s in signals:
            loop.add_signal_handler(s, lambda s=s: asyncio.create_task(shutdown(dp, bot)))
        logging.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ SIGINT –∏ SIGTERM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
    except NotImplementedError:
        logging.warning("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

    try:
        logging.info(f"–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ: {config.INSTALL_MODE.upper()}")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤ (—Ç–µ–ø–µ—Ä—å —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ auth/utils)
        await asyncio.to_thread(auth.load_users)
        await asyncio.to_thread(utils.load_alerts_config)
        await auth.refresh_user_names(bot)

        # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–ø–µ—Ä–µ–¥–∞–µ–º bot)
        await utils.initial_reboot_check(bot)
        await utils.initial_restart_check(bot)

        # [!!!] –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏, —Ö—ç–Ω–¥–ª–µ—Ä—ã, –∫–Ω–æ–ø–∫–∏ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        load_modules()

        logging.info("Starting polling...")
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

    except (KeyboardInterrupt, SystemExit):
        logging.info("–ü–æ–ª—É—á–µ–Ω KeyboardInterrupt/SystemExit –≤ –±–ª–æ–∫–µ try —Ñ—É–Ω–∫—Ü–∏–∏ main.")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –±–æ—Ç–∞: {e}", exc_info=True)

    finally:
        session_to_check = getattr(bot, 'session', None)
        underlying_session_to_check = getattr(session_to_check, 'session', None)
        session_closed_attr = getattr(underlying_session_to_check, 'closed', True)

        if not session_closed_attr:
             logging.warning("Polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∏–ª–∏ shutdown –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏...")
             await shutdown(dp, bot)

        logging.info("–§—É–Ω–∫—Ü–∏—è main –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    try:
        logging.info("–ó–∞–ø—É—Å–∫ asyncio.run(main())...")
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt –≤ __main__).")
    except Exception as e:
        logging.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–Ω–µ —Ü–∏–∫–ª–∞ asyncio: {e}", exc_info=True)
    finally:
         logging.info("–°–∫—Ä–∏–ø—Ç bot.py –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")