import asyncio
import os
import psutil
import re
import json
import urllib.parse
import logging
import requests
import sys
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.exceptions import TelegramRetryAfter, TelegramBadRequest
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from datetime import datetime, timedelta
import qrcode
from PIL import Image
import io
from aiogram.types import BufferedInputFile

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
TOKEN = os.environ.get("TG_BOT_TOKEN")
try:
    ADMIN_USER_ID = int(os.environ.get("TG_ADMIN_ID"))
except (ValueError, TypeError):
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –≤—ã—Ö–æ–¥–∏–º.
    print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_ADMIN_ID –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    sys.exit(1)

if not TOKEN:
    print("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    sys.exit(1)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Ç–µ–ø–µ—Ä—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_DIR = os.path.join(BASE_DIR, "logs")
CONFIG_DIR = os.path.join(BASE_DIR, "config")
os.makedirs(LOG_DIR, exist_ok=True)
os.makedirs(CONFIG_DIR, exist_ok=True)

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –≤ –ø–∞–ø–∫–µ config
USERS_FILE = os.path.join(CONFIG_DIR, "users.json")
REBOOT_FLAG_FILE = os.path.join(CONFIG_DIR, "reboot_flag.txt")

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE = os.path.join(LOG_DIR, "bot.log")
logging.basicConfig(level=logging.INFO, filename=LOG_FILE, format='%(asctime)s - %(levelname)s - %(message)s', encoding='utf-8')
# –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(console_handler)

# –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã (–ø—É—Ç–∏ –∫ –Ω–∏–º –æ–±—ã—á–Ω–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã)
SSH_LOG_FILE = "/var/log/auth.log"
F2B_LOG_FILE = "/var/log/fail2ban.log"
SYSLOG_FILE = "/var/log/syslog"

# –ü—Ä–æ—á–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TRAFFIC_INTERVAL = 5
ALLOWED_USERS = {}
USER_NAMES = {}
TRAFFIC_PREV = {}
LAST_MESSAGE_IDS = {}
TRAFFIC_MESSAGE_IDS = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

def get_country_flag(ip: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –ø–æ IP-–∞–¥—Ä–µ—Å—É, –∏—Å–ø–æ–ª—å–∑—É—è –≤–Ω–µ—à–Ω–∏–π API.
    """
    if not ip or ip in ["localhost", "127.0.0.1", "::1"]:
        return "üè†"
    try:
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        response = requests.get(f"http://ip-api.com/json/{ip}?fields=countryCode", timeout=2)
        if response.status_code == 200:
            data = response.json()
            country_code = data.get("countryCode")
            if country_code:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –≤ —ç–º–æ–¥–∑–∏-—Ñ–ª–∞–≥
                flag = "".join(chr(ord(char) + 127397) for char in country_code.upper())
                return flag
    except requests.exceptions.RequestException as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞ –¥–ª—è IP {ip}: {e}")
        return "‚ùì"
    return "üåç"

def escape_html(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è HTML —Ä–∞–∑–º–µ—Ç–∫–∏ –≤ Telegram."""
    if text is None:
        return ""
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;').replace('"', '&quot;')

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∏–º–µ–Ω–∞."""
    global ALLOWED_USERS, USER_NAMES
    try:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ config —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(os.path.dirname(USERS_FILE), exist_ok=True)
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, "r", encoding='utf-8') as f:
                data = json.load(f)
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ID –≤ int –¥–ª—è ALLOWED_USERS
                ALLOWED_USERS = {int(user["id"]): user["group"] for user in data.get("allowed_users", [])}
                USER_NAMES = data.get("user_names", {})
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ ADMIN_USER_ID –≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if ADMIN_USER_ID not in ALLOWED_USERS:
            ALLOWED_USERS[ADMIN_USER_ID] = "–ê–¥–º–∏–Ω—ã"
            USER_NAMES[str(ADMIN_USER_ID)] = "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"
            save_users() # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –∞–¥–º–∏–Ω–∞
        
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –†–∞–∑—Ä–µ—à–µ–Ω–æ ID: {list(ALLOWED_USERS.keys())}")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}")
        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞
        ALLOWED_USERS = {ADMIN_USER_ID: "–ê–¥–º–∏–Ω—ã"}
        USER_NAMES = {str(ADMIN_USER_ID): "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"}
        save_users() # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

def save_users():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        user_names_to_save = {str(k): v for k, v in USER_NAMES.items()}
        data = {
            "allowed_users": [{"id": uid, "group": group} for uid, group in ALLOWED_USERS.items()],
            "user_names": user_names_to_save
        }
        os.makedirs(os.path.dirname(USERS_FILE), exist_ok=True)
        with open(USERS_FILE, "w", encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ 664, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —á–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å
        os.chmod(USERS_FILE, 0o664) 
        logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ users.json")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json: {e}")

class GenerateVlessStates(StatesGroup):
    waiting_for_file = State()
    waiting_for_name = State()

class ManageUsersStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_group = State()
    waiting_for_change_group = State()

def is_allowed(user_id, command=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –∏–º–µ–µ—Ç –ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–∞–Ω–¥–µ."""
    if user_id not in ALLOWED_USERS:
        return False
    
    # –í—Å–µ–≥–¥–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–¥–∞–∂–µ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤)
    allowed_for_all = ["start", "menu", "back_to_menu", "uptime", "traffic", "selftest", "get_id", "manage_users"]
    if command in allowed_for_all:
        return True
    
    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_commands = [
        "manage_users", "reboot_confirm", "generate_vless", "fall2ban", 
        "sshlog", "logs", "restart", "speedtest", "top", "update", "updatexray",
        "adduser" # –í–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å /adduser
    ]
    if command in admin_commands:
        return user_id == ADMIN_USER_ID or ALLOWED_USERS.get(user_id) == "–ê–¥–º–∏–Ω—ã"
        
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ callback, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤, 
    # –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —è–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –≤—ã—à–µ
    return user_id == ADMIN_USER_ID or ALLOWED_USERS.get(user_id) == "–ê–¥–º–∏–Ω—ã"

async def refresh_user_names():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É—è API Telegram."""
    needs_save = False
    for uid in list(ALLOWED_USERS.keys()):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, —É –∫–æ–≥–æ –Ω–µ—Ç –∏–º–µ–Ω–∏ –∏–ª–∏ —Å—Ç–æ–∏—Ç –∑–∞–≥–ª—É—à–∫–∞ "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"
        if str(uid) not in USER_NAMES or USER_NAMES.get(str(uid)) == "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω":
            try:
                chat = await bot.get_chat(uid)
                new_name = chat.first_name or chat.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å_{uid}"
                if USER_NAMES.get(str(uid)) != new_name:
                    USER_NAMES[str(uid)] = new_name
                    needs_save = True
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –¥–ª—è {uid}: {e}")
                USER_NAMES[str(uid)] = f"ID: {uid}" # –£—Å—Ç–∞–Ω–æ–≤–∏–º ID –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É

    if needs_save:
        save_users()

async def get_user_name(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID, –∏—Å–ø–æ–ª—å–∑—É—è API Telegram."""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≤ –∫—ç—à–µ
        cached_name = USER_NAMES.get(str(user_id))
        if cached_name and "Unknown" not in cached_name and "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω" not in cached_name:
            return cached_name
            
        chat = await bot.get_chat(user_id)
        name = chat.first_name or chat.username or f"Unknown_{user_id}"
        USER_NAMES[str(user_id)] = name
        save_users()
        return name
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–ª—è ID {user_id}: {e}")
        return f"Unknown_{user_id}"

async def send_access_denied_message(user_id, chat_id, command):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ."""
    await delete_previous_message(user_id, command, chat_id)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º t.me/bot_username?start=... —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å User ID 
    # –ù–æ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
    admin_link = f"https://t.me/user?id={ADMIN_USER_ID}&text=–ú–æ–π ID –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: {user_id}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", url=admin_link)]
    ])
    sent_message = await bot.send_message(
        chat_id,
        f"‚õî –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞. –í–∞—à ID: **`{user_id}`**.\n"
        "–ö –∫–æ–º–∞–Ω–¥–∞–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

def get_main_reply_keyboard(user_id):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."""
    is_admin = user_id == ADMIN_USER_ID or ALLOWED_USERS.get(user_id) == "–ê–¥–º–∏–Ω—ã"
    
    if is_admin:
        buttons = [
            [KeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üîó VLESS-—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton(text="üõ† –°–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"), KeyboardButton(text="üì° –¢—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏")],
            [KeyboardButton(text="üî• –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"), KeyboardButton(text="üìú SSH-–ª–æ–≥")],
            [KeyboardButton(text="üîí Fail2Ban Log"), KeyboardButton(text="üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")],
            [KeyboardButton(text="üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏"), KeyboardButton(text="‚è± –ê–ø—Ç–∞–π–º")],
            [KeyboardButton(text="üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPS"), KeyboardButton(text="ü©ª –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ X-ray")],
            [KeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"), KeyboardButton(text="‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")]
        ]
    else:
        buttons = [
            [KeyboardButton(text="üõ† –°–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ"), KeyboardButton(text="üì° –¢—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏")],
            [KeyboardButton(text="‚è± –ê–ø—Ç–∞–π–º"), KeyboardButton(text="üÜî –ú–æ–π ID")]
        ]
    keyboard = ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é...")
    return keyboard

def get_manage_users_keyboard():
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def get_delete_users_keyboard(current_user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    buttons = []
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    sorted_users = sorted(ALLOWED_USERS.items(), key=lambda item: USER_NAMES.get(str(item[0]), "–Ø"), reverse=False)
    
    for uid, group in sorted_users:
        if uid == ADMIN_USER_ID:
            continue
        user_name = USER_NAMES.get(str(uid), f"ID: {uid}")
        
        button_text = f"{user_name} ({group})"
        callback_data = f"delete_user_{uid}"
        
        if uid == current_user_id:
            button_text = f"‚ùå –£–¥–∞–ª–∏—Ç—å —Å–µ–±—è ({user_name}, {group})"
            callback_data = f"request_self_delete_{uid}"
            
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_users")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_change_group_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
    buttons = []
    sorted_users = sorted(ALLOWED_USERS.items(), key=lambda item: USER_NAMES.get(str(item[0]), "–Ø"), reverse=False)
    
    for uid, group in sorted_users:
        if uid == ADMIN_USER_ID:
            continue
        user_name = USER_NAMES.get(str(uid), f"ID: {uid}")
        buttons.append([InlineKeyboardButton(text=f"{user_name} ({group})", callback_data=f"select_user_change_group_{uid}")])
        
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_users")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_group_selection_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã (–ê–¥–º–∏–Ω—ã/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω—ã", callback_data=f"set_group_{user_id}_–ê–¥–º–∏–Ω—ã"),
            InlineKeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=f"set_group_{user_id}_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        ],
        [
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_manage_users")
        ]
    ])
    return keyboard

def get_self_delete_confirmation_keyboard(user_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–∞–º–æ—É–¥–∞–ª–µ–Ω–∏—è."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_self_delete_{user_id}"),
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_delete_users")
        ]
    ])
    return keyboard

def get_reboot_confirmation_keyboard():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reboot"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def get_back_keyboard(callback_data="back_to_manage_users"):
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–π."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)
        ]
    ])
    return keyboard

def convert_json_to_vless(json_data, custom_name):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Xray –≤ VLESS-—Å—Å—ã–ª–∫—É —Å Reality."""
    try:
        config = json.loads(json_data)
        outbound = config['outbounds'][0]
        vnext = outbound['settings']['vnext'][0]
        user = vnext['users'][0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ realitySettings
        if 'realitySettings' not in outbound['streamSettings']:
             raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç realitySettings –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ streamSettings.")
             
        reality = outbound['streamSettings']['realitySettings']

        vless_params = {
            'id': user['id'],
            'address': vnext['address'],
            'port': vnext['port'],
            'security': outbound['streamSettings']['security'],
            'host': reality.get('serverName', 'none'),
            'fp': reality.get('fingerprint', 'none'),
            'pbk': reality.get('publicKey', 'none'),
            'sid': reality.get('shortId', 'none'),
            'type': outbound['streamSettings']['network'],
            'flow': user.get('flow', 'none'),
            'encryption': user.get('encryption', 'none'),
            'headerType': 'none'
        }
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL –¥–ª—è Reality (xtls-rprx-vision/tls)
        query_params = {
            'security': vless_params['security'],
            'encryption': vless_params['encryption'],
            'pbk': vless_params['pbk'],
            'fp': vless_params['fp'],
            'type': vless_params['type'],
        }

        if vless_params['flow'] != 'none' and vless_params['flow']:
             query_params['flow'] = vless_params['flow']
        
        if vless_params['type'] == 'grpc':
            # –î–æ–±–∞–≤–ª—è–µ–º gRPC-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            query_params['serviceName'] = outbound['streamSettings'].get('grpcSettings', {}).get('serviceName', '')
            query_params['mode'] = outbound['streamSettings'].get('grpcSettings', {}).get('mode', '')
            
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Reality
        query_params['sni'] = vless_params['host']
        query_params['host'] = vless_params['host'] # –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        query_params['sid'] = vless_params['sid']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É –∑–∞–ø—Ä–æ—Å–∞
        query_string = urllib.parse.urlencode({k: v for k, v in query_params.items() if v and v != 'none'}, quote_via=urllib.parse.quote)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ VLESS-—Å—Å—ã–ª–∫–∏
        vless_url = (f"vless://{vless_params['id']}@{vless_params['address']}:{vless_params['port']}?"
                     f"{query_string}"
                     f"#{urllib.parse.quote(custom_name)}")

        return vless_url
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS-—Å—Å—ã–ª–∫–∏: {e}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS-—Å—Å—ã–ª–∫–∏: {str(e)}"

def format_traffic(bytes_value):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –≤ –ú–ë, –ì–ë, –¢–ë, –ü–ë."""
    units = ["–ë", "–ö–ë", "–ú–ë", "–ì–ë", "–¢–ë", "–ü–ë"]
    value = float(bytes_value)
    unit_index = 0

    while value >= 1024 and unit_index < len(units) - 1:
        value /= 1024
        unit_index += 1

    return f"{value:.2f} {units[unit_index]}"

def format_uptime(seconds):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–∞–ø—Ç–∞–π–º) –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥."""
    seconds = int(seconds)
    years = seconds // (365 * 24 * 3600)
    remaining = seconds % (365 * 24 * 3600)
    days = remaining // (24 * 3600)
    remaining %= (24 * 3600)
    hours = remaining // 3600
    remaining %= 3600
    mins = remaining // 60
    secs = remaining % 60

    parts = []
    if years > 0:
        parts.append(f"{years}–≥")
    if days > 0:
        parts.append(f"{days}–¥")
    if hours > 0:
        parts.append(f"{hours}—á")
    if mins > 0:
        parts.append(f"{mins}–º")
    if seconds < 60 or not parts: # –î–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∞–ø—Ç–∞–π–º–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
         parts.append(f"{secs}—Å")
         
    return " ".join(parts) if parts else "0—Å"

async def delete_previous_message(user_id: int, command, chat_id: int):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å —á–∞—Ç."""
    # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É
    if command != "traffic" and user_id in TRAFFIC_MESSAGE_IDS:
        del TRAFFIC_MESSAGE_IDS[user_id]
        
    cmds_to_delete = [command] if not isinstance(command, list) else command
    
    for cmd in cmds_to_delete:
        try:
            if user_id in LAST_MESSAGE_IDS and cmd in LAST_MESSAGE_IDS[user_id]:
                msg_id = LAST_MESSAGE_IDS[user_id].pop(cmd)
                await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except TelegramBadRequest as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ "message to delete not found"
            if "message to delete not found" not in str(e):
                 logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}/{cmd}: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {user_id}/{cmd}: {e}")


# --- START AND MENU HANDLERS ---
@dp.message(Command("start", "menu"))
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def start_or_menu_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /menu –∏ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "start" if message.text == "/start" else "menu"
    
    await state.clear() # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é
    
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
        
    await delete_previous_message(user_id, ["start", "menu", "manage_users", "reboot_confirm", "generate_vless", "adduser"], chat_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    if str(user_id) not in USER_NAMES:
         await refresh_user_names()
         
    sent_message = await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ. –ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π /menu.",
        reply_markup=get_main_reply_keyboard(user_id)
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    
# --- TEXT-BASED MENU HANDLERS ---

@dp.message(F.text == "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def manage_users_handler(message: types.Message):
    user_id = message.from_user.id
    command = "manage_users"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, message.chat.id, command)
        return
    await delete_previous_message(user_id, command, message.chat.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    user_list = "\n".join([
        f" ‚Ä¢ {USER_NAMES.get(str(uid), f'ID: {uid}')} (**{group}**)" 
        for uid, group in ALLOWED_USERS.items()
    ])
    
    sent_message = await message.answer(
        f"üë§ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏**:\n\n{user_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=get_manage_users_keyboard(), 
        parse_mode="Markdown"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

# --- HANDLERS FOR ADMIN COMMANDS (TEXT BUTTONS) ---
@dp.message(F.text == "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
async def reboot_confirm_handler(message: types.Message):
    user_id = message.from_user.id
    command = "reboot_confirm"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, message.chat.id, command)
        return
    await delete_previous_message(user_id, command, message.chat.id)
    sent_message = await message.answer("‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ **–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä**? –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω—ã.", reply_markup=get_reboot_confirmation_keyboard(), parse_mode="Markdown")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(F.text == "üîó VLESS-—Å—Å—ã–ª–∫–∞")
async def generate_vless_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    command = "generate_vless"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, message.chat.id, command)
        return
    await delete_previous_message(user_id, command, message.chat.id)
    sent_message = await message.answer("üì§ **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Xray (JSON)**\n\n_–í–∞–∂–Ω–æ: —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–±–æ—á—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é outbound —Å Reality._", reply_markup=get_back_keyboard("back_generate_vless"), parse_mode="Markdown")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    await state.set_state(GenerateVlessStates.waiting_for_file)
    
@dp.message(F.text == "üîí Fail2Ban Log")
async def text_fall2ban_handler(message: types.Message):
    await fall2ban_handler(message)

@dp.message(F.text == "üìú SSH-–ª–æ–≥")
async def text_sshlog_handler(message: types.Message):
    await sshlog_handler(message)

@dp.message(F.text == "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è")
async def text_logs_handler(message: types.Message):
    await logs_handler(message)

@dp.message(F.text == "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞")
async def text_restart_handler(message: types.Message):
    await restart_handler(message)

@dp.message(F.text == "üõ† –°–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
async def text_selftest_handler(message: types.Message):
    await selftest_handler(message)

@dp.message(F.text == "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏")
async def text_speedtest_handler(message: types.Message):
    await speedtest_handler(message)

@dp.message(F.text == "üî• –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
async def text_top_handler(message: types.Message):
    await top_handler(message)

@dp.message(F.text == "üì° –¢—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏")
async def text_traffic_handler(message: types.Message):
    await traffic_handler(message)

@dp.message(F.text == "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPS")
async def text_update_handler(message: types.Message):
    await update_handler(message)

@dp.message(F.text == "‚è± –ê–ø—Ç–∞–π–º")
async def text_uptime_handler(message: types.Message):
    await uptime_handler(message)

@dp.message(F.text == "ü©ª –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ X-ray")
async def text_updatexray_handler(message: types.Message):
    await updatexray_handler(message)
    
@dp.message(F.text == "üÜî –ú–æ–π ID")
async def get_id_handler(message: types.Message):
    user_id = message.from_user.id
    command = "get_id"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, message.chat.id, command)
        return
    await delete_previous_message(user_id, command, message.chat.id)
    group = ALLOWED_USERS.get(user_id, '–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
    sent_message = await message.answer(f"üÜî –í–∞—à ID: **`{user_id}`**\n–ì—Ä—É–ø–ø–∞: **{group}**", parse_mode="Markdown")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id


# --- CALLBACK (INLINE BUTTONS) HANDLER ---
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()

    command = callback.data
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    if command.startswith("delete_user_") or command.startswith("set_group_") or command.startswith("select_user_change_group_"):
         permission_check_command = "manage_users"
    elif command.startswith("request_self_delete_") or command.startswith("confirm_self_delete_") or command == "back_to_delete_users":
         permission_check_command = "manage_users"
    elif command in ["reboot", "back_generate_vless"]:
         permission_check_command = command
    else:
         permission_check_command = command

    if not is_allowed(user_id, permission_check_command):
        if user_id not in ALLOWED_USERS:
            await send_access_denied_message(user_id, chat_id, command)
        else:
            await callback.message.answer(f"‚õî –ö–æ–º–∞–Ω–¥–∞ '{command}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã ({ALLOWED_USERS[user_id]}).")
        return

    try:
        # --- User Management Callbacks ---
        if command == "add_user":
            await delete_previous_message(user_id, "manage_users", chat_id)
            sent_message = await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ Alias –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `@username`):", reply_markup=get_back_keyboard("back_to_manage_users"), parse_mode="Markdown")
            LAST_MESSAGE_IDS.setdefault(user_id, {})["add_user"] = sent_message.message_id
            await state.set_state(ManageUsersStates.waiting_for_user_id)
        
        elif command == "delete_user":
            await callback.message.edit_text("‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_delete_users_keyboard(user_id))
        
        elif command == "change_group":
            await callback.message.edit_text("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:", reply_markup=get_change_group_keyboard())
        
        elif command.startswith("select_user_change_group_"):
            target_user_id = int(command.split("_")[4])
            if target_user_id not in ALLOWED_USERS:
                await callback.message.edit_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID **`{target_user_id}`** –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_keyboard("back_to_manage_users"), parse_mode="Markdown")
            else:
                user_name = USER_NAMES.get(str(target_user_id), f"ID: {target_user_id}")
                await callback.message.edit_text(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{user_name}**\n–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: **{ALLOWED_USERS[target_user_id]}**\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:", reply_markup=get_group_selection_keyboard(target_user_id), parse_mode="Markdown")
        
        elif command.startswith("set_group_"):
            parts = command.split("_")
            target_user_id = int(parts[2])
            new_group = parts[3]
            if target_user_id == ADMIN_USER_ID:
                await callback.message.edit_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_back_keyboard("back_to_manage_users"))
            elif target_user_id not in ALLOWED_USERS:
                await callback.message.edit_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID **`{target_user_id}`** –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_keyboard("back_to_manage_users"), parse_mode="Markdown")
            else:
                user_name = USER_NAMES.get(str(target_user_id), f"ID: {target_user_id}")
                ALLOWED_USERS[target_user_id] = new_group
                save_users()
                await callback.message.edit_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **{user_name}** –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ **{new_group}**", reply_markup=get_back_keyboard("back_to_manage_users"), parse_mode="Markdown")
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
                os.system(f"sudo systemctl restart tg-bot.service")

        elif command == "back_to_manage_users":
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await bot.delete_message(chat_id, message_id)
            await manage_users_handler(callback.message)
            
        elif command == "back_to_delete_users":
            await callback.message.edit_text("‚ûñ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_delete_users_keyboard(user_id))
            
        elif command.startswith("request_self_delete_"):
            target_user_id = int(command.split("_")[3])
            if target_user_id != user_id:
                await callback.message.edit_text("‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–≥–æ ID", reply_markup=get_back_keyboard("back_to_delete_users"))
            else:
                await callback.message.edit_text("‚ö†Ô∏è –¢—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–∑ –±–æ—Ç–∞? –î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ, —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É", reply_markup=get_self_delete_confirmation_keyboard(user_id))
        
        elif command.startswith("confirm_self_delete_"):
            target_user_id = int(command.split("_")[3])
            if target_user_id != user_id:
                await callback.message.edit_text("‚ö†Ô∏è –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ–≥–æ ID", reply_markup=get_back_keyboard("back_to_delete_users"))
            elif target_user_id == ADMIN_USER_ID:
                await callback.message.edit_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_back_keyboard("back_to_manage_users"))
            else:
                user_name = USER_NAMES.get(str(target_user_id), f"ID: {target_user_id}")
                if target_user_id in ALLOWED_USERS:
                    del ALLOWED_USERS[target_user_id]
                    USER_NAMES.pop(str(target_user_id), None)
                    save_users()
                    await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_name}** —É–¥–∞–ª—ë–Ω. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É.", parse_mode="Markdown")
                    os.system(f"sudo systemctl restart tg-bot.service")
                else:
                    await callback.message.edit_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID **`{target_user_id}`** —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.", reply_markup=get_back_keyboard("back_to_manage_users"), parse_mode="Markdown")
        
        elif command.startswith("delete_user_"):
            target_user_id = int(command.split("_")[2])
            if target_user_id == ADMIN_USER_ID:
                await callback.message.edit_text("‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=get_back_keyboard("back_to_manage_users"))
            elif target_user_id in ALLOWED_USERS:
                user_name = USER_NAMES.get(str(target_user_id), f"ID: {target_user_id}")
                del ALLOWED_USERS[target_user_id]
                USER_NAMES.pop(str(target_user_id), None)
                save_users()
                await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_name}** —É–¥–∞–ª—ë–Ω", reply_markup=get_back_keyboard("back_to_manage_users"), parse_mode="Markdown")
                os.system(f"sudo systemctl restart tg-bot.service")
            else:
                await callback.message.edit_text(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID **`{target_user_id}`** –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=get_back_keyboard("back_to_manage_users"), parse_mode="Markdown")
        
        # --- Other Callbacks ---
        elif command == "reboot":
             await reboot_handler(callback)
             
        elif command == "back_generate_vless":
            await state.clear()
            await callback.message.edit_text("üîó VLESS-—Å—Å—ã–ª–∫–∞", reply_markup=None)
            
        elif command == "back_to_menu":
             await callback.message.delete()
             sent_message = await bot.send_message(
                 chat_id=chat_id,
                 text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                 reply_markup=get_main_reply_keyboard(user_id)
             )
             LAST_MESSAGE_IDS.setdefault(user_id, {})["menu"] = sent_message.message_id
        
        else:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è –∫–æ–ª–±—ç–∫–æ–≤
            pass
            
    except TelegramRetryAfter as e:
        logging.error(f"TelegramRetryAfter –≤ callback_handler: {e.retry_after} —Å–µ–∫—É–Ω–¥")
        await callback.message.answer(f"‚ö†Ô∏è Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
    except TelegramBadRequest as e:
        # –ß–∞—Å—Ç–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —É–∂–µ —É–¥–∞–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.warning(f"TelegramBadRequest –≤ callback_handler: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_handler: {e}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å
        await bot.send_message(chat_id, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")


@dp.message(Command("adduser"))
async def adduser_command_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /adduser."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "adduser"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    sent_message = await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ Alias –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `@username`):",
        reply_markup=get_back_keyboard("back_to_manage_users"),
        parse_mode="Markdown"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    await state.set_state(ManageUsersStates.waiting_for_user_id)

@dp.message(StateFilter(ManageUsersStates.waiting_for_user_id))
async def handle_user_id(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∏–ª–∏ Alias –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "adduser"
    
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        await state.clear()
        return

    input_text = message.text.strip()
    target_user_id = None
    user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Alias (@username)
        if input_text.startswith("@"):
            if not re.match(r'^@[\w_]{5,}$', input_text): 
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∏–∫–Ω–µ–π–º–∞.")
            
            chat = await bot.get_chat(input_text)
            target_user_id = chat.id
            user_name = chat.first_name or chat.username or f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_{target_user_id}"
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ User ID (—á–∏—Å–ª–æ)
        else:
            try:
                target_user_id = int(input_text)
                user_name = await get_user_name(target_user_id)
            except ValueError:
                raise ValueError("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ) –∏–ª–∏ Alias (@username).")

        if target_user_id in ALLOWED_USERS:
            await state.clear()
            await delete_previous_message(user_id, command, chat_id)
            sent_message = await message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_name}** (ID: **`{target_user_id}`**) —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö.",
                reply_markup=get_back_keyboard("back_to_manage_users"),
                parse_mode="Markdown"
            )
            LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
            return

        # –í—Ä–µ–º–µ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
        ALLOWED_USERS[target_user_id] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        USER_NAMES[str(target_user_id)] = user_name
        save_users() # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        await state.update_data(target_user_id=target_user_id, user_name=user_name)
        await delete_previous_message(user_id, command, chat_id)
        
        sent_message = await message.answer(
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{user_name}** (ID: **`{target_user_id}`**)\n–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
            reply_markup=get_group_selection_keyboard(target_user_id),
            parse_mode="Markdown"
        )
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
        await state.set_state(ManageUsersStates.waiting_for_group)
        
    except (TelegramBadRequest, ValueError) as e:
        error_text = str(e)
        if "Bad Request: chat not found" in error_text or "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" in error_text:
             error_text = (
                 f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{input_text}`.**\n\n"
                 "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                 "1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–∞–∫—Ä—ã–ª –ª–∏—á–∫—É.\n"
                 "2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω **—Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start**.\n\n"
                 "üí° **–†–µ—à–µ–Ω–∏–µ:** –î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ **User ID** (—á–∏—Å–ª–æ) –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å /start."
             )
        else:
            error_text = f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {escape_html(str(e))}"

        await delete_previous_message(user_id, command, chat_id)
        sent_message = await message.answer(
            error_text,
            parse_mode="Markdown",
            reply_markup=get_back_keyboard("back_to_manage_users")
        )
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
        await state.clear()
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await delete_previous_message(user_id, command, chat_id)
        sent_message = await message.answer(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {escape_html(str(e))}",
            reply_markup=get_back_keyboard("back_to_manage_users"),
            parse_mode="HTML"
        )
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
        await state.clear()


@dp.callback_query(StateFilter(ManageUsersStates.waiting_for_group))
async def handle_group_selection_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É."""
    await callback.answer()
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    command = "adduser"
    
    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤ –æ–±—â–µ–º callback_handler, –Ω–æ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –µ—â–µ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        await state.clear()
        return

    data = await state.get_data()
    target_user_id = data.get("target_user_id")
    user_name = data.get("user_name")

    if callback.data.startswith("set_group_"):
        parts = callback.data.split("_")
        selected_id = int(parts[2])
        new_group = parts[3]
        
        if selected_id != target_user_id:
             # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ö–æ–¥–µ, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
            await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_back_keyboard("back_to_manage_users"))
            await state.clear()
            return
            
        ALLOWED_USERS[target_user_id] = new_group
        save_users()
        await state.clear()
        
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{user_name}** (ID: **`{target_user_id}`**) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É **{new_group}**",
            reply_markup=get_back_keyboard("back_to_manage_users"),
            parse_mode="Markdown"
        )
        os.system(f"sudo systemctl restart tg-bot.service")
        
    elif callback.data == "back_to_manage_users":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await state.clear()
        await callback.message.edit_text(
             "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
             reply_markup=get_manage_users_keyboard()
        )


# --- ACTION HANDLERS (CALLED BY TEXT OR COMMANDS) ---
# ... (–û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ uptime, update, restart, reboot_handler, updatexray, traffic_handler, selftest, speedtest, top_handler, logs_handler, fall2ban_handler, sshlog_handler, handle_vless_file, handle_vless_name)
# –Ø —Å–∫–æ–ø–∏—Ä—É—é –∏—Ö –Ω–∏–∂–µ, –Ω–æ –Ω–µ –±—É–¥—É –∏—Ö –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –æ–±—ä–µ–º —Ñ–∞–π–ª–∞

@dp.message(Command("uptime"))
async def uptime_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "uptime"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    try:
        with open("/proc/uptime") as f:
            uptime_sec = float(f.readline().split()[0])
        uptime_str = format_uptime(uptime_sec)
        sent_message = await message.answer(f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: **{uptime_str}**", parse_mode="Markdown")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    except Exception as e:
         logging.error(f"–û—à–∏–±–∫–∞ –≤ uptime_handler: {e}")
         sent_message = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ø—Ç–∞–π–º–∞: {str(e)}")
         LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(Command("update"))
async def update_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "update"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    sent_message = await message.answer("üîÑ –í—ã–ø–æ–ª–Ω—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPS... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º nohup –∏ & –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, 
    # –∞ –∑–∞—Ç–µ–º —Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–µ–Ω)
    cmd = "sudo DEBIAN_FRONTEND=noninteractive apt update && sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y && sudo apt autoremove -y"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞
    temp_output_file = f"/tmp/update_output_{user_id}_{datetime.now().timestamp()}.txt"

    process = await asyncio.create_subprocess_shell(
        cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()

    output = stdout.decode('utf-8', errors='ignore')
    error_output = stderr.decode('utf-8', errors='ignore')

    await delete_previous_message(user_id, command, chat_id)
    
    if process.returncode == 0:
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç Telegram
        response_text = f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n<pre>{escape_html(output[-4000:])}</pre>"
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–ö–æ–¥: {process.returncode}):\n<pre>{escape_html(error_output[-4000:])}</pre>"

    sent_message = await message.answer(response_text, parse_mode="HTML")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        if os.path.exists(temp_output_file):
             os.remove(temp_output_file)
    except Exception as e:
         logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {temp_output_file}: {e}")

@dp.message(Command("restart"))
async def restart_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "restart"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    
    sent_msg = await message.answer("‚ôªÔ∏è –ë–æ—Ç —É—à–µ–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è... –û–∂–∏–¥–∞–π—Ç–µ.")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_msg.message_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ systemd –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É–∂–±—É
    try:
        # –î–∞–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã Telegram –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        await asyncio.sleep(2) 
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —á–µ—Ä–µ–∑ systemctl
        os.system("sudo systemctl restart tg-bot.service") 
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        await bot.edit_message_text(
            text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}",
            chat_id=chat_id,
            message_id=sent_msg.message_id
        )

async def reboot_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    command = "reboot"

    if is_allowed(user_id, command):
        try:
            await bot.edit_message_text(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. **–ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É VPS**...",
                chat_id=chat_id, 
                message_id=message_id, 
                parse_mode="Markdown"
            )
        except TelegramBadRequest:
            pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ/—É–¥–∞–ª–µ–Ω–æ

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –µ–º—É –ø—Ä–∏—à–ª–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            with open(REBOOT_FLAG_FILE, "w") as f:
                f.write(str(user_id))
        except Exception as e:
             logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
             
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
        os.system("sudo reboot")
    else:
        await bot.edit_message_text(
            "‚õî –û—Ç–∫–∞–∑–∞–Ω–æ. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.",
            chat_id=chat_id,
            message_id=message_id
        )

@dp.message(Command("updatexray"))
async def updatexray_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "updatexray"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    sent_msg = await message.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Xray –Ω–∞—á–∞—Ç–æ... –û–∂–∏–¥–∞–π—Ç–µ.")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_msg.message_id

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä amnezia-xray
        check_container_cmd = "docker ps --filter name=amnezia-xray --format '{{.Names}}'"
        process_check = await asyncio.create_subprocess_shell(
            check_container_cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )
        stdout_check, _ = await process_check.communicate()
        container_check = stdout_check.decode().strip()

        if "amnezia-xray" not in container_check:
            raise Exception("–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä `amnezia-xray` –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")

        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Xray –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º wget, unzip)
        update_cmd = (
            'docker exec amnezia-xray /bin/bash -c "'
            'export XRAY_VERSION=$(curl -s "https://api.github.com/repos/XTLS/Xray-core/releases/latest" | grep -Po \'"tag_name": "\K[vV]?([0-9.]+)"\') && '
            'echo "–ù–∞–π–¥–µ–Ω–∞ –≤–µ—Ä—Å–∏—è $XRAY_VERSION" && '
            'rm -f Xray-linux-64.zip xray && '
            'wget -q -O Xray-linux-64.zip https://github.com/XTLS/Xray-core/releases/download/$XRAY_VERSION/Xray-linux-64.zip && '
            'unzip -o Xray-linux-64.zip && '
            'cp xray /usr/bin/xray && '
            'rm Xray-linux-64.zip xray" && '
            'docker restart amnezia-xray'
        )
        
        process_update = await asyncio.create_subprocess_shell(
            update_cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ —Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Å—å –≤—ã–≤–æ–¥
        stdout_update, stderr_update = await process_update.communicate()
        update_output = stdout_update.decode()
        update_error = stderr_update.decode()

        if process_update.returncode != 0:
            raise Exception(f"–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {update_error[-500:]}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        version_cmd = "docker exec amnezia-xray /usr/bin/xray version"
        process_version = await asyncio.create_subprocess_shell(
            version_cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )
        stdout_version, stderr_version = await process_version.communicate()

        if process_version.returncode != 0:
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é Xray –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {stderr_version.decode()[-500:]}")

        version_output = stdout_version.decode()
        version_match = re.search(r'Xray\s+([\d\.]+)', version_output)
        version = version_match.group(1) if version_match else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏"

        await delete_previous_message(user_id, command, chat_id)
        sent_msg = await message.answer(f"‚úÖ –í–∞—à–∞ –≤–µ—Ä—Å–∏—è Xray –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ **`{version}`**", parse_mode="Markdown")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_msg.message_id

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ updatexray_handler: {e}")
        error_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Xray: {escape_html(str(e))}"
        await delete_previous_message(user_id, command, chat_id)
        sent_msg = await message.answer(error_msg, parse_mode="HTML")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_msg.message_id

@dp.message(Command("traffic"))
async def traffic_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "traffic"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
    counters = psutil.net_io_counters()
    TRAFFIC_PREV[user_id] = (counters.bytes_recv, counters.bytes_sent)
    
    msg_text = ("üì° **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞ –≤–∫–ª—é—á–µ–Ω**...\n\n_–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥. –ß—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É._")
    sent_message = await message.answer(msg_text, parse_mode="Markdown")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
    TRAFFIC_MESSAGE_IDS[user_id] = sent_message.message_id
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    # –ó–∞–ø—É—Å–∫–∞—Ç—å traffic_monitor —É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∑–∞–ø—É—â–µ–Ω –≤ main()
    # –¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, ID –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤ TRAFFIC_MESSAGE_IDS

async def traffic_monitor():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç—Ä–∞—Ñ–∏–∫–µ."""
    await asyncio.sleep(5) # –ñ–¥–µ–º, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
    while True:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        for user_id in list(TRAFFIC_MESSAGE_IDS.keys()): 
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω
            if user_id not in TRAFFIC_MESSAGE_IDS:
                 continue
                 
            try:
                counters = psutil.net_io_counters()
                rx = counters.bytes_recv
                tx = counters.bytes_sent
                
                # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                prev_rx, prev_tx = TRAFFIC_PREV.get(user_id, (rx, tx))
                
                # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –ú–±–∏—Ç/—Å (–±–∏—Ç / 1024^2 / 5 —Å–µ–∫—É–Ω–¥)
                rx_speed = (rx - prev_rx) * 8 / 1024 / 1024 / TRAFFIC_INTERVAL
                tx_speed = (tx - prev_tx) * 8 / 1024 / 1024 / TRAFFIC_INTERVAL
                
                TRAFFIC_PREV[user_id] = (rx, tx)
                
                msg_text = (
                    f"üì° **–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫ VPS:**\n"
                    f"‚¨áÔ∏è RX (–ü—Ä–∏–Ω—è—Ç–æ): **{format_traffic(rx)}**\n"
                    f"‚¨ÜÔ∏è TX (–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ): **{format_traffic(tx)}**\n\n"
                    f"‚ö°Ô∏è **–¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ {TRAFFIC_INTERVAL}—Å):**\n"
                    f"‚¨áÔ∏è RX: **{rx_speed:.2f} –ú–±–∏—Ç/—Å**\n"
                    f"‚¨ÜÔ∏è TX: **{tx_speed:.2f} –ú–±–∏—Ç/—Å**"
                )
                
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=TRAFFIC_MESSAGE_IDS[user_id],
                    text=msg_text,
                    parse_mode="Markdown"
                )
            except TelegramRetryAfter as e:
                logging.warning(f"–û—à–∏–±–∫–∞ TelegramRetryAfter –¥–ª—è {user_id}: –ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.retry_after} —Å–µ–∫—É–Ω–¥")
                await asyncio.sleep(e.retry_after)
            except TelegramBadRequest as e:
                # –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
                if "message is not modified" in str(e):
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                    pass 
                elif user_id in TRAFFIC_MESSAGE_IDS:
                    logging.warning(f"–û—à–∏–±–∫–∞ TelegramBadRequest (—É–¥–∞–ª–µ–Ω–∏–µ) –¥–ª—è {user_id}: {e}")
                    del TRAFFIC_MESSAGE_IDS[user_id]
            except Exception as e:
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ-—Ç—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {user_id}: {e}")
                if user_id in TRAFFIC_MESSAGE_IDS:
                    del TRAFFIC_MESSAGE_IDS[user_id]

        await asyncio.sleep(TRAFFIC_INTERVAL)

@dp.message(Command("selftest"))
async def selftest_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "selftest"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
    cpu = psutil.cpu_percent()
    mem = psutil.virtual_memory().percent
    disk = psutil.disk_usage('/').percent
    with open("/proc/uptime") as f:
        uptime_sec = float(f.readline().split()[0])
    uptime_str = format_uptime(uptime_sec)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏–Ω–≥–∞ –∏ –≤–Ω–µ—à–Ω–µ–≥–æ IP
    ping_result = os.popen("ping -c 1 -W 2 8.8.8.8").read()
    ping_match = re.search(r'time=([\d\.]+) ms', ping_result)
    ping_time = ping_match.group(1) if ping_match else "N/A"
    internet = "‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω" if ping_match else "‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"
    external_ip = os.popen("curl -4 -s ifconfig.me").read().strip()
    
    # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ SSH –≤—Ö–æ–¥–∞
    last_login = "**N/A** (–ù–µ—Ç —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤)"
    if os.path.exists(SSH_LOG_FILE):
        try:
            cmd = f"sudo tail -n 50 {SSH_LOG_FILE} | grep 'Accepted' | tail -n 1"
            process = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
            stdout, _ = await process.communicate()
            last_line = stdout.decode('utf-8', errors='ignore').strip()
            
            if last_line:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞
                date_match = re.search(r'(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})', last_line)
                user_match = re.search(r'for (\S+)', last_line)
                ip_match = re.search(r'from (\S+)', last_line)

                if date_match and user_match and ip_match:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤)
                    log_timestamp = datetime.strptime(date_match.group(1), '%b %d %H:%M:%S')
                    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—É—â–∏–π –≥–æ–¥
                    current_year = datetime.now().year
                    dt_object = log_timestamp.replace(year=current_year)
                    
                    user = user_match.group(1)
                    ip = ip_match.group(1)
                    flag = get_country_flag(ip)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—à–ª–æ–º –≥–æ–¥—É
                    if dt_object > datetime.now():
                         dt_object = dt_object.replace(year=current_year - 1)
                         
                    formatted_time = dt_object.strftime('%H:%M')
                    formatted_date = dt_object.strftime('%d.%m.%Y')
                    
                    last_login = (f"üë§ **{user}**\n"
                                  f"üåç IP: **{flag} {ip}**\n"
                                  f"‚è∞ –í—Ä–µ–º—è: **{formatted_time}**\n"
                                  f"üóìÔ∏è –î–∞—Ç–∞: **{formatted_date}**")
                else:
                    last_login = "**N/A** (–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ª–æ–≥–∞)"
            else:
                 last_login = "**N/A** (–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤)"
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ SSH –≤—Ö–æ–¥–∞: {e}")
            last_login = f"**N/A** (–û—à–∏–±–∫–∞: {str(e)})"
            
    # –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫
    counters = psutil.net_io_counters()
    rx = counters.bytes_recv
    tx = counters.bytes_sent
    
    response_text = (
        f"üõ† **–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:**\n\n"
        f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        f"üìä –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: **{cpu}%**\n"
        f"üíæ –û–ó–£: **{mem}%**\n"
        f"üíΩ –ü–ó–£: **{disk}%**\n"
        f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: **{uptime_str}**\n"
        f"{internet}\n"
        f"‚åõ –ó–∞–¥–µ—Ä–∂–∫–∞ (8.8.8.8): **{ping_time} –º—Å**\n"
        f"üåê –í–Ω–µ—à–Ω–∏–π IP: **`{external_ip}`**\n"
        f"üì° –¢—Ä–∞—Ñ–∏–∫‚¨á **{format_traffic(rx)}** / ‚¨Ü **{format_traffic(tx)}**\n\n"
        f"üìÑ **–ü–æ—Å–ª–µ–¥–Ω–∏–π —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ SSH:**\n{last_login}"
    )

    sent_message = await message.answer(response_text, parse_mode="Markdown")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(Command("speedtest"))
async def speedtest_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "speedtest"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    sent_message = await message.answer("üöÄ –ó–∞–ø—É—Å–∫ speedtest... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º speedtest-cli —Å —Ñ–æ—Ä–º–∞—Ç–æ–º JSON
    cmd = "speedtest --format=json"
    process = await asyncio.create_subprocess_shell(
        cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()

    await delete_previous_message(user_id, command, chat_id)
    if process.returncode == 0:
        output = stdout.decode('utf-8', errors='ignore')
        try:
            data = json.loads(output)
            # Bandwidth –≤ –±–∞–π—Ç–∞—Ö/—Å. –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ú–±–∏—Ç/—Å (–ú–ë–∏—Ç/—Å = (–ë–∞–π—Ç * 8) / (1024 * 1024))
            # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∏–º –Ω–∞ 125000, —Ç.–∫. 125000 –ë–∞–π—Ç/—Å = 1 –ú–±–∏—Ç/—Å
            download_speed = data.get("download", {}).get("bandwidth", 0) / 125000
            upload_speed = data.get("upload", {}).get("bandwidth", 0) / 125000
            ping_latency = data.get("ping", {}).get("latency", "N/A")
            isp = data.get("isp", "N/A")
            server_name = data.get("server", {}).get("name", "N/A")
            result_url = data.get("result", {}).get("url", "N/A")
            
            response_text = (f"üöÄ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã Speedtest:**\n"
                             f"‚¨á –í—Ö–æ–¥—è—â–∞—è: **{download_speed:.2f} –ú–±–∏—Ç/—Å**\n"
                             f"‚¨Ü –ò—Å—Ö–æ–¥—è—â–∞—è: **{upload_speed:.2f} –ú–±–∏—Ç/—Å**\n"
                             f"‚è± –ü–∏–Ω–≥: **{ping_latency:.2f} –º—Å**\n"
                             f"üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä: **{isp}**\n"
                             f"üåê –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä: **{server_name}**\n\n"
                             f"üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç]({result_url})")
        except json.JSONDecodeError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç speedtest: {e}")
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ speedtest: <pre>{escape_html(str(e))}</pre>"
    else:
        error_output = stderr.decode('utf-8', errors='ignore')
        response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ speedtest:\n<pre>{escape_html(error_output)}</pre>"

    sent_message = await message.answer(response_text, parse_mode="Markdown" if process.returncode == 0 else "HTML", disable_web_page_preview=False if process.returncode == 0 else True)
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(Command("top"))
async def top_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "top"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)

    cmd = "ps aux --sort=-%cpu | head -n 15" # –£–≤–µ–ª–∏—á–∏–º –¥–æ 15 —Å—Ç—Ä–æ–∫ –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    process = await asyncio.create_subprocess_shell(
        cmd,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()

    if process.returncode == 0:
        output = escape_html(stdout.decode())
        response_text = f"üî• **–¢–æ–ø 14 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ CPU:**\n<pre>{output}</pre>"
    else:
        error_output = escape_html(stderr.decode())
        response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n<pre>{error_output}</pre>"

    sent_message = await message.answer(response_text, parse_mode="HTML")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(Command("logs"))
async def logs_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "logs"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    try:
        log_file = SYSLOG_FILE
        if not os.path.exists(log_file):
             log_file = SSH_LOG_FILE
             
        cmd = f"sudo tail -n 25 {log_file}"
        process = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
        stdout, stderr = await process.communicate()
        
        if process.returncode == 0:
            log_output = escape_html(stdout.decode('utf-8', errors='ignore'))
            sent_message = await message.answer(f"üìú **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∂—É—Ä–Ω–∞–ª—ã ({os.path.basename(log_file)}):**\n<pre>{log_output}</pre>", parse_mode="HTML")
        else:
             error_output = escape_html(stderr.decode())
             sent_message = await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–æ–≤: <pre>{error_output}</pre>", parse_mode="HTML")
             
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–æ–≤: {e}")
        sent_message = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–æ–≤: {str(e)}")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(Command("fall2ban"))
async def fall2ban_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "fall2ban"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    try:
        if not os.path.exists(F2B_LOG_FILE):
             sent_message = await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–∞ Fail2Ban –Ω–µ –Ω–∞–π–¥–µ–Ω: `{F2B_LOG_FILE}`", parse_mode="Markdown")
             LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
             return

        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "Ban"
        cmd = f"sudo grep 'Ban ' {F2B_LOG_FILE} | tail -n 20"
        process = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
        stdout, _ = await process.communicate()
        lines = stdout.decode('utf-8', errors='ignore').splitlines()
        
        log_entries = []
        for line in reversed(lines):
            ip_match = re.search(r'Ban (\S+)', line)
            date_match = re.search(r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})', line)
            if ip_match and date_match:
                ip = ip_match.group(1)
                flag = get_country_flag(ip)
                
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                dt = datetime.strptime(date_match.group(1), "%Y-%m-%d %H:%M:%S")
                # –î–ª—è –ª–æ–≥–æ–≤ Fail2Ban, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, –Ω—É–∂–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞, 
                # –Ω–æ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—é –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –≤–≤–µ–¥–µ–Ω–æ —Ä–∞–Ω–µ–µ.
                
                formatted_time = dt.strftime('%H:%M')
                formatted_date = dt.strftime('%d.%m.%Y')

                log_entries.append(f"üåç IP: **{flag} {ip}**\n‚è∞ –í—Ä–µ–º—è: **{formatted_time}**\nüóìÔ∏è –î–∞—Ç–∞: **{formatted_date}**")
            
            if len(log_entries) >= 10:
                break
                
        if log_entries:
            log_output = "\n\n".join(log_entries)
            sent_message = await message.answer(f"üîí **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP (Fail2Ban):**\n\n{log_output}", parse_mode="Markdown")
        else:
            sent_message = await message.answer("üîí –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ IP –≤ –ª–æ–≥–∞—Ö.")
            
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ Fail2Ban: {e}")
        sent_message = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ Fail2Ban: {str(e)}")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(Command("sshlog"))
async def sshlog_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "sshlog"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        return
    await delete_previous_message(user_id, command, chat_id)
    try:
        if not os.path.exists(SSH_LOG_FILE):
             sent_message = await message.answer(f"‚ö†Ô∏è –§–∞–π–ª –ª–æ–≥–∞ SSH –Ω–µ –Ω–∞–π–¥–µ–Ω: `{SSH_LOG_FILE}`", parse_mode="Markdown")
             LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
             return
             
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö "Accepted"
        cmd = f"sudo grep 'Accepted' {SSH_LOG_FILE} | tail -n 20"
        process = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
        stdout, _ = await process.communicate()
        lines = stdout.decode('utf-8', errors='ignore').splitlines()
        
        log_entries = []
        for line in reversed(lines):
            # –ü–∞—Ä—Å–∏–Ω–≥ –ª–æ–≥–æ–≤ (—Ñ–æ—Ä–º–∞—Ç /var/log/auth.log –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
            # –ü—Ä–∏–º–µ—Ä: Oct 10 10:00:00 hostname sshd[1234]: Accepted publickey for user from 1.1.1.1 port 50000 ssh2: RSA SHA256:....
            # –ò–ª–∏: 2023-10-10T10:00:00+03:00 hostname sshd[1234]: Accepted... (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è rsyslog —Å ISO-—Ñ–æ—Ä–º–∞—Ç–æ–º)
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            user_match = re.search(r'for (\S+)', line)
            ip_match = re.search(r'from (\S+)', line)
            
            # –ü–æ–∏—Å–∫ –¥–∞—Ç—ã (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞)
            # –î–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏, –∏—â–µ–º –¥–∞—Ç—É –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (Oct 10 10:00:00 –∏–ª–∏ ISO-—Ñ–æ—Ä–º–∞—Ç)
            date_match = re.search(r'^(\w{3}\s+\d{1,2}\s+\d{2}:\d{2}:\d{2})', line) # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π syslog
            if not date_match:
                 date_match = re.search(r'^(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})', line) # ISO
            
            if date_match and user_match and ip_match:
                try:
                    date_str = date_match.group(1)
                    if 'T' in date_str: # ISO format
                        dt_object = datetime.strptime(date_str, '%Y-%m-%dT%H:%M:%S')
                    else: # Syslog format
                         # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                        dt_object = datetime.strptime(f"{datetime.now().year} {date_str}", '%Y %b %d %H:%M:%S')
                        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥, –µ—Å–ª–∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º (–∑–Ω–∞—á–∏—Ç, —Å–æ–±—ã—Ç–∏–µ –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –≥–æ–¥–∞)
                        if dt_object > datetime.now():
                             dt_object = dt_object.replace(year=datetime.now().year - 1)


                    user = user_match.group(1)
                    ip = ip_match.group(1)
                    flag = get_country_flag(ip)
                    
                    formatted_time = dt_object.strftime('%H:%M')
                    formatted_date = dt_object.strftime('%d.%m.%Y')

                    log_entries.append(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{user}**\nüåç IP: **{flag} {ip}**\n‚è∞ –í—Ä–µ–º—è: **{formatted_time}**\nüóìÔ∏è –î–∞—Ç–∞: **{formatted_date}**")
                    if len(log_entries) >= 10:
                        break
                except (ValueError, IndexError) as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ SSH –ª–æ–≥–∞: {e} | {line.strip()}")
                    continue

        if log_entries:
            log_output = "\n\n".join(log_entries)
            sent_message = await message.answer(f"üîê **–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —É—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ SSH:**\n\n{log_output}", parse_mode="Markdown")
        else:
            sent_message = await message.answer("üîê –ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —É—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ SSH –≤ –ª–æ–≥–∞—Ö.")
            
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ SSH: {e}")
        sent_message = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–∞ SSH: {str(e)}")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(StateFilter(GenerateVlessStates.waiting_for_file), F.document)
async def handle_vless_file(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "generate_vless"
    
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        await state.clear()
        return
        
    if not message.document or not message.document.file_name.endswith(".json"):
        await delete_previous_message(user_id, command, chat_id)
        sent_message = await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π **JSON —Ñ–∞–π–ª**.", reply_markup=get_back_keyboard("back_generate_vless"), parse_mode="Markdown")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
        return
        
    try:
        file = await bot.get_file(message.document.file_id)
        file_path = file.file_path
        file_content = await bot.download_file(file_path)
        json_data = file_content.read().decode('utf-8')
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ JSON
        try:
             json.loads(json_data)
        except json.JSONDecodeError:
             raise ValueError("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON.")
             
        await state.update_data(json_data=json_data)
        
        await delete_previous_message(user_id, command, chat_id)
        sent_message = await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ **–∏–º—è** –¥–ª—è VLESS —Å—Å—ã–ª–∫–∏:", reply_markup=get_back_keyboard("back_generate_vless"), parse_mode="Markdown")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
        await state.set_state(GenerateVlessStates.waiting_for_name)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ VLESS: {e}")
        await state.clear()
        await delete_previous_message(user_id, command, chat_id)
        sent_message = await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: **{str(e)}**", reply_markup=get_back_keyboard("back_generate_vless"), parse_mode="Markdown")
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

@dp.message(StateFilter(GenerateVlessStates.waiting_for_file))
async def handle_vless_file_wrong_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ-—Ñ–∞–π–ª–∞, –ø–æ–∫–∞ –æ–∂–∏–¥–∞–µ–º —Ñ–∞–π–ª."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "generate_vless"
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        await state.clear()
        return

    await delete_previous_message(user_id, command, chat_id)
    sent_message = await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ **JSON —Ñ–∞–π–ª–∞**. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ù–∞–∑–∞–¥.", reply_markup=get_back_keyboard("back_generate_vless"), parse_mode="Markdown")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id


@dp.message(StateFilter(GenerateVlessStates.waiting_for_name))
async def handle_vless_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞."""
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "generate_vless"
    
    if not is_allowed(user_id, command):
        await send_access_denied_message(user_id, chat_id, command)
        await state.clear()
        return
        
    custom_name = message.text.strip()
    if not custom_name:
         custom_name = f"VLESS_Config_by_{message.from_user.first_name or user_id}"
         
    data = await state.get_data()
    json_data = data.get("json_data")
    await state.clear() # –°—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM

    if not json_data:
        await delete_previous_message(user_id, command, chat_id)
        sent_message = await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: JSON –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.", reply_markup=get_back_keyboard("back_to_menu"))
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
        return

    vless_url = convert_json_to_vless(json_data, custom_name)

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_H, box_size=10, border=4)
        qr.add_data(vless_url)
        qr.make(fit=True)
        qr_img = qr.make_image(fill_color="black", back_color="white")

        img_byte_arr = io.BytesIO()
        qr_img.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)

        photo = BufferedInputFile(img_byte_arr.getvalue(), filename="vless_qr.png")

        await delete_previous_message(user_id, command, chat_id)
        sent_message = await message.answer_photo(
            photo=photo,
            caption=f"üîó **VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è ¬´{escape_html(custom_name)}¬ª:**\n\n"
                    f"–ö–æ–¥:\n<code>{escape_html(vless_url)}</code>",
            parse_mode="HTML"
        )
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await delete_previous_message(user_id, command, chat_id)
        sent_message = await message.answer(
            f"üîó **VLESS —Å—Å—ã–ª–∫–∞ –¥–ª—è ¬´{escape_html(custom_name)}¬ª:**\n\n"
            f"–ö–æ–¥:\n<code>{escape_html(vless_url)}</code>\n\n"
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {escape_html(str(e))}",
            parse_mode="HTML",
        )
        LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id


async def initial_reboot_check():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
    if os.path.exists(REBOOT_FLAG_FILE):
        try:
            with open(REBOOT_FLAG_FILE, "r") as f:
                user_id = int(f.read().strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ ADMIN_USER_ID, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            # –•–æ—Ç—è, –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º, –∫—Ç–æ –∑–∞–ø—Ä–æ—Å–∏–ª.
            await bot.send_message(
                chat_id=user_id, 
                text="‚úÖ **–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω! –ë–æ—Ç —Å–Ω–æ–≤–∞ –≤ —Å–µ—Ç–∏.**",
                parse_mode="Markdown"
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º —Ñ–ª–∞–≥
            os.remove(REBOOT_FLAG_FILE)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        load_users()
        await refresh_user_names()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ä–µ–±—É—Ç, –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
        await initial_reboot_check()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–∞—Ñ–∏–∫–∞
        asyncio.create_task(traffic_monitor())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç–∞—Ä—Ç
        dp.startup.register(load_users) 
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())

    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {e}")
