# /opt/tg-bot/core/auth.py
import os
import json
import logging
import urllib.parse
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest

from .config import USERS_FILE, ADMIN_USER_ID, ADMIN_USERNAME, INSTALL_MODE
from .shared_state import ALLOWED_USERS, USER_NAMES, LAST_MESSAGE_IDS
from .messaging import delete_previous_message
from .utils import escape_html

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ALLOWED_USERS –∏ USER_NAMES –∏–∑ shared_state"""
    global ALLOWED_USERS, USER_NAMES
    try:
        os.makedirs(os.path.dirname(USERS_FILE), exist_ok=True)
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, "r", encoding='utf-8') as f:
                data = json.load(f)
                ALLOWED_USERS = {int(user["id"]): user["group"] for user in data.get("allowed_users", [])}
                USER_NAMES = data.get("user_names", {})

        if ADMIN_USER_ID not in ALLOWED_USERS:
            ALLOWED_USERS[ADMIN_USER_ID] = "–ê–¥–º–∏–Ω—ã"
            USER_NAMES[str(ADMIN_USER_ID)] = "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"
            save_users()

        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –†–∞–∑—Ä–µ—à–µ–Ω–æ ID: {list(ALLOWED_USERS.keys())}")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ users.json: {e}")
        ALLOWED_USERS = {ADMIN_USER_ID: "–ê–¥–º–∏–Ω—ã"}
        USER_NAMES = {str(ADMIN_USER_ID): "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"}
        save_users()

def save_users():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ALLOWED_USERS –∏ USER_NAMES –≤ shared_state"""
    try:
        user_names_to_save = {str(k): v for k, v in USER_NAMES.items()}
        data = {
            "allowed_users": [{"id": uid, "group": group} for uid, group in ALLOWED_USERS.items()],
            "user_names": user_names_to_save
        }
        os.makedirs(os.path.dirname(USERS_FILE), exist_ok=True)
        with open(USERS_FILE, "w", encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        logging.info(f"–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ users.json")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json: {e}")

def is_allowed(user_id, command=None):
    if user_id not in ALLOWED_USERS:
        return False

    user_commands = ["start", "menu", "back_to_menu", "uptime", "traffic", "selftest", "get_id", "get_id_inline", "notifications_menu", "toggle_alert_resources", "toggle_alert_logins", "toggle_alert_bans", "alert_downtime_stub"]
    if command in user_commands:
        return True

    is_admin_group = user_id == ADMIN_USER_ID or ALLOWED_USERS.get(user_id) == "–ê–¥–º–∏–Ω—ã"
    if not is_admin_group:
        return False

    admin_only_commands = [
        "manage_users", "generate_vless", "speedtest", "top", "updatexray", "adduser", "add_user"
    ]
    if command in admin_only_commands:
        return True

    root_only_commands = [
        "reboot_confirm", "reboot", "fall2ban", "sshlog", "logs", "restart", "update"
    ]
    if command in root_only_commands:
        return INSTALL_MODE == "root"

    # –î–æ–±–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ö–≤–∞—Ç–∞–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    if command and any(cmd in command for cmd in ["delete_user", "set_group", "change_group", "xray_install", "back_to_manage_users", "back_to_delete_users"]):
        return True

    return False

async def refresh_user_names(bot: Bot):
    global USER_NAMES
    needs_save = False
    user_ids_to_check = list(ALLOWED_USERS.keys())
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –¥–ª—è {len(user_ids_to_check)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    for uid in user_ids_to_check:
        uid_str = str(uid)
        current_name = USER_NAMES.get(uid_str)

        should_refresh = (
            not current_name
            or current_name.startswith("–ù–æ–≤—ã–π_")
            or current_name.startswith("ID: ")
            or current_name == "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω"
        )

        if should_refresh:
            try:
                logging.debug(f"–ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –¥–ª—è ID: {uid}")
                chat = await bot.get_chat(uid)
                new_name = chat.first_name or chat.username
                if not new_name:
                    new_name = f"ID: {uid}"
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ò–º—è/–Æ–∑–µ—Ä–Ω–µ–π–º –¥–ª—è {uid}, –∏—Å–ø–æ–ª—å–∑—É—é '{new_name}'")
                else:
                    new_name = escape_html(new_name)

                if current_name != new_name:
                    logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –∏–º—è –¥–ª—è {uid}: '{current_name}' -> '{new_name}'")
                    USER_NAMES[uid_str] = new_name
                    needs_save = True
                else:
                    logging.debug(f"–ò–º—è –¥–ª—è {uid} –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ('{current_name}').")

            except TelegramBadRequest as e:
                if "chat not found" in str(e) or "bot was blocked by the user" in str(e):
                     logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –¥–ª—è {uid}: {e}. –ò—Å–ø–æ–ª—å–∑—É—é 'ID: {uid}'.")
                     if current_name != f"ID: {uid}":
                          USER_NAMES[uid_str] = f"ID: {uid}"
                          needs_save = True
                else:
                     logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –¥–ª—è {uid}: {e}")
                     if not current_name or current_name.startswith("–ù–æ–≤—ã–π_"):
                          USER_NAMES[uid_str] = f"ID: {uid}"
                          needs_save = True
            except Exception as e:
                logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –¥–ª—è {uid}: {e}")
                if not current_name or current_name.startswith("–ù–æ–≤—ã–π_"):
                     USER_NAMES[uid_str] = f"ID: {uid}"
                     needs_save = True

    if needs_save:
        logging.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–º–µ–Ω–∞—Ö, —Å–æ—Ö—Ä–∞–Ω—è—é users.json...")
        save_users()
    else:
        logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def get_user_name(bot: Bot, user_id: int) -> str:
    try:
        cached_name = USER_NAMES.get(str(user_id))
        if cached_name and "Unknown" not in cached_name and "–ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω" not in cached_name:
            return cached_name

        chat = await bot.get_chat(user_id)
        name = chat.first_name or chat.username or f"Unknown_{user_id}"
        USER_NAMES[str(user_id)] = name
        save_users()
        return name
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –¥–ª—è ID {user_id}: {e}")
        return f"Unknown_{user_id}"

async def send_access_denied_message(bot: Bot, user_id: int, chat_id: int, command: str):
    await delete_previous_message(user_id, command, chat_id, bot)

    text_to_send = f"–º–æ–π ID: {user_id}"
    admin_link = ""

    if ADMIN_USERNAME:
        admin_link = f"https://t.me/{ADMIN_USERNAME}?text={urllib.parse.quote(text_to_send)}"
    else:
        admin_link = f"tg://user?id={ADMIN_USER_ID}&text={urllib.parse.quote(text_to_send)}"
        logging.warning("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TG_ADMIN_USERNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ –ø–æ ID (–æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å).")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", url=admin_link)]
    ])
    sent_message = await bot.send_message(
        chat_id,
        f"‚õî –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞. –í–∞—à ID: <code>{user_id}</code>.\n"
        "–ö –∫–æ–º–∞–Ω–¥–∞–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id