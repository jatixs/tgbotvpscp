# /opt/tg-bot/core/keyboards.py
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from .shared_state import ALLOWED_USERS, USER_NAMES, ALERTS_CONFIG
from .config import ADMIN_USER_ID, INSTALL_MODE

# --- –ù–ê–ß–ê–õ–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê ---

def get_main_reply_keyboard(user_id: int, buttons_map: dict) -> ReplyKeyboardMarkup:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏,
    —Å –ª–æ–≥–∏—á–µ—Å–∫–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–∫–∞–∫ –±—ã–ª–æ –¥–æ –ø–æ–¥–º–µ–Ω—é).
    """
    is_admin = user_id == ADMIN_USER_ID or ALLOWED_USERS.get(user_id) == "–ê–¥–º–∏–Ω—ã"
    is_root_mode = INSTALL_MODE == 'root'

    # 1. –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∫–Ω–æ–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    available_buttons_texts = set()
    available_buttons_map = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—ä–µ–∫—Ç—É KeyboardButton –ø–æ —Ç–µ–∫—Å—Ç—É

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    for btn in buttons_map.get("user", []): # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'user'
        available_buttons_texts.add(btn.text)
        available_buttons_map[btn.text] = btn

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if is_admin:
        for btn in buttons_map.get("admin", []): # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'admin'
            available_buttons_texts.add(btn.text)
            available_buttons_map[btn.text] = btn

    # Root –∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∂–∏–º root –ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω)
    if is_root_mode and is_admin:
        for btn in buttons_map.get("root", []): # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'root'
            available_buttons_texts.add(btn.text)
            available_buttons_map[btn.text] = btn

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–æ–∫ (–≥—Ä—É–ø–ø—ã) - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É
    button_layout = [
        # –ì—Ä—É–ø–ø–∞ 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (User+)
        ["üõ† –°–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ", "üì° –¢—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏", "‚è± –ê–ø—Ç–∞–π–º"],
        # –ì—Ä—É–ø–ø–∞ 2: –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –¢–µ—Å—Ç—ã (Admin+)
        ["üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏", "üî• –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "ü©ª –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ X-ray"],
        # –ì—Ä—É–ø–ø–∞ 3: –õ–æ–≥–∏ –∏ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (Root Only)
        ["üìú SSH-–ª–æ–≥", "üîí Fail2Ban Log", "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"],
        # –ì—Ä—É–ø–ø–∞ 4: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (Admin+)
        ["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üîó VLESS-—Å—Å—ã–ª–∫–∞"],
        # –ì—Ä—É–ø–ø–∞ 5: –°–∏—Å—Ç–µ–º–Ω—ã–µ –î–µ–π—Å—Ç–≤–∏—è (Admin/Root)
        ["üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPS", "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞", "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"],
        # –ì—Ä—É–ø–ø–∞ 6: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–æ—Ç–∞ (User+)
        ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
    ]

    # 3. –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    final_keyboard_rows = []
    for row_template in button_layout:
        current_row = []
        for btn_text in row_template:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if btn_text in available_buttons_texts:
                current_row.append(available_buttons_map[btn_text])

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        if current_row:
            final_keyboard_rows.append(current_row)

    return ReplyKeyboardMarkup(
        keyboard=final_keyboard_rows,
        resize_keyboard=True,
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é..."
    )

# --- –ö–û–ù–ï–¶ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ù–û–ì–û –ö–û–î–ê ---


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_*_keyboard –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def get_manage_users_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            InlineKeyboardButton(text="üÜî –ú–æ–π ID", callback_data="get_id_inline")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu") # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Å–µ –µ—â–µ –Ω—É–∂–Ω–∞
        ]
    ])
    return keyboard

def get_delete_users_keyboard(current_user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    buttons = []
    sorted_users = sorted(
        ALLOWED_USERS.items(),
        key=lambda item: USER_NAMES.get(str(item[0]), f"ID: {item[0]}").lower()
    )
    for uid, group in sorted_users:
        if uid == ADMIN_USER_ID: continue
        user_name = USER_NAMES.get(str(uid), f"ID: {uid}")
        button_text = f"{user_name} ({group})"
        callback_data = f"delete_user_{uid}"
        if uid == current_user_id:
            button_text = f"‚ùå –£–¥–∞–ª–∏—Ç—å —Å–µ–±—è ({user_name}, {group})"
            callback_data = f"request_self_delete_{uid}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_users")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_change_group_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–º–µ–Ω—ã –≥—Ä—É–ø–ø—ã."""
    buttons = []
    sorted_users = sorted(
        ALLOWED_USERS.items(),
        key=lambda item: USER_NAMES.get(str(item[0]), f"ID: {item[0]}").lower()
    )
    for uid, group in sorted_users:
        if uid == ADMIN_USER_ID: continue
        user_name = USER_NAMES.get(str(uid), f"ID: {uid}")
        buttons.append([InlineKeyboardButton(text=f"{user_name} ({group})", callback_data=f"select_user_change_group_{uid}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_users")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_group_selection_keyboard(user_id_to_change=None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã (–ê–¥–º–∏–Ω/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)."""
    user_identifier = user_id_to_change or 'new'
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω—ã", callback_data=f"set_group_{user_identifier}_–ê–¥–º–∏–Ω—ã"),
            InlineKeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=f"set_group_{user_identifier}_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        ],
        [ InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_manage_users") ]
    ])
    return keyboard

def get_self_delete_confirmation_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ–±—è."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_self_delete_{user_id}"),
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_delete_users")
        ]
    ])
    return keyboard

def get_reboot_confirmation_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reboot"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="back_to_menu") # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è
        ]
    ])
    return keyboard

def get_back_keyboard(callback_data="back_to_manage_users"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'."""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [ InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data) ]
    ])
    return keyboard

def get_alerts_menu_keyboard(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_config = ALERTS_CONFIG.get(user_id, {})
    res_enabled = user_config.get("resources", False)
    logins_enabled = user_config.get("logins", False)
    bans_enabled = user_config.get("bans", False)
    res_text = f"{'‚úÖ' if res_enabled else '‚ùå'} –†–µ—Å—É—Ä—Å—ã (CPU/RAM/Disk)"; logins_text = f"{'‚úÖ' if logins_enabled else '‚ùå'} –í—Ö–æ–¥—ã SSH"; bans_text = f"{'‚úÖ' if bans_enabled else '‚ùå'} –ë–∞–Ω—ã (Fail2Ban)"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=res_text, callback_data="toggle_alert_resources")],
        [InlineKeyboardButton(text=logins_text, callback_data="toggle_alert_logins")],
        [InlineKeyboardButton(text=bans_text, callback_data="toggle_alert_bans")],
        [InlineKeyboardButton(text="‚è≥ –î–∞—É–Ω—Ç–∞–π–º —Å–µ—Ä–≤–µ—Ä–∞ (WIP)", callback_data="alert_downtime_stub")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")] # –ò —ç—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è
    ])
    return keyboard