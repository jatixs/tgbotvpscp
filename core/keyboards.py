# /opt/tg-bot/core/keyboards.py
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from .shared_state import ALLOWED_USERS, USER_NAMES, ALERTS_CONFIG
from .config import ADMIN_USER_ID, INSTALL_MODE

def get_main_reply_keyboard(user_id: int, buttons_map: dict) -> ReplyKeyboardMarkup:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∫–Ω–æ–ø–æ–∫, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –º–æ–¥—É–ª—è–º–∏,
    —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç.
    """
    is_admin = user_id == ADMIN_USER_ID or ALLOWED_USERS.get(user_id) == "–ê–¥–º–∏–Ω—ã"
    
    button_rows_config = [] # –ó–¥–µ—Å—å –±—É–¥—É—Ç —Å—Ç—Ä–æ–∫–∏ —Å –¢–ï–ö–°–¢–û–ú –∫–Ω–æ–ø–æ–∫

    if is_admin:
        if INSTALL_MODE == 'root':
            button_rows_config = [
                 ["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üîó VLESS-—Å—Å—ã–ª–∫–∞"],
                 ["üî• –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", "üìú SSH-–ª–æ–≥"],
                 ["üîí Fail2Ban Log", "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"],
                 ["üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏"],
                 ["üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPS", "ü©ª –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ X-ray"],
                 ["üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"]
            ]
        elif INSTALL_MODE == 'secure':
            button_rows_config = [
                 ["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "üîó VLESS-—Å—Å—ã–ª–∫–∞"],
                 ["üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏", "üî• –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"],
                 ["ü©ª –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ X-ray"],
            ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    button_rows_config.extend([
        ["üõ† –°–≤–µ–¥–µ–Ω–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ", "üì° –¢—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏"],
        ["‚è± –ê–ø—Ç–∞–π–º", "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
    ])

    # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏–∑ –º–æ–¥—É–ª–µ–π
    all_available_buttons = {}
    for level in buttons_map:
        for btn in buttons_map[level]:
            all_available_buttons[btn.text] = btn

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    final_keyboard = []
    for row_config in button_rows_config:
        new_row = []
        for btn_text in row_config:
            if btn_text in all_available_buttons:
                new_row.append(all_available_buttons[btn_text])
        if new_row: # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
            final_keyboard.append(new_row)

    return ReplyKeyboardMarkup(
        keyboard=final_keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –≤ –º–µ–Ω—é..."
    )

def get_manage_users_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="delete_user")
        ],
        [
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="change_group"),
            InlineKeyboardButton(text="üÜî –ú–æ–π ID", callback_data="get_id_inline")
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def get_delete_users_keyboard(current_user_id):
    buttons = []
    sorted_users = sorted(ALLOWED_USERS.items(), key=lambda item: USER_NAMES.get(str(item[0]), f"ID: {item[0]}"), reverse=False)

    for uid, group in sorted_users:
        if uid == ADMIN_USER_ID:
            continue
        user_name = USER_NAMES.get(str(uid), f"ID: {uid}")
        button_text = f"{user_name} ({group})"
        callback_data = f"delete_user_{uid}"
        if uid == current_user_id:
            button_text = f"‚ùå –£–¥–∞–ª–∏—Ç—å —Å–µ–±—è ({user_name}, {group})"
            callback_data = f"request_self_delete_{uid}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])

    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_users")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_change_group_keyboard():
    buttons = []
    sorted_users = sorted(ALLOWED_USERS.items(), key=lambda item: USER_NAMES.get(str(item[0]), f"ID: {item[0]}"), reverse=False)
    for uid, group in sorted_users:
        if uid == ADMIN_USER_ID:
            continue
        user_name = USER_NAMES.get(str(uid), f"ID: {uid}")
        buttons.append([InlineKeyboardButton(text=f"{user_name} ({group})", callback_data=f"select_user_change_group_{uid}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_manage_users")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_group_selection_keyboard(user_id_to_change=None):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëë –ê–¥–º–∏–Ω—ã", callback_data=f"set_group_{user_id_to_change or 'new'}_–ê–¥–º–∏–Ω—ã"),
            InlineKeyboardButton(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data=f"set_group_{user_id_to_change or 'new'}_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        ],
        [
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_manage_users")
        ]
    ])
    return keyboard

def get_self_delete_confirmation_keyboard(user_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_self_delete_{user_id}"),
            InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_delete_users")
        ]
    ])
    return keyboard

def get_reboot_confirmation_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", callback_data="reboot"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
        ]
    ])
    return keyboard

def get_back_keyboard(callback_data="back_to_manage_users"):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)
        ]
    ])
    return keyboard

def get_alerts_menu_keyboard(user_id):
    user_config = ALERTS_CONFIG.get(user_id, {})
    res_enabled = user_config.get("resources", False)
    logins_enabled = user_config.get("logins", False)
    bans_enabled = user_config.get("bans", False)

    res_text = f"{'‚úÖ' if res_enabled else '‚ùå'} –†–µ—Å—É—Ä—Å—ã (CPU/RAM/Disk)"
    logins_text = f"{'‚úÖ' if logins_enabled else '‚ùå'} –í—Ö–æ–¥—ã/–í—ã—Ö–æ–¥—ã SSH"
    bans_text = f"{'‚úÖ' if bans_enabled else '‚ùå'} –ë–∞–Ω—ã (Fail2Ban)"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=res_text, callback_data="toggle_alert_resources")],
        [InlineKeyboardButton(text=logins_text, callback_data="toggle_alert_logins")],
        [InlineKeyboardButton(text=bans_text, callback_data="toggle_alert_bans")],
        [InlineKeyboardButton(text="‚è≥ –î–∞—É–Ω—Ç–∞–π–º —Å–µ—Ä–≤–µ—Ä–∞", callback_data="alert_downtime_stub")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    return keyboard