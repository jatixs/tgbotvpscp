# /opt-tg-bot/core/utils.py
import os
import json
import logging
import requests
import re
import asyncio
import urllib.parse
import time
from datetime import datetime
from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º i18n –∏ config ---
from . import config
from .i18n import get_text, get_user_lang
# --- –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç —Ä–µ–∂–∏–º–æ–≤ ---
from .config import INSTALL_MODE, DEPLOY_MODE
# --------------------------------

from .config import (
    ALERTS_CONFIG_FILE, REBOOT_FLAG_FILE, RESTART_FLAG_FILE
)
from .shared_state import ALERTS_CONFIG


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
def get_host_path(path: str) -> str:
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ö–æ—Å—Ç–∞, –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ docker-root.
    """
    if DEPLOY_MODE == "docker" and INSTALL_MODE == "root":
        # –í —Ä–µ–∂–∏–º–µ docker-root –§–° —Ö–æ—Å—Ç–∞ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ /host
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–æ —Å–ª–µ—à–∞
        if not path.startswith('/'):
            path = '/' + path
        
        host_path = f"/host{path}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –≤ /host, –µ—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–±—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π (–¥–ª—è /proc –∏ —Ç.–¥.)
        if os.path.exists(host_path):
            return host_path
        elif os.path.exists(path):
            # –≠—Ç–æ –¥–ª—è /proc/*, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–Ω—Ç–∏—Ä—É—é—Ç—Å—è docker'–æ–º, –∞ –Ω–µ –Ω–∞–º–∏
            return path
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –≤ /host, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
            # —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ "file not found" –ø–æ–∫–∞–∑–∞–ª–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
            return host_path
    
    # –í —Ä–µ–∂–∏–º–∞—Ö systemd-* –∏–ª–∏ docker-secure –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ –ø—É—Ç–∏
    return path
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---


def load_alerts_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ALERTS_CONFIG –∏–∑ shared_state"""
    global ALERTS_CONFIG
    try:
        if os.path.exists(ALERTS_CONFIG_FILE):
            with open(ALERTS_CONFIG_FILE, "r", encoding='utf-8') as f:
                ALERTS_CONFIG = json.load(f)
                ALERTS_CONFIG = {int(k): v for k, v in ALERTS_CONFIG.items()}
            logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        else:
            ALERTS_CONFIG = {}
            logging.info(
                "–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥.")
    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ JSON –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ alerts_config.json: {e}")
        ALERTS_CONFIG = {}
    except Exception as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ alerts_config.json: {e}",
            exc_info=True)
        ALERTS_CONFIG = {}


def save_alerts_config():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ALERTS_CONFIG –∏–∑ shared_state"""
    try:
        os.makedirs(os.path.dirname(ALERTS_CONFIG_FILE), exist_ok=True)
        config_to_save = {str(k): v for k, v in ALERTS_CONFIG.items()}
        with open(ALERTS_CONFIG_FILE, "w", encoding='utf-8') as f:
            json.dump(config_to_save, f, indent=4, ensure_ascii=False)
        logging.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è alerts_config.json: {e}",
            exc_info=True)


def get_country_flag(ip_or_code: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –ø–æ IP –∏–ª–∏ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω–æ–º—É –∫–æ–¥—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –æ—à–∏–±–∫–∏."""
    if not ip_or_code or ip_or_code in ["localhost", "127.0.0.1", "::1"]:
        return "üè†"

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–¥–∞
    input_str = ip_or_code.strip().upper()

    # --- –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –ù–ê –ö–û–î –°–¢–†–ê–ù–´ ---
    if len(input_str) == 2 and input_str.isalpha():
        # –ï—Å–ª–∏ —ç—Ç–æ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º AA -> üá¶üá¶ (Regional Indicator Symbol Letter)
            # –ö–æ–¥–æ–≤—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è A-Z: 0x1F1E6 - 0x1F1FF
            # –°–º–µ—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ASCII 'A' (65)
            flag = "".join(chr(ord(char) - 65 + 0x1F1E6) for char in input_str)
            return flag
        except Exception as e:
            logging.warning(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–¥–∞ '{input_str}' –≤–æ —Ñ–ª–∞–≥: {e}")
            return "‚ùì"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ù–û–ô –ü–†–û–í–ï–†–ö–ò ---

    # --- –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É —Å API (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ) ---
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ip_or_code –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ API
        response = requests.get(
            f"http://ip-api.com/json/{ip_or_code}?fields=countryCode,status",
            timeout=2)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTTP –æ—à–∏–±–∫–∏ (4xx, 5xx)
        data = response.json()

        if data.get("status") != "success":
            logging.warning(
                f"API ip-api.com –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å '{data.get('status')}' –¥–ª—è IP {ip_or_code}")
            return "‚ùì"

        country_code = data.get("countryCode")
        if country_code:
            if len(country_code) == 2 and country_code.isalpha():
                flag = "".join(chr(ord(char.upper()) - 65 + 0x1F1E6)
                               for char in country_code)
                return flag
            else:
                logging.warning(
                    f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π countryCode '{country_code}' –æ—Ç API –¥–ª—è IP {ip_or_code}")
                return "‚ùì"
        else:
            logging.debug(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å countryCode –æ—Ç API –¥–ª—è IP {ip_or_code}, —Ö–æ—Ç—è —Å—Ç–∞—Ç—É—Å success. –û—Ç–≤–µ—Ç: {data}")
            return "‚ùì"

    except requests.exceptions.Timeout:
        logging.warning(f"–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞ –¥–ª—è IP {ip_or_code}")
        return "‚è≥"
    except requests.exceptions.HTTPError as e:
        logging.warning(
            f"HTTP –æ—à–∏–±–∫–∞ {e.response.status_code} –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ñ–ª–∞–≥–∞ –¥–ª—è IP {ip_or_code}: {e}")
        return "‚ùì"
    except requests.exceptions.RequestException as e:
        logging.warning(
            f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞ –¥–ª—è IP {ip_or_code}: {e}")
        return "‚ùì"
    except json.JSONDecodeError as e:
        logging.warning(
            f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –æ—Ç–≤–µ—Ç–∞ –æ—Ç ip-api.com –¥–ª—è IP {ip_or_code}: {e}")
        return "‚ùì"
    except Exception as e:
        logging.exception(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ get_country_flag –¥–ª—è {ip_or_code}: {e}")
        return "‚ùì"


async def get_country_details(ip_or_code: str) -> tuple[str, str | None]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ñ–ª–∞–≥ –∏ –ü–û–õ–ù–û–ï –∏–º—è —Å—Ç—Ä–∞–Ω—ã –ø–æ IP –∏–ª–∏ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω–æ–º—É –∫–æ–¥—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (flag, country_name | None).
    """
    flag = "‚ùì"
    country_name = None
    input_str = ip_or_code.strip().upper() if ip_or_code else ""

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥ (–∏–∑ –∫–æ–¥–∞ –∏–ª–∏ IP)
    if not input_str or input_str in ["localhost", "127.0.0.1", "::1"]:
        return "üè†", None

    country_code_known = None
    if len(input_str) == 2 and input_str.isalpha():
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–¥, —Å—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å —Ñ–ª–∞–≥ –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–¥
        country_code_known = input_str
        try:
            flag = "".join(chr(ord(char) - 65 + 0x1F1E6) for char in input_str)
        except Exception as e:
            logging.warning(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–¥–∞ '{input_str}' –≤–æ —Ñ–ª–∞–≥: {e}")
            flag = "‚ùì"
    else:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ IP, –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥ –¥–ª—è —Ñ–ª–∞–≥–∞
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º blocking requests –≤ –ø–æ—Ç–æ–∫–µ
            response_flag = await asyncio.to_thread(
                requests.get,
                f"http://ip-api.com/json/{ip_or_code}?fields=countryCode,status",
                timeout=2
            )
            response_flag.raise_for_status()
            data_flag = response_flag.json()
            if data_flag.get("status") == "success" and data_flag.get(
                    "countryCode"):
                code = data_flag["countryCode"]
                if len(code) == 2 and code.isalpha():
                    country_code_known = code  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏
                    flag = "".join(chr(ord(char.upper()) - 65 + 0x1F1E6)
                                   for char in code)
                else:
                    logging.warning(
                        f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π countryCode '{code}' –æ—Ç API –¥–ª—è IP {ip_or_code}")
                    flag = "‚ùì"
            else:
                logging.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å countryCode –æ—Ç API (1) –¥–ª—è {ip_or_code}. Status: {data_flag.get('status')}")
                flag = "‚ùì"
        except requests.exceptions.Timeout:
            logging.warning(
                f"–¢–∞–π–º-–∞—É—Ç (1) –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞ –¥–ª—è {ip_or_code}")
            return "‚è≥", None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã –∏ None –¥–ª—è –∏–º–µ–Ω–∏
        except Exception as e:
            logging.warning(
                f"–û—à–∏–±–∫–∞ (1) –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞ –¥–ª—è {ip_or_code}: {e}")
            flag = "‚ùì"  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞, –Ω–æ –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –Ω–∏–∂–µ

    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –ü–û–õ–ù–û–ï –∏–º—è —Å—Ç—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—è IP –∏–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥
    # –ï—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ - —ç—Ç–æ –Ω–∞–¥–µ–∂–Ω–µ–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ç–æ–π
    # –∂–µ —Å—Ç—Ä–∞–Ω—ã, —á—Ç–æ –∏ —Ñ–ª–∞–≥
    identifier_for_name = country_code_known if country_code_known else ip_or_code
    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è —Å—Ç—Ä–∞–Ω—ã
        response_name = await asyncio.to_thread(
            requests.get,
            f"http://ip-api.com/json/{identifier_for_name}?fields=country,status",
            timeout=2
        )
        response_name.raise_for_status()
        data_name = response_name.json()
        if data_name.get("status") == "success" and data_name.get("country"):
            country_name = data_name["country"]
            logging.debug(
                f"–ü–æ–ª—É—á–µ–Ω–æ –∏–º—è —Å—Ç—Ä–∞–Ω—ã –¥–ª—è '{identifier_for_name}': {country_name}")
        else:
            logging.warning(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å country name –æ—Ç API –¥–ª—è '{identifier_for_name}'. Status: {data_name.get('status')}")

    except requests.exceptions.Timeout:
        logging.warning(
            f"–¢–∞–π–º-–∞—É—Ç (2) –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è '{identifier_for_name}'")
        # –§–ª–∞–≥ —É–∂–µ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å None –¥–ª—è –∏–º–µ–Ω–∏
    except Exception as e:
        logging.warning(
            f"–û—à–∏–±–∫–∞ (2) –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è '{identifier_for_name}': {e}")
        # –§–ª–∞–≥ —É–∂–µ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å None –¥–ª—è –∏–º–µ–Ω–∏

    return flag, country_name


def escape_html(text):
    if text is None:
        return ""
    text = str(text)
    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è HTML –≤ Telegram
    return text.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')


def convert_json_to_vless(json_data, custom_name):
    try:
        config_data = json.loads(json_data)
        outbounds = config_data.get('outbounds')
        if not outbounds or not isinstance(outbounds, list):
            raise ValueError(
                "Invalid config: 'outbounds' array is missing or invalid.")

        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π outbound —Ç–∏–ø–∞ 'vless'
        outbound = next(
            (ob for ob in outbounds if ob.get('protocol') == 'vless'), None)
        if not outbound:
            raise ValueError("Invalid config: No 'vless' outbound found.")

        settings = outbound.get('settings')
        vnext = settings.get('vnext') if settings else None
        if not vnext or not isinstance(vnext, list):
            raise ValueError(
                "Invalid config: 'vnext' array is missing or invalid in vless settings.")

        server_info = vnext[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä
        users = server_info.get('users')
        if not users or not isinstance(users, list):
            raise ValueError(
                "Invalid config: 'users' array is missing or invalid in vnext settings.")
        user = users[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        stream_settings = outbound.get('streamSettings')
        if not stream_settings:
            raise ValueError("Invalid config: 'streamSettings' are missing.")

        reality_settings = stream_settings.get('realitySettings')
        if stream_settings.get(
                'security') != 'reality' or not reality_settings:
            raise ValueError(
                "Invalid config: 'realitySettings' are missing or security is not 'reality'.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–æ–≤–µ—Ä–æ–∫)
        required_vnext = ['address', 'port']
        # Flow –∏ encryption –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö
        required_user = ['id']
        required_reality = [
            'serverName',
            'publicKey',
            'shortId']  # fingerprint –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω
        required_stream = ['network']

        for key in required_vnext:
            if key not in server_info:
                raise ValueError(f"Missing '{key}' in vnext server settings.")
        for key in required_user:
            if key not in user:
                raise ValueError(f"Missing '{key}' in user settings.")
        for key in required_reality:
            if key not in reality_settings:
                raise ValueError(f"Missing '{key}' in realitySettings.")
        for key in required_stream:
            if key not in stream_settings:
                raise ValueError(f"Missing '{key}' in streamSettings.")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL
        uuid = user['id']
        address = server_info['address']
        port = server_info['port']
        host = reality_settings['serverName']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º serverName –∫–∞–∫ host
        pbk = reality_settings['publicKey']
        sid = reality_settings['shortId']
        net_type = stream_settings['network']
        security = 'reality'
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        params = {
            "security": security,
            "pbk": pbk,
            "host": host,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º host –≤–º–µ—Å—Ç–æ sni, –∫–∞–∫ —Ç—Ä–µ–±—É—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
            # –î–æ–±–∞–≤–ª—è–µ–º sni –æ—Ç–¥–µ–ª—å–Ω–æ
            "sni": reality_settings.get('serverName'),
            "sid": sid,
            "type": net_type,
        }
        if 'flow' in user:
            params["flow"] = user['flow']
        if 'fingerprint' in reality_settings:
            params["fp"] = reality_settings['fingerprint']
        # headerType=none –æ–±—ã—á–Ω–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ type –Ω–µ http

        base = f"vless://{uuid}@{address}:{port}"
        encoded_params = urllib.parse.urlencode(
            params, quote_via=urllib.parse.quote)
        encoded_name = urllib.parse.quote(custom_name)

        vless_url = f"{base}?{encoded_params}#{encoded_name}"
        return vless_url

    except json.JSONDecodeError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ VLESS: {e}")
        return get_text(
            "utils_vless_error",
            config.DEFAULT_LANGUAGE,
            error=f"JSON Decode Error: {e}")
    except (KeyError, IndexError, TypeError, ValueError, StopIteration) as e:
        logging.error(
            f"–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –≤ VLESS JSON: {e}")
        return get_text(
            "utils_vless_error",
            config.DEFAULT_LANGUAGE,
            error=f"Invalid config structure: {e}")
    except Exception as e:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º exception
        logging.exception(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VLESS-—Å—Å—ã–ª–∫–∏: {e}")
        return get_text(
            "utils_vless_error",
            config.DEFAULT_LANGUAGE,
            error=str(e))


def format_traffic(bytes_value, lang: str):
    units = [
        get_text(
            "unit_bytes", lang), get_text(
            "unit_kb", lang), get_text(
                "unit_mb", lang), get_text(
                    "unit_gb", lang), get_text(
                        "unit_tb", lang), get_text(
                            "unit_pb", lang)]
    try:
        value = float(bytes_value)
    except (ValueError, TypeError):
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è format_traffic: {bytes_value}")
        return f"0 {units[0]}"

    unit_index = 0
    while value >= 1024 and unit_index < len(units) - 1:
        value /= 1024
        unit_index += 1
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å f-string –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return f"{value:.2f} {units[unit_index]}"


def format_uptime(seconds, lang: str):
    try:
        seconds = int(seconds)
    except (ValueError, TypeError):
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è format_uptime: {seconds}")
        return f"0{get_text('unit_second_short', lang)}"

    if seconds < 0:
        logging.warning(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è format_uptime: {seconds}")
        seconds = 0

    years = seconds // (365 * 24 * 3600)
    remaining = seconds % (365 * 24 * 3600)
    days = remaining // (24 * 3600)
    remaining %= (24 * 3600)
    hours = remaining // 3600
    remaining %= 3600
    mins = remaining // 60
    secs = remaining % 60

    year_unit = get_text("unit_year_short", lang)
    day_unit = get_text("unit_day_short", lang)
    hour_unit = get_text("unit_hour_short", lang)
    min_unit = get_text("unit_minute_short", lang)
    sec_unit = get_text("unit_second_short", lang)

    parts = []
    if years > 0:
        parts.append(f"{years}{year_unit}")
    if days > 0:
        parts.append(f"{days}{day_unit}")
    if hours > 0:
        parts.append(f"{hours}{hour_unit}")
    if mins > 0:
        parts.append(f"{mins}{min_unit}")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ –∞–ø—Ç–∞–π–º –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã –∏–ª–∏ –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ –ø—É—Å—Ç—ã
    if seconds < 60 or not parts:
        parts.append(f"{secs}{sec_unit}")

    return " ".join(parts)


def get_server_timezone_label():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–∫—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ' (GMT+3)')."""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ UTC
        # time.timezone –¥–∞–µ—Ç —Å–º–µ—â–µ–Ω–∏–µ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –ó–ê–ü–ê–î–ù–ï–ï UTC (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π –∑–Ω–∞–∫)
        # time.altzone –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–µ—Ç–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
        is_dst = time.daylight and time.localtime().tm_isdst > 0
        offset_seconds = -time.altzone if is_dst else -time.timezone
        offset_hours = offset_seconds // 3600
        offset_minutes = abs(offset_seconds % 3600) // 60

        # –ó–Ω–∞–∫ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö
        sign = "+" if offset_hours >= 0 else ""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å–º–µ—â–µ–Ω–∏—è
        if offset_minutes == 0:
            offset_str = f"GMT{sign}{offset_hours}"
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—É—Ç—ã —Å –Ω—É–ª–µ–º
            offset_str = f"GMT{sign}{offset_hours}:{offset_minutes:02}"

        # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–º–µ—â–µ–Ω–∏–µ GMT
        return f" ({offset_str})"

    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        return ""


async def detect_xray_client():
    cmd = "docker ps --format '{{.Names}} {{.Image}}'"
    try:
        process = await asyncio.create_subprocess_shell(
            cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE
        )
        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            error_msg = stderr.decode('utf-8', 'ignore').strip()
            logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 'docker ps': {error_msg}")
            raise Exception(
                get_text(
                    "utils_docker_ps_error",
                    config.DEFAULT_LANGUAGE,
                    error=escape_html(error_msg)))

        containers = stdout.decode('utf-8', 'ignore').strip().split('\n')
        if not containers or containers == ['']:
            logging.warning(
                "detect_xray_client: 'docker ps' –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")
            return None, None

        for line in containers:
            if not line:
                continue
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è, —É—á–∏—Ç—ã–≤–∞—è
                # –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–±—Ä–∞–∑–∞—Ö
                parts = line.strip().split(maxsplit=1)
                if len(parts) != 2:
                    continue
                name, image = parts
                image_lower = image.lower()

                # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Amnezia
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ –∏–º–µ–Ω–∏ (–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
                if name == 'amnezia-xray':
                    logging.info(
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω Amnezia (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ –∏–º–µ–Ω–∏: {name}, –æ–±—Ä–∞–∑: {image})")
                    return "amnezia", name
                # –ü–æ—Ç–æ–º –ø–æ –æ–±—Ä–∞–∑—É (–∏—Å–∫–ª—é—á–∞—è awg)
                if 'amnezia' in image_lower and 'xray' in image_lower and 'awg' not in image_lower and 'wireguard' not in image_lower:
                    logging.info(
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω Amnezia (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–æ –æ–±—Ä–∞–∑—É: {name}, –æ–±—Ä–∞–∑: {image})")
                    return "amnezia", name

                # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Marzban
                if 'ghcr.io/gozargah/marzban:' in image_lower or name.startswith(
                        'marzban-'):
                    logging.info(
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω Marzban (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: {name}, –æ–±—Ä–∞–∑: {image})")
                    return "marzban", name

            except Exception as e:
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                # —Ü–∏–∫–ª
                logging.warning(
                    f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ docker ps: '{line}'. –û—à–∏–±–∫–∞: {e}")
                continue

        logging.warning(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Xray (Marzban, Amnezia).")
        return None, None
    except FileNotFoundError:
        logging.error(
            "–ö–æ–º–∞–Ω–¥–∞ 'docker' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        raise Exception(
            get_text(
                "utils_docker_ps_error",
                config.DEFAULT_LANGUAGE,
                error="Command 'docker' not found."))
    except Exception as e:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º logging.exception –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–π—Å–±–µ–∫–∞
        logging.exception(
            f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ 'docker ps': {e}")
        raise Exception(
            get_text(
                "utils_docker_ps_error",
                config.DEFAULT_LANGUAGE,
                error=escape_html(
                    str(e))))


async def initial_restart_check(bot: Bot):
    if os.path.exists(RESTART_FLAG_FILE):
        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {RESTART_FLAG_FILE}")
        chat_id = None
        message_id = None
        content = "N/A"
        try:
            with open(RESTART_FLAG_FILE, "r") as f:
                content = f.read().strip()
                if ':' not in content:
                    raise ValueError(
                        "Invalid content in restart flag file (missing colon).")
                chat_id_str, message_id_str = content.split(':', 1)
                chat_id = int(chat_id_str)
                message_id = int(message_id_str)

            lang = get_user_lang(chat_id)  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text_to_send = get_text(
                "utils_bot_restarted",
                lang)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            # —Å–æ–æ–±—â–µ–Ω–∏—è
            await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text_to_send)
            logging.info(
                f"–£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –≤ —á–∞—Ç–µ ID: {chat_id}, —Å–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}")

        except FileNotFoundError:
            logging.info("Restart flag file disappeared before processing.")
        except (ValueError, TypeError) as ve:  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
            logging.error(
                f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∞–π–ª–µ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ ('{content}'): {ve}")
        except TelegramBadRequest as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
            if "message to edit not found" in str(e).lower(
            ) or "message can't be edited" in str(e).lower():
                logging.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ({chat_id}:{message_id}, –≤–µ—Ä–æ—è—Ç–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ): {e}")
            else:
                logging.error(
                    f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        except Exception as e:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º exception
            logging.exception(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")
        finally:
            try:
                os.remove(RESTART_FLAG_FILE)
                logging.info(
                    f"–§–∞–π–ª —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —É–¥–∞–ª–µ–Ω: {RESTART_FLAG_FILE}")
            except OSError as e:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "No such file or directory", –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ
                # —É–¥–∞–ª–µ–Ω
                if e.errno != 2:  # errno.ENOENT
                    logging.error(
                        f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")


async def initial_reboot_check(bot: Bot):
    if os.path.exists(REBOOT_FLAG_FILE):
        logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {REBOOT_FLAG_FILE}")
        user_id = None
        user_id_str = "N/A"
        try:
            with open(REBOOT_FLAG_FILE, "r") as f:
                user_id_str = f.read().strip()
                if not user_id_str.isdigit():
                    raise ValueError(
                        "Invalid content in reboot flag file (not a digit).")
                user_id = int(user_id_str)

            lang = get_user_lang(user_id)  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫
            text_to_send = get_text(
                "utils_server_rebooted",
                lang)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —è–∑—ã–∫
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ä—ã—Ö –Ω–µ—Ç
            await bot.send_message(chat_id=user_id, text=text_to_send, parse_mode="HTML")
            logging.info(
                f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID: {user_id}")
        except FileNotFoundError:
            logging.info("Reboot flag file disappeared before processing.")
        except (ValueError, TypeError) as ve:  # –û–±—ä–µ–¥–∏–Ω—è–µ–º
            logging.error(
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ ('{user_id_str}'): {ve}")
        except TelegramBadRequest as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —á–∞—Ç
            # –Ω–µ –Ω–∞–π–¥–µ–Ω
            if "chat not found" in str(e).lower(
            ) or "bot was blocked by the user" in str(e).lower():
                logging.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_str}: {e}")
            else:
                logging.error(
                    f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ: {e}")
        except Exception as e:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º exception
            logging.exception(
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        finally:
            try:
                os.remove(REBOOT_FLAG_FILE)
                logging.info(
                    f"–§–∞–π–ª —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —É–¥–∞–ª–µ–Ω: {REBOOT_FLAG_FILE}")
            except OSError as e:
                if e.errno != 2:  # errno.ENOENT
                    logging.error(
                        f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")