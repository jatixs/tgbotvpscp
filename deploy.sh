#!/bin/bash

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_INSTALL_PATH="/opt/tg-bot"
SERVICE_NAME="tg-bot"
WATCHDOG_SERVICE_NAME="tg-watchdog"
SERVICE_USER="tgbot"
PYTHON_BIN="/usr/bin/python3"
VENV_PATH="${BOT_INSTALL_PATH}/venv"

# --- GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –í–µ—Ç–∫–∞ ---
GITHUB_REPO="jatixs/tgbotvpscp"
GIT_BRANCH="${1:-main}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º $1 –∏–ª–∏ 'main' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
GITHUB_REPO_URL="https://github.com/${GITHUB_REPO}.git"

# --- –¶–≤–µ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ ---
C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BLUE='\033[0;34m'
C_CYAN='\033[0;36m'
C_BOLD='\033[1m'

msg_info() { echo -e "${C_CYAN}üîµ $1${C_RESET}"; }
msg_success() { echo -e "${C_GREEN}‚úÖ $1${C_RESET}"; }
msg_warning() { echo -e "${C_YELLOW}‚ö†Ô∏è  $1${C_RESET}"; }
msg_error() { echo -e "${C_RED}‚ùå $1${C_RESET}"; }
msg_question() { read -p "$(echo -e "${C_YELLOW}‚ùì $1${C_RESET}")" $2; }

spinner() {
    local pid=$1
    local msg=$2
    local spin='|/-\'
    local i=0
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) %4 ))
        printf "\r${C_BLUE}‚è≥ ${spin:$i:1} ${msg}...${C_RESET}"
        sleep .1
    done
    printf "\r"
}

run_with_spinner() {
    local msg=$1
    shift
    "$@" >> /tmp/${SERVICE_NAME}_install.log 2>&1 &
    local pid=$!
    spinner "$msg" "$@"
    wait $pid
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        msg_error "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è '$msg'. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $exit_code"
        msg_error "–°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π: /tmp/${SERVICE_NAME}_install.log"
    fi
    return $exit_code
}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ (–¥–ª—è install_extras) ---
if command -v curl &> /dev/null; then
    DOWNLOADER="curl -sSLf"
    DOWNLOADER_PIPE="curl -s"
else
    msg_error "Curl –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ curl (sudo apt install curl) –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
    exit 1
fi

# --- (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ---
INSTALL_STATUS="NOT_FOUND"
STATUS_MESSAGE="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å."

check_integrity() {
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -d "${BOT_INSTALL_PATH}" ]; then
        INSTALL_STATUS="NOT_FOUND"
        STATUS_MESSAGE="–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        return
    fi

    # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–∞—Å—Ç–∏—á–Ω–æ–π –∏ –∏—â–µ–º –æ—à–∏–±–∫–∏
    INSTALL_STATUS="OK" # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    local errors=()

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
    if [ ! -d "${BOT_INSTALL_PATH}/.git" ]; then
        errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .git (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)")
        INSTALL_STATUS="PARTIAL"
    fi

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if [ ! -f "${BOT_INSTALL_PATH}/bot.py" ] || \
       [ ! -f "${BOT_INSTALL_PATH}/watchdog.py" ] || \
       [ ! -d "${BOT_INSTALL_PATH}/core" ] || \
       [ ! -d "${BOT_INSTALL_PATH}/modules" ]; then
         errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (bot.py, core/, modules/)")
         INSTALL_STATUS="PARTIAL"
    fi

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Venv
    if [ ! -f "${VENV_PATH}/bin/python" ]; then
        errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç venv (${VENV_PATH}/bin/python)")
        INSTALL_STATUS="PARTIAL"
    fi

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    if [ ! -f "${BOT_INSTALL_PATH}/.env" ]; then
        errors+=("- (–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ) –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env")
        # –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ PARTIAL, —Ç.–∫. —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    fi

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
    if ! systemctl list-unit-files | grep -q "${SERVICE_NAME}.service"; then
         errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª ${SERVICE_NAME}.service")
         INSTALL_STATUS="PARTIAL"
    fi
     if ! systemctl list-unit-files | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then
         errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª ${WATCHDOG_SERVICE_NAME}.service")
         INSTALL_STATUS="PARTIAL"
    fi

    # 7. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if [ "$INSTALL_STATUS" == "OK" ]; then
        local bot_status
        local watchdog_status
        
        if systemctl is-active --quiet ${SERVICE_NAME}.service; then
            bot_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"
        else
            bot_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"
        fi
        
        if systemctl is-active --quiet ${WATCHDOG_SERVICE_NAME}.service; then
            watchdog_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"
        else
            watchdog_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"
        fi
        
        STATUS_MESSAGE="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OK (–ë–æ—Ç: ${bot_status} | Watchdog: ${watchdog_status})"
        
        if [[ " ${errors[*]} " =~ " .env" ]]; then
            STATUS_MESSAGE+=" ${C_YELLOW}(–ù–µ—Ç .env!)${C_RESET}"
        fi
        
    elif [ "$INSTALL_STATUS" == "PARTIAL" ]; then
        STATUS_MESSAGE="${C_RED}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.${C_RESET}\n  –ü—Ä–æ–±–ª–µ–º–∞: ${errors[0]}"
    fi
}


# --- (–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ install_*, create_service_*, uninstall_bot, update_bot... –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
install_extras() {
    local packages_to_install=()
    if ! command -v fail2ban-client &> /dev/null; then
        msg_question "Fail2Ban –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_F2B
        if [[ "$INSTALL_F2B" =~ ^[Yy]$ ]]; then
            packages_to_install+=("fail2ban")
        else msg_info "–ü—Ä–æ–ø—É—Å–∫ Fail2Ban."; fi
    else msg_success "Fail2Ban —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; fi

    if ! command -v speedtest &> /dev/null; then
        msg_question "Speedtest CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_SPEEDTEST
        if [[ "$INSTALL_SPEEDTEST" =~ ^[Yy]$ ]]; then
            packages_to_install+=("speedtest") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–∞–ø–∞–∫–µ—Ç ookla
        else msg_info "–ü—Ä–æ–ø—É—Å–∫ Speedtest CLI."; fi
    else msg_success "Speedtest CLI —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; fi

    if [ ${#packages_to_install[@]} -gt 0 ]; then
        msg_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${packages_to_install[*]}"
        if [[ " ${packages_to_install[*]} " =~ " speedtest " ]]; then
             run_with_spinner "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Speedtest" bash -c "${DOWNLOADER_PIPE} https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash"
             if [ -f /etc/os-release ]; then . /etc/os-release; if [ "$VERSION_CODENAME" == "noble" ]; then sudo sed -i 's/noble/jammy/g' /etc/apt/sources.list.d/ookla_speedtest-cli.list; fi; fi
        fi
        run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ" sudo apt-get update -y
        run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get install -y "${packages_to_install[@]}"
        if [ $? -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ–ø. –ø–∞–∫–µ—Ç–æ–≤."; exit 1; fi
        if [[ " ${packages_to_install[*]} " =~ " fail2ban " ]]; then
            sudo systemctl enable fail2ban &> /dev/null
            sudo systemctl start fail2ban &> /dev/null
            msg_success "Fail2Ban —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."
        fi
        msg_success "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
    fi
}

common_install_steps() {
    msg_info "1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get update -y || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"; exit 1; }
    run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (python3, pip, venv, git, curl, sudo)" sudo apt-get install -y python3 python3-pip python3-venv git curl wget sudo || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"; exit 1; }
    install_extras
}

install_logic() {
    local mode=$1
    local exec_user_cmd=""
    local owner="root:root"
    local owner_user="root" 

    if [ "$mode" == "secure" ]; then
        msg_info "2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}'..."
        if ! id "${SERVICE_USER}" &>/dev/null; then
            sudo useradd -r -s /bin/false -d ${BOT_INSTALL_PATH} ${SERVICE_USER} || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SERVICE_USER}"; exit 1; }
        fi
        sudo mkdir -p ${BOT_INSTALL_PATH}
        sudo chown -R ${SERVICE_USER}:${SERVICE_USER} ${BOT_INSTALL_PATH}
        msg_info "3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–≤–µ—Ç–∫–∞ ${GIT_BRANCH}) –æ—Ç –∏–º–µ–Ω–∏ ${SERVICE_USER}..."
        run_with_spinner "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" \
            sudo -u ${SERVICE_USER} git clone --branch "${GIT_BRANCH}" "${GITHUB_REPO_URL}" "${BOT_INSTALL_PATH}"
        if [ $? -ne 0 ]; then msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –∏–º—è –≤–µ—Ç–∫–∏."; exit 1; fi
        exec_user_cmd="sudo -u ${SERVICE_USER}"
        owner="${SERVICE_USER}:${SERVICE_USER}"
        owner_user=${SERVICE_USER}
    else # Root mode
        msg_info "2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞..."
        sudo mkdir -p ${BOT_INSTALL_PATH}
        msg_info "3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–≤–µ—Ç–∫–∞ ${GIT_BRANCH}) –æ—Ç –∏–º–µ–Ω–∏ root..."
        run_with_spinner "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" \
            sudo git clone --branch "${GIT_BRANCH}" "${GITHUB_REPO_URL}" "${BOT_INSTALL_PATH}"
        if [ $? -ne 0 ]; then msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –∏–º—è –≤–µ—Ç–∫–∏."; exit 1; fi
        exec_user_cmd=""
        owner="root:root"
        owner_user="root"
    fi

    msg_info "4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python..."
    if [ ! -d "${VENV_PATH}" ]; then
        run_with_spinner "–°–æ–∑–¥–∞–Ω–∏–µ venv" $exec_user_cmd ${PYTHON_BIN} -m venv "${VENV_PATH}" || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å venv"; exit 1; }
    fi
    run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip" $exec_user_cmd "${VENV_PATH}/bin/pip" install --upgrade pip || msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..."
    run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python" $exec_user_cmd "${VENV_PATH}/bin/pip" install -r "${BOT_INSTALL_PATH}/requirements.txt" || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python."; exit 1; }

    msg_info "5. –°–æ–∑–¥–∞–Ω–∏–µ .gitignore, logs/ –∏ config/..."
    sudo -u ${owner_user} bash -c "cat > ${BOT_INSTALL_PATH}/.gitignore" <<EOF
/venv/
/__pycache__/
*.pyc
/.env
/config/
/logs/
*.log
EOF
    sudo chmod 644 "${BOT_INSTALL_PATH}/.gitignore"
    sudo -u ${owner_user} mkdir -p "${BOT_INSTALL_PATH}/logs" "${BOT_INSTALL_PATH}/config"

    msg_info "6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    msg_question "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Bot Token: " TG_BOT_TOKEN_USER
    msg_question "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram User ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã): " TG_ADMIN_ID_USER
    msg_question "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Username (–±–µ–∑ @, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): " TG_ADMIN_USERNAME_USER

    sudo bash -c "cat > ${BOT_INSTALL_PATH}/.env" <<EOF
TG_BOT_TOKEN="${TG_BOT_TOKEN_USER}"
TG_ADMIN_ID="${TG_ADMIN_ID_USER}"
TG_ADMIN_USERNAME="${TG_ADMIN_USERNAME_USER}"
INSTALL_MODE="${mode}"
EOF
    sudo chown ${owner} "${BOT_INSTALL_PATH}/.env"
    sudo chmod 600 "${BOT_INSTALL_PATH}/.env"

    if [ "$mode" == "root" ]; then
      msg_info "7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ sudo –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è root)..."
      SUDOERS_FILE="/etc/sudoers.d/98-${SERVICE_NAME}-root"
      sudo tee ${SUDOERS_FILE} > /dev/null <<EOF
root ALL=(ALL) NOPASSWD: /bin/systemctl restart ${SERVICE_NAME}.service
root ALL=(ALL) NOPASSWD: /bin/systemctl restart ${WATCHDOG_SERVICE_NAME}.service
root ALL=(ALL) NOPASSWD: /sbin/reboot
EOF
      sudo chmod 440 ${SUDOERS_FILE}
    elif [ "$mode" == "secure" ]; then
      SUDOERS_WATCHDOG="/etc/sudoers.d/99-${WATCHDOG_SERVICE_NAME}-restart"
      sudo tee ${SUDOERS_WATCHDOG} > /dev/null <<EOF
Defaults:${SERVICE_USER} !requiretty
${SERVICE_USER} ALL=(root) NOPASSWD: /bin/systemctl restart ${SERVICE_NAME}.service
EOF
       sudo chmod 440 ${SUDOERS_WATCHDOG}
       msg_info "7. –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∞ sudo –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–∑ watchdog."
    fi

    create_and_start_service "${SERVICE_NAME}" "${BOT_INSTALL_PATH}/bot.py" "${mode}" "Telegram Bot"
    create_and_start_service "${WATCHDOG_SERVICE_NAME}" "${BOT_INSTALL_PATH}/watchdog.py" "root" "Watchdog"

    local server_ip=$(curl -s 4.ipinfo.io/ip || echo "YOUR_SERVER_IP")
    echo ""
    echo "-----------------------------------------------------"
    msg_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    msg_info "   –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (UptimeRobot)"
    msg_info "   –Ω–∞ IP: ${server_ip}"
    echo "-----------------------------------------------------"
}

install_secure() {
    echo -e "\n${C_BOLD}=== –ù–∞—á–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å) ===${C_RESET}"
    common_install_steps
    install_logic "secure"
}

install_root() {
    echo -e "\n${C_BOLD}=== –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –∏–º–µ–Ω–∏ Root ===${C_RESET}"
    common_install_steps
    install_logic "root"
}

create_and_start_service() {
    local svc_name=$1
    local script_path=$2
    local install_mode=$3
    local description=$4
    local user="root"
    local group="root"
    local env_file_line=""
    local desc_mode_suffix=""
    local after_line="After=network.target"
    local requires_line=""

    if [ "$install_mode" == "secure" ] && [ "$svc_name" == "$SERVICE_NAME" ]; then
        user=${SERVICE_USER}
        group=${SERVICE_USER}
        env_file_line="EnvironmentFile=${BOT_INSTALL_PATH}/.env"
        desc_mode_suffix="(Secure Mode)"
    elif [ "$svc_name" == "$SERVICE_NAME" ]; then
        env_file_line="EnvironmentFile=${BOT_INSTALL_PATH}/.env"
        desc_mode_suffix="(Root Mode)"
    elif [ "$svc_name" == "$WATCHDOG_SERVICE_NAME" ]; then
         after_line="After=network.target ${SERVICE_NAME}.service"
    fi

    msg_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è ${svc_name}..."
    SERVICE_FILE="/etc/systemd/system/${svc_name}.service"
    sudo tee ${SERVICE_FILE} > /dev/null <<EOF
[Unit]
Description=${description} Service ${desc_mode_suffix}
${after_line}
${requires_line}

[Service]
Type=simple
User=${user}
Group=${group}
WorkingDirectory=${BOT_INSTALL_PATH}
${env_file_line}
ExecStart=${VENV_PATH}/bin/python ${script_path}
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

    msg_info "–ó–∞–ø—É—Å–∫ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ ${svc_name}..."
    sudo systemctl daemon-reload
    sudo systemctl enable ${svc_name}.service &> /dev/null
    run_with_spinner "–ó–∞–ø—É—Å–∫ ${svc_name}" sudo systemctl start ${svc_name}

    sleep 2
    if sudo systemctl is-active --quiet ${svc_name}.service; then
        msg_success "–°–µ—Ä–≤–∏—Å ${svc_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"
        msg_info "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: sudo systemctl status ${svc_name}"
    else
        msg_error "–°–µ—Ä–≤–∏—Å ${svc_name} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: sudo journalctl -u ${svc_name} -n 50 --no-pager"
        if [ "$svc_name" == "$SERVICE_NAME" ]; then exit 1; fi
    fi
}

uninstall_bot() {
    echo -e "\n${C_BOLD}=== –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è Telegram-–±–æ—Ç–∞ –∏ Watchdog ===${C_RESET}"
    msg_info "1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then
        sudo systemctl stop ${SERVICE_NAME} &> /dev/null
        sudo systemctl disable ${SERVICE_NAME} &> /dev/null
    fi
    if systemctl list-units --full -all | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then
        sudo systemctl stop ${WATCHDOG_SERVICE_NAME} &> /dev/null
        sudo systemctl disable ${WATCHDOG_SERVICE_NAME} &> /dev/null
    fi
    msg_info "2. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    sudo rm -f "/etc/systemd/system/${SERVICE_NAME}.service"
    sudo rm -f "/etc/systemd/system/${WATCHDOG_SERVICE_NAME}.service"
    sudo rm -f "/etc/sudoers.d/98-${SERVICE_NAME}-root"
    sudo rm -f "/etc/sudoers.d/99-${WATCHDOG_SERVICE_NAME}-restart"
    sudo systemctl daemon-reload
    msg_info "3. –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±–æ—Ç–æ–º..."
    sudo rm -rf "${BOT_INSTALL_PATH}"
    msg_info "4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}' (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)..."
    if id "${SERVICE_USER}" &>/dev/null; then
        sudo userdel -r "${SERVICE_USER}" &> /dev/null || msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SERVICE_USER}."
    fi
    msg_success "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
}

update_bot() {
    echo -e "\n${C_BOLD}=== –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏ watchdog ===${C_RESET}"
    if [ ! -d "${BOT_INSTALL_PATH}/.git" ]; then 
        msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (git) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ ${BOT_INSTALL_PATH}."
        msg_error "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞."
        return 1
    fi

    local exec_user_cmd=""
    if [ -f "${BOT_INSTALL_PATH}/.env" ]; then
        INSTALL_MODE_DETECTED=$(grep '^INSTALL_MODE=' "${BOT_INSTALL_PATH}/.env" | cut -d'=' -f2 | tr -d '"')
        if [ "$INSTALL_MODE_DETECTED" == "secure" ]; then
             exec_user_cmd="sudo -u ${SERVICE_USER}"
        fi
    fi

    msg_warning "–í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö .py, core/, modules/."
    msg_warning "–§–∞–π–ª—ã .env, config/ –∏ logs/ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ .gitignore)."
    msg_info "1. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Git (–≤–µ—Ç–∫–∞ ${GIT_BRANCH})..."
    
    pushd "${BOT_INSTALL_PATH}" > /dev/null
    run_with_spinner "–ü–æ–ª—É—á–µ–Ω–∏–µ (fetch) –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞" $exec_user_cmd git fetch origin
    run_with_spinner "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å (reset) –¥–æ origin/${GIT_BRANCH}" $exec_user_cmd git reset --hard "origin/${GIT_BRANCH}"
    local update_status=$?
    popd > /dev/null
    
    if [ $update_status -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è git fetch/reset."; return 1; fi
    msg_success "–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."

    msg_info "2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python..."
    run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π" $exec_user_cmd "${VENV_PATH}/bin/pip" install -r "${BOT_INSTALL_PATH}/requirements.txt" --upgrade
    if [ $? -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python."; return 1; fi

    msg_info "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if sudo systemctl restart ${SERVICE_NAME}; then 
        msg_success "–°–µ—Ä–≤–∏—Å ${SERVICE_NAME} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
    else 
        msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${SERVICE_NAME}. –õ–æ–≥–∏: sudo journalctl -u ${SERVICE_NAME} -n 50 --no-pager"
        return 1
    fi
    sleep 1
    if sudo systemctl restart ${WATCHDOG_SERVICE_NAME}; then 
        msg_success "–°–µ—Ä–≤–∏—Å ${WATCHDOG_SERVICE_NAME} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."
    else 
        msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${WATCHDOG_SERVICE_NAME}. –õ–æ–≥–∏: sudo journalctl -u ${WATCHDOG_SERVICE_NAME} -n 50 --no-pager"
    fi
    echo -e "\n${C_GREEN}${C_BOLD}üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${C_RESET}\n"
}

# --- (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø) –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
main_menu() {
    # –≠—Ç–æ –º–µ–Ω—é –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –£–ñ–ï –ï–°–¢–¨
    while true; do
        clear
        echo -e "${C_BLUE}${C_BOLD}"
        echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
        echo "‚ïë             VPS Manager Telegram Bot                 ‚ïë"
        echo "‚ïë                   by Jatix                           ‚ïë"
        echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
        echo -e "${C_RESET}"
        echo -e "  –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –≤–µ—Ç–∫–∞: ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        
        # --- (–ù–û–í–´–ô) –ë–ª–æ–∫ —Å—Ç–∞—Ç—É—Å–∞ ---
        check_integrity # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–π —Ä–∞–∑
        echo "--------------------------------------------------------"
        echo -n -e "  –°—Ç–∞—Ç—É—Å: "
        if [ "$INSTALL_STATUS" == "OK" ]; then
            echo -e "${C_GREEN}${STATUS_MESSAGE}${C_RESET}"
        else
            echo -e "${C_RED}${STATUS_MESSAGE}${C_RESET}"
            msg_warning "  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞."
        fi
        echo "--------------------------------------------------------"

        echo -e "${C_GREEN}  1)${C_RESET} ${C_BOLD}–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Secure):${C_RESET} –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π"
        echo -e "${C_YELLOW}  2)${C_RESET} ${C_BOLD}–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Root):${C_RESET}   –ú–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"
        echo -e "${C_CYAN}  3)${C_RESET} ${C_BOLD}–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞:${C_RESET}         –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏ watchdog"
        echo -e "${C_RED}  4)${C_RESET} ${C_BOLD}–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞:${C_RESET}          –ü–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–∞"
        echo -e "  5) ${C_BOLD}–í—ã—Ö–æ–¥${C_RESET}"
        echo "--------------------------------------------------------"
        read -p "$(echo -e "${C_BOLD}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏ [1-5]: ${C_RESET}")" choice

        case $choice in
            1) 
                rm -f /tmp/${SERVICE_NAME}_install.log
                msg_question "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–£–°–¢–ê–ù–û–í–ò–¢–¨ (secure)? (y/n): " confirm
                if [[ "$confirm" =~ ^[Yy]$ ]]; then
                    uninstall_bot
                    install_secure
                else
                    msg_info "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
                fi
                ;;
            2) 
                rm -f /tmp/${SERVICE_NAME}_install.log
                msg_question "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–£–°–¢–ê–ù–û–í–ò–¢–¨ (root)? (y/n): " confirm
                if [[ "$confirm" =~ ^[Yy]$ ]]; then
                    uninstall_bot
                    install_root
                else
                    msg_info "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
                fi
                ;;
            3) 
                rm -f /tmp/${SERVICE_NAME}_install.log
                update_bot 
                ;;
            4)
                msg_question "–í–´ –£–í–ï–†–ï–ù–´, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ü–û–õ–ù–û–°–¢–¨–Æ —É–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞? (y/n): " confirm_uninstall
                if [[ "$confirm_uninstall" =~ ^[Yy]$ ]]; then
                    uninstall_bot
                    msg_info "–ë–æ—Ç —É–¥–∞–ª–µ–Ω. –í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞."
                    return # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ (–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏)
                else
                    msg_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
                fi
                ;;
            5) break ;;
            *) msg_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." ;;
        esac
        
        if [ "$choice" != "4" ]; then
            echo
            read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
        fi
    done
}

# --- (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø) –ì–ª–∞–≤–Ω—ã–π "–†–æ—É—Ç–µ—Ä" ---
main() {
    clear
    msg_info "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º (–í–µ—Ç–∫–∞: ${GIT_BRANCH})..."
    check_integrity
    
    if [ "$INSTALL_STATUS" == "NOT_FOUND" ] || [ "$INSTALL_STATUS" == "PARTIAL" ]; then
        
        if [ "$INSTALL_STATUS" == "PARTIAL" ]; then
            msg_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞."
            msg_warning "${STATUS_MESSAGE}"
            msg_question "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞. –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? (y/n): " confirm_delete
            if [[ "$confirm_delete" =~ ^[Yy]$ ]]; then
                uninstall_bot
            else
                msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è. –í—ã—Ö–æ–¥."
                exit 1
            fi
        fi
        
        # –¢–µ–ø–µ—Ä—å INSTALL_STATUS == "NOT_FOUND" (–ª–∏–±–æ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ PARTIAL)
        msg_info "–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        echo "--------------------------------------------------------"
        echo -e "${C_GREEN}  1)${C_RESET} ${C_BOLD}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Secure):${C_RESET} –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º"
        echo -e "${C_YELLOW}  2)${C_RESET} ${C_BOLD}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Root):${C_RESET}   –ú–µ–Ω–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π, –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"
        echo -e "  3) ${C_BOLD}–í—ã—Ö–æ–¥${C_RESET}"
        echo "--------------------------------------------------------"
        read -p "$(echo -e "${C_BOLD}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏ [1-3]: ${C_RESET}")" install_choice
        
        local install_done=false
        rm -f /tmp/${SERVICE_NAME}_install.log # –û—á–∏—â–∞–µ–º –ª–æ–≥
        
        case $install_choice in
            1) 
                install_secure
                install_done=true
                ;;
            2) 
                install_root
                install_done=true
                ;;
            *)
                msg_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã—Ö–æ–¥."
                exit 0
                ;;
        esac
        
        if [ "$install_done" = true ]; then
            msg_info "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
            check_integrity
            if [ "$INSTALL_STATUS" == "OK" ]; then
                msg_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞. –ó–∞–ø—É—Å–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
                read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            else
                msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞."
                msg_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥ /tmp/${SERVICE_NAME}_install.log –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                exit 1
            fi
        fi
        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –º—ã –ø–æ–ø–∞–¥–∞–µ–º –≤ main_menu()
        
    fi
    
    # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ (INSTALL_STATUS == "OK"), —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω—é
    main_menu
    echo -e "\n${C_CYAN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${C_RESET}"
}


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Root ---
if [ "$(id -u)" -ne 0 ]; then
  msg_error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ root –∏–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ sudo."
  exit 1
fi

# --- –ó–∞–ø—É—Å–∫ ---
main