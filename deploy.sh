#!/bin/bash

# --- –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ---
orig_arg1="$1"

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_INSTALL_PATH="/opt/tg-bot"
SERVICE_NAME="tg-bot"
WATCHDOG_SERVICE_NAME="tg-watchdog"
SERVICE_USER="tgbot"
PYTHON_BIN="/usr/bin/python3"
VENV_PATH="${BOT_INSTALL_PATH}/venv"

# --- GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –í–µ—Ç–∫–∞ ---
GITHUB_REPO="jatixs/tgbotvpscp"
# –ò—Å–ø–æ–ª—å–∑—É–µ–º $orig_arg1 –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ 'main'.
GIT_BRANCH="${orig_arg1:-main}"
GITHUB_REPO_URL="https://github.com/${GITHUB_REPO}.git"

# --- –¶–≤–µ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ ---
C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BLUE='\033[0;34m'
C_CYAN='\033[0;36m'
C_BOLD='\033[1m'

msg_info() { echo -e "${C_CYAN}üîµ $1${C_RESET}"; }
msg_success() { echo -e "${C_GREEN}‚úÖ $1${C_RESET}"; }
msg_warning() { echo -e "${C_YELLOW}‚ö†Ô∏è  $1${C_RESET}"; }
msg_error() { echo -e "${C_RED}‚ùå $1${C_RESET}"; }
msg_question() { read -p "$(echo -e "${C_YELLOW}‚ùì $1${C_RESET}")" $2; }

spinner() {
    local pid=$1
    local msg=$2
    local spin='|/-\'
    local i=0
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) %4 ))
        printf "\r${C_BLUE}‚è≥ ${spin:$i:1} ${msg}...${C_RESET}"
        sleep .1
    done
    printf "\r"
}

run_with_spinner() {
    local msg=$1
    shift
    "$@" >> /tmp/${SERVICE_NAME}_install.log 2>&1 &
    local pid=$!
    spinner "$pid" "$msg" # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è spinner
    wait $pid
    local exit_code=$?
    # –£–±–∏—Ä–∞–µ–º \r –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–∫–∏/—É—Å–ø–µ—Ö–∞
    echo -ne "\033[2K\r"
    if [ $exit_code -ne 0 ]; then
        msg_error "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è '$msg'. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $exit_code"
        msg_error "–°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π: /tmp/${SERVICE_NAME}_install.log"
    # else # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    #    msg_success "'$msg' –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
    fi
    return $exit_code
}


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ ---
if command -v wget &> /dev/null; then
    DOWNLOADER="wget -qO-"
    # DOWNLOADER_PIPE="wget -qO-" # wget –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–∞–π–ø–∞–º–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤, curl –ª—É—á—à–µ
elif command -v curl &> /dev/null; then
    DOWNLOADER="curl -sSLf"
    # DOWNLOADER_PIPE="curl -s" # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ
else
    msg_error "–ù–∏ wget, –Ω–∏ curl –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö (sudo apt install curl wget) –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
    exit 1
fi
# –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –ø–∞–π–ø, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ wget
if command -v curl &> /dev/null; then DOWNLOADER_PIPE="curl -s"; else DOWNLOADER_PIPE="wget -qO-"; fi


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ---
INSTALL_STATUS="NOT_FOUND"
STATUS_MESSAGE="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å."

check_integrity() {
    if [ ! -d "${BOT_INSTALL_PATH}" ]; then
        INSTALL_STATUS="NOT_FOUND"
        STATUS_MESSAGE="–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        return
    fi
    INSTALL_STATUS="OK" # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    local errors=()
    if [ ! -d "${BOT_INSTALL_PATH}/.git" ]; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .git (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)"); INSTALL_STATUS="PARTIAL"; fi
    if [ ! -f "${BOT_INSTALL_PATH}/bot.py" ] || \
       [ ! -f "${BOT_INSTALL_PATH}/watchdog.py" ] || \
       [ ! -d "${BOT_INSTALL_PATH}/core" ] || \
       [ ! -d "${BOT_INSTALL_PATH}/modules" ]; then
         errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (bot.py, core/, modules/)")
         INSTALL_STATUS="PARTIAL"
    fi
    if [ ! -f "${VENV_PATH}/bin/python" ]; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç venv (${VENV_PATH}/bin/python)"); INSTALL_STATUS="PARTIAL"; fi
    if [ ! -f "${BOT_INSTALL_PATH}/.env" ]; then errors+=("- (–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ) –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env"); fi
    if ! systemctl list-unit-files | grep -q "${SERVICE_NAME}.service"; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª ${SERVICE_NAME}.service"); INSTALL_STATUS="PARTIAL"; fi
    if ! systemctl list-unit-files | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª ${WATCHDOG_SERVICE_NAME}.service"); INSTALL_STATUS="PARTIAL"; fi

    if [ "$INSTALL_STATUS" == "OK" ]; then
        local bot_status; local watchdog_status
        if systemctl is-active --quiet ${SERVICE_NAME}.service; then bot_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else bot_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi
        if systemctl is-active --quiet ${WATCHDOG_SERVICE_NAME}.service; then watchdog_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else watchdog_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi
        STATUS_MESSAGE="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OK (–ë–æ—Ç: ${bot_status} | Watchdog: ${watchdog_status})"
        if [[ " ${errors[*]} " =~ " .env" ]]; then STATUS_MESSAGE+=" ${C_YELLOW}(–ù–µ—Ç .env!)${C_RESET}"; fi
    elif [ "$INSTALL_STATUS" == "PARTIAL" ]; then
        STATUS_MESSAGE="${C_RED}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.${C_RESET}\n  –ü—Ä–æ–±–ª–µ–º–∞: ${errors[0]}"
    fi
}

# --- –§—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
install_extras() {
    local packages_to_install=()
    if ! command -v fail2ban-client &> /dev/null; then msg_question "Fail2Ban –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_F2B; if [[ "$INSTALL_F2B" =~ ^[Yy]$ ]]; then packages_to_install+=("fail2ban"); else msg_info "–ü—Ä–æ–ø—É—Å–∫ Fail2Ban."; fi; else msg_success "Fail2Ban —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; fi
    if ! command -v speedtest &> /dev/null; then msg_question "Speedtest CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_SPEEDTEST; if [[ "$INSTALL_SPEEDTEST" =~ ^[Yy]$ ]]; then packages_to_install+=("speedtest-cli"); else msg_info "–ü—Ä–æ–ø—É—Å–∫ Speedtest CLI."; fi; else msg_success "Speedtest CLI —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; fi # –ò—Å–ø–æ–ª—å–∑—É–µ–º speedtest-cli –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ–ø–æ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if [ ${#packages_to_install[@