#!/bin/bash

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_INSTALL_PATH="/opt/tg-bot"
SERVICE_NAME="tg-bot"
WATCHDOG_SERVICE_NAME="tg-watchdog"
SERVICE_USER="tgbot"
PYTHON_BIN="/usr/bin/python3"
VENV_PATH="${BOT_INSTALL_PATH}/venv"

# --- GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –í–µ—Ç–∫–∞ ---
GITHUB_REPO="jatixs/tgbotvpscp"
GIT_BRANCH="${1:-main}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º $1 –∏–ª–∏ 'main' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
GITHUB_REPO_URL="https://github.com/${GITHUB_REPO}.git"

# --- –¶–≤–µ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ ---
C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BLUE='\033[0;34m'
C_CYAN='\033[0;36m'
C_BOLD='\033[1m'

msg_info() { echo -e "${C_CYAN}üîµ $1${C_RESET}"; }
msg_success() { echo -e "${C_GREEN}‚úÖ $1${C_RESET}"; }
msg_warning() { echo -e "${C_YELLOW}‚ö†Ô∏è  $1${C_RESET}"; }
msg_error() { echo -e "${C_RED}‚ùå $1${C_RESET}"; }
msg_question() { read -p "$(echo -e "${C_YELLOW}‚ùì $1${C_RESET}")" $2; }

spinner() {
    local pid=$1
    local msg=$2
    local spin='|/-\'
    local i=0
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) %4 ))
        printf "\r${C_BLUE}‚è≥ ${spin:$i:1} ${msg}...${C_RESET}"
        sleep .1
    done
    printf "\r"
}

run_with_spinner() {
    local msg=$1
    shift
    "$@" >> /tmp/${SERVICE_NAME}_install.log 2>&1 &
    local pid=$!
    spinner "$msg" "$@"
    wait $pid
    local exit_code=$?
    if [ $exit_code -ne 0 ]; then
        msg_error "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è '$msg'. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $exit_code"
        msg_error "–°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π: /tmp/${SERVICE_NAME}_install.log"
    fi
    return $exit_code
}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ (–¥–ª—è install_extras) ---
if command -v curl &> /dev/null; then
    DOWNLOADER="curl -sSLf"
    DOWNLOADER_PIPE="curl -s"
else
    msg_error "Curl –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ curl (sudo apt install curl) –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
    exit 1
fi

# --- (–ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø) –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ---
INSTALL_STATUS="NOT_FOUND"
STATUS_MESSAGE="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å."

check_integrity() {
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if [ ! -d "${BOT_INSTALL_PATH}" ]; then
        INSTALL_STATUS="NOT_FOUND"
        STATUS_MESSAGE="–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        return
    fi

    # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É —á–∞—Å—Ç–∏—á–Ω–æ–π –∏ –∏—â–µ–º –æ—à–∏–±–∫–∏
    INSTALL_STATUS="OK" # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    local errors=()

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Git
    if [ ! -d "${BOT_INSTALL_PATH}/.git" ]; then
        errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .git (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)")
        INSTALL_STATUS="PARTIAL"
    fi

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if [ ! -f "${BOT_INSTALL_PATH}/bot.py" ] || \
       [ ! -f "${BOT_INSTALL_PATH}/watchdog.py" ] || \
       [ ! -d "${BOT_INSTALL_PATH}/core" ] || \
       [ ! -d "${BOT_INSTALL_PATH}/modules" ]; then
         errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (bot.py, core/, modules/)")
         INSTALL_STATUS="PARTIAL"
    fi

    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Venv
    if [ ! -f "${VENV_PATH}/bin/python" ]; then
        errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç venv (${VENV_PATH}/bin/python)")
        INSTALL_STATUS="PARTIAL"
    fi

    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ .env (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ)
    if [ ! -f "${BOT_INSTALL_PATH}/.env" ]; then
        errors+=("- (–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ) –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env")
        # –ù–µ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ PARTIAL, —Ç.–∫. —Å–µ—Ä–≤–∏—Å—ã –º–æ–≥—É—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    fi

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤
    if ! systemctl list-unit-files | grep -q "${SERVICE_NAME}.service"; then
         errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª ${SERVICE_NAME}.service")
         INSTALL_STATUS="PARTIAL"
    fi
     if ! systemctl list-unit-files | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then
         errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª ${WATCHDOG_SERVICE_NAME}.service")
         INSTALL_STATUS="PARTIAL"
    fi

    # 7. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if [ "$INSTALL_STATUS" == "OK" ]; then
        local bot_status
        local watchdog_status
        
        if systemctl is-active --quiet ${SERVICE_NAME}.service; then
            bot_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"
        else
            bot_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"
        fi
        
        if systemctl is-active --quiet ${WATCHDOG_SERVICE_NAME}.service; then
            watchdog_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"
        else
            watchdog_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"
        fi
        
        STATUS_MESSAGE="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OK (–ë–æ—Ç: ${bot_status} | Watchdog: ${watchdog_status})"
        
        if [[ " ${errors[*]} " =~ " .env" ]]; then
            STATUS_MESSAGE+=" ${C_YELLOW}(–ù–µ—Ç .env!)${C_RESET}"
        fi
        
    elif [ "$INSTALL_STATUS" == "PARTIAL" ]; then
        STATUS_MESSAGE="${C_RED}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.${C_RESET}\n  –ü—Ä–æ–±–ª–µ–º–∞: ${errors[0]}"
    fi
}


# --- (–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ install_*, create_service_*, uninstall_bot, update_bot... –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
install_extras() {
    local packages_to_install=()
    if ! command -v fail2ban-client &> /dev/null; then
        msg_question "Fail2Ban –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_F2B
        if [[ "$INSTALL_F2B" =~ ^[Yy]$ ]]; then
            packages_to_install+=("fail2ban")
        else msg_info "–ü—Ä–æ–ø—É—Å–∫ Fail2Ban."; fi
    else msg_success "Fail2Ban —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; fi

    if ! command -v speedtest &> /dev/null; then
        msg_question "Speedtest CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_SPEEDTEST
        if [[ "$INSTALL_SPEEDTEST" =~ ^[Yy]$ ]]; then
            packages_to_install+=("speedtest") # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–∞–ø–∞–∫–µ—Ç ookla
        else msg_info "–ü—Ä–æ–ø—É—Å–∫ Speedtest CLI."; fi
    else msg_success "Speedtest CLI —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; fi

    if [ ${#packages_to_install[@]} -gt 0 ]; then
        msg_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${packages_to_install[*]}"
        if [[ " ${packages_to_install[*]} " =~ " speedtest " ]]; then
             run_with_spinner "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è Speedtest" bash -c "${DOWNLOADER_PIPE} https://packagecloud.io/install/repositories/ookla/speedtest-cli/script.deb.sh | sudo bash"
             if [ -f /etc/os-release ]; then . /etc/os-release; if [ "$VERSION_CODENAME" == "noble" ]; then sudo sed -i 's/noble/jammy/g' /etc/apt/sources.list.d/ookla_speedtest-cli.list; fi; fi
        fi
        run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ø–æ" sudo apt-get update -y
        run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get install -y "${packages_to_install[@]}"
        if [ $? -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ–ø. –ø–∞–∫–µ—Ç–æ–≤."; exit 1; fi
        if [[ " ${packages_to_install[*]} " =~ " fail2ban " ]]; then
            sudo systemctl enable fail2ban &> /dev/null
            sudo systemctl start fail2ban &> /dev/null
            msg_success "Fail2Ban —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."
        fi
        msg_success "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
    fi
}

common_install_steps() {
    msg_info "1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get update -y || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"; exit 1; }
    run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (python3, pip, venv, git, curl, sudo)" sudo apt-get install -y python3 python3-pip python3-venv git curl wget sudo || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"; exit 1; }
    install_extras
}

install_logic() {
    local mode=$1
    local exec_user_cmd=""
    local owner="root:root"
    local owner_user="root" 

    if [ "$mode" == "secure" ]; then
        msg_info "2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}'..."
        if ! id "${SERVICE_USER}" &>/dev/null; then
            sudo useradd -r -s /bin/false -d ${BOT_INSTALL_PATH} ${SERVICE_USER} || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SERVICE_USER}"; exit 1; }
        fi
        sudo mkdir -p ${BOT_INSTALL_PATH}
        sudo chown -R ${SERVICE_USER}:${SERVICE_USER} ${BOT_INSTALL_PATH}
        msg_info "3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–≤–µ—Ç–∫–∞ ${GIT_BRANCH}) –æ—Ç –∏–º–µ–Ω–∏ ${SERVICE_USER}..."
        run_with_spinner "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" \
            sudo -u ${SERVICE_USER} git clone --branch "${GIT_BRANCH}" "${GITHUB_REPO_URL}" "${BOT_INSTALL_PATH}"
        if [ $? -ne 0 ]; then msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –∏–º—è –≤–µ—Ç–∫–∏."; exit 1; fi
        exec_user_cmd="sudo -u ${SERVICE_USER}"
        owner="${SERVICE_USER}:${SERVICE_USER}"
        owner_user=${SERVICE_USER}
    else # Root mode
        msg_info "2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞..."
        sudo mkdir -p ${BOT_INSTALL_PATH}
        msg_info "3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–≤–µ—Ç–∫–∞ ${GIT_BRANCH}) –æ—Ç –∏–º–µ–Ω–∏ root..."
        run_with_spinner "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" \
            sudo git clone --branch "${GIT_BRANCH}" "${GITHUB_REPO_URL}" "${BOT