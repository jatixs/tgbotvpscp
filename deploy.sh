#!/bin/bash

# --- –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ---
orig_arg1="$1"

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_INSTALL_PATH="/opt/tg-bot"
SERVICE_NAME="tg-bot"
WATCHDOG_SERVICE_NAME="tg-watchdog"
SERVICE_USER="tgbot"
PYTHON_BIN="/usr/bin/python3"
VENV_PATH="${BOT_INSTALL_PATH}/venv"

# --- GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –í–µ—Ç–∫–∞ ---
GITHUB_REPO="jatixs/tgbotvpscp"
# –ò—Å–ø–æ–ª—å–∑—É–µ–º $orig_arg1 –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ 'main'.
GIT_BRANCH="${orig_arg1:-main}"
GITHUB_REPO_URL="https://github.com/${GITHUB_REPO}.git"

# --- –¶–≤–µ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ ---
C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BLUE='\033[0;34m'
C_CYAN='\033[0;36m'
C_BOLD='\033[1m'

msg_info() { echo -e "${C_CYAN}üîµ $1${C_RESET}"; }
msg_success() { echo -e "${C_GREEN}‚úÖ $1${C_RESET}"; }
msg_warning() { echo -e "${C_YELLOW}‚ö†Ô∏è  $1${C_RESET}"; }
msg_error() { echo -e "${C_RED}‚ùå $1${C_RESET}"; }
msg_question() { read -p "$(echo -e "${C_YELLOW}‚ùì $1${C_RESET}")" $2; }

spinner() {
    local pid=$1
    local msg=$2
    local spin='|/-\'
    local i=0
    while kill -0 $pid 2>/dev/null; do
        i=$(( (i+1) %4 ))
        printf "\r${C_BLUE}‚è≥ ${spin:$i:1} ${msg}...${C_RESET}"
        sleep .1
    done
    printf "\r"
}

run_with_spinner() {
    local msg=$1
    shift
    "$@" >> /tmp/${SERVICE_NAME}_install.log 2>&1 &
    local pid=$!
    spinner "$pid" "$msg" # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è spinner
    wait $pid
    local exit_code=$?
    # –£–±–∏—Ä–∞–µ–º \r –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–∫–∏/—É—Å–ø–µ—Ö–∞
    echo -ne "\033[2K\r"
    if [ $exit_code -ne 0 ]; then
        msg_error "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è '$msg'. –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: $exit_code"
        msg_error "–°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π: /tmp/${SERVICE_NAME}_install.log"
    # else # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    #    msg_success "'$msg' –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
    fi
    return $exit_code
} # <--- –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ ---
if command -v wget &> /dev/null; then
    DOWNLOADER="wget -qO-"
    # DOWNLOADER_PIPE="wget -qO-" # wget –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–∞–π–ø–∞–º–∏ –¥–ª—è —Å–∫—Ä–∏–ø—Ç–æ–≤, curl –ª—É—á—à–µ
elif command -v curl &> /dev/null; then
    DOWNLOADER="curl -sSLf"
    # DOWNLOADER_PIPE="curl -s" # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ
else
    msg_error "–ù–∏ wget, –Ω–∏ curl –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö (sudo apt install curl wget) –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
    exit 1
fi
# –ò—Å–ø–æ–ª—å–∑—É–µ–º curl –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –ø–∞–π–ø, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ wget
if command -v curl &> /dev/null; then DOWNLOADER_PIPE="curl -s"; else DOWNLOADER_PIPE="wget -qO-"; fi


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ---
INSTALL_STATUS="NOT_FOUND"
STATUS_MESSAGE="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å."

check_integrity() {
    if [ ! -d "${BOT_INSTALL_PATH}" ]; then
        INSTALL_STATUS="NOT_FOUND"
        STATUS_MESSAGE="–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        return
    fi
    INSTALL_STATUS="OK" # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    local errors=()
    if [ ! -d "${BOT_INSTALL_PATH}/.git" ]; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .git (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ)"); INSTALL_STATUS="PARTIAL"; fi
    if [ ! -f "${BOT_INSTALL_PATH}/bot.py" ] || \
       [ ! -f "${BOT_INSTALL_PATH}/watchdog.py" ] || \
       [ ! -d "${BOT_INSTALL_PATH}/core" ] || \
       [ ! -d "${BOT_INSTALL_PATH}/modules" ]; then
         errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (bot.py, core/, modules/)")
         INSTALL_STATUS="PARTIAL"
    fi
    if [ ! -f "${VENV_PATH}/bin/python" ]; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç venv (${VENV_PATH}/bin/python)"); INSTALL_STATUS="PARTIAL"; fi
    if [ ! -f "${BOT_INSTALL_PATH}/.env" ]; then errors+=("- (–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ) –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª .env"); fi
    if ! systemctl list-unit-files | grep -q "${SERVICE_NAME}.service"; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª ${SERVICE_NAME}.service"); INSTALL_STATUS="PARTIAL"; fi
    if ! systemctl list-unit-files | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª ${WATCHDOG_SERVICE_NAME}.service"); INSTALL_STATUS="PARTIAL"; fi

    if [ "$INSTALL_STATUS" == "OK" ]; then
        local bot_status; local watchdog_status
        if systemctl is-active --quiet ${SERVICE_NAME}.service; then bot_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else bot_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi
        if systemctl is-active --quiet ${WATCHDOG_SERVICE_NAME}.service; then watchdog_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else watchdog_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi
        STATUS_MESSAGE="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OK (–ë–æ—Ç: ${bot_status} | Watchdog: ${watchdog_status})"
        if [[ " ${errors[*]} " =~ " .env" ]]; then STATUS_MESSAGE+=" ${C_YELLOW}(–ù–µ—Ç .env!)${C_RESET}"; fi
    elif [ "$INSTALL_STATUS" == "PARTIAL" ]; then
        STATUS_MESSAGE="${C_RED}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.${C_RESET}\n  –ü—Ä–æ–±–ª–µ–º–∞: ${errors[0]}"
    fi
}

# --- –§—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
install_extras() {
    local packages_to_install=()
    if ! command -v fail2ban-client &> /dev/null; then msg_question "Fail2Ban –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_F2B; if [[ "$INSTALL_F2B" =~ ^[Yy]$ ]]; then packages_to_install+=("fail2ban"); else msg_info "–ü—Ä–æ–ø—É—Å–∫ Fail2Ban."; fi; else msg_success "Fail2Ban —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; fi
    if ! command -v speedtest &> /dev/null; then msg_question "Speedtest CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_SPEEDTEST; if [[ "$INSTALL_SPEEDTEST" =~ ^[Yy]$ ]]; then packages_to_install+=("speedtest-cli"); else msg_info "–ü—Ä–æ–ø—É—Å–∫ Speedtest CLI."; fi; else msg_success "Speedtest CLI —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; fi # –ò—Å–ø–æ–ª—å–∑—É–µ–º speedtest-cli –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ–ø–æ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
    if [ ${#packages_to_install[@]} -gt 0 ]; then
        msg_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${packages_to_install[*]}"
        # –£–±—Ä–∞–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ Speedtest, —Ç.–∫. speedtest-cli –æ–±—ã—á–Ω–æ –µ—Å—Ç—å –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö
        run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get update -y
        run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo DEBIAN_FRONTEND=noninteractive apt-get install -y "${packages_to_install[@]}"; if [ $? -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ–ø. –ø–∞–∫–µ—Ç–æ–≤."; exit 1; fi
        if [[ " ${packages_to_install[*]} " =~ " fail2ban " ]]; then sudo systemctl enable fail2ban &> /dev/null; sudo systemctl start fail2ban &> /dev/null; msg_success "Fail2Ban —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."; fi
        msg_success "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
    fi
}

common_install_steps() {
    echo "" > /tmp/${SERVICE_NAME}_install.log
    msg_info "1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get update -y || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"; exit 1; }
    run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (python3, pip, venv, git, curl, wget, sudo)" sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3 python3-pip python3-venv git curl wget sudo || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"; exit 1; }
    install_extras
}

install_logic() {
    local mode=$1
    local branch_to_use=$2 # –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤–µ—Ç–∫—É –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
    local exec_user_cmd=""; local owner="root:root"; local owner_user="root"

    if [ "$mode" == "secure" ]; then
        msg_info "2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}'..."
        if ! id "${SERVICE_USER}" &>/dev/null; then sudo useradd -r -s /bin/false -d ${BOT_INSTALL_PATH} ${SERVICE_USER} || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SERVICE_USER}"; exit 1; }; fi
        sudo mkdir -p ${BOT_INSTALL_PATH}; sudo chown -R ${SERVICE_USER}:${SERVICE_USER} ${BOT_INSTALL_PATH}
        msg_info "3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–≤–µ—Ç–∫–∞ ${branch_to_use}) –æ—Ç –∏–º–µ–Ω–∏ ${SERVICE_USER}..."
        run_with_spinner "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" sudo -u ${SERVICE_USER} git clone --branch "${branch_to_use}" "${GITHUB_REPO_URL}" "${BOT_INSTALL_PATH}"; if [ $? -ne 0 ]; then msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."; exit 1; fi
        exec_user_cmd="sudo -u ${SERVICE_USER}"; owner="${SERVICE_USER}:${SERVICE_USER}"; owner_user=${SERVICE_USER}
    else # Root mode
        msg_info "2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–æ—Ç–∞..."; sudo mkdir -p ${BOT_INSTALL_PATH}
        msg_info "3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–≤–µ—Ç–∫–∞ ${branch_to_use}) –æ—Ç –∏–º–µ–Ω–∏ root..."
        run_with_spinner "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" sudo git clone --branch "${branch_to_use}" "${GITHUB_REPO_URL}" "${BOT_INSTALL_PATH}"; if [ $? -ne 0 ]; then msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."; exit 1; fi
        exec_user_cmd=""; owner="root:root"; owner_user="root"
    fi

    msg_info "4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è Python..."
    if [ ! -d "${VENV_PATH}" ]; then run_with_spinner "–°–æ–∑–¥–∞–Ω–∏–µ venv" $exec_user_cmd ${PYTHON_BIN} -m venv "${VENV_PATH}" || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å venv"; exit 1; }; fi
    run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip" $exec_user_cmd "${VENV_PATH}/bin/pip" install --upgrade pip || msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip..."
    run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python" $exec_user_cmd "${VENV_PATH}/bin/pip" install -r "${BOT_INSTALL_PATH}/requirements.txt" || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Python."; exit 1; }

    msg_info "5. –°–æ–∑–¥–∞–Ω–∏–µ .gitignore, logs/ –∏ config/..."
    # –î–æ–±–∞–≤–ª—è–µ–º *_flag.txt –≤ .gitignore
    sudo -u ${owner_user} bash -c "cat > ${BOT_INSTALL_PATH}/.gitignore" <<< $'/venv/\n/__pycache__/\n*.pyc\n/.env\n/config/\n/logs/\n*.log\n*_flag.txt'; sudo chmod 644 "${BOT_INSTALL_PATH}/.gitignore"
    sudo -u ${owner_user} mkdir -p "${BOT_INSTALL_PATH}/logs" "${BOT_INSTALL_PATH}/config"

    msg_info "6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    msg_question "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Bot Token: " TG_BOT_TOKEN_USER; msg_question "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram User ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã): " TG_ADMIN_ID_USER; msg_question "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram Username (–±–µ–∑ @, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): " TG_ADMIN_USERNAME_USER; msg_question "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–æ—Ç–∞ (–¥–ª—è Watchdog, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): " TG_BOT_NAME_USER
    # –î–æ–±–∞–≤–ª—è–µ–º TG_BOT_NAME –≤ .env
    sudo bash -c "cat > ${BOT_INSTALL_PATH}/.env" <<< $(printf "TG_BOT_TOKEN=\"%s\"\nTG_ADMIN_ID=\"%s\"\nTG_ADMIN_USERNAME=\"%s\"\nTG_BOT_NAME=\"%s\"\nINSTALL_MODE=\"%s\"" "$TG_BOT_TOKEN_USER" "$TG_ADMIN_ID_USER" "$TG_ADMIN_USERNAME_USER" "$TG_BOT_NAME_USER" "$mode"); sudo chown ${owner} "${BOT_INSTALL_PATH}/.env"; sudo chmod 600 "${BOT_INSTALL_PATH}/.env"

    if [ "$mode" == "root" ]; then
      msg_info "7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ sudo –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞/–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è root)..."
      SUDOERS_FILE="/etc/sudoers.d/98-${SERVICE_NAME}-root"; sudo tee ${SUDOERS_FILE} > /dev/null <<< $'root ALL=(ALL) NOPASSWD: /bin/systemctl restart tg-bot.service\nroot ALL=(ALL) NOPASSWD: /bin/systemctl restart tg-watchdog.service\nroot ALL=(ALL) NOPASSWD: /sbin/reboot'; sudo chmod 440 ${SUDOERS_FILE}
    elif [ "$mode" == "secure" ]; then
      SUDOERS_WATCHDOG="/etc/sudoers.d/99-${WATCHDOG_SERVICE_NAME}-restart"; sudo tee ${SUDOERS_WATCHDOG} > /dev/null <<< $'Defaults:tgbot !requiretty\ntgbot ALL=(root) NOPASSWD: /bin/systemctl restart tg-bot.service'; sudo chmod 440 ${SUDOERS_WATCHDOG}; msg_info "7. –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∞ sudo –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏–∑ watchdog."
    fi

    create_and_start_service "${SERVICE_NAME}" "${BOT_INSTALL_PATH}/bot.py" "${mode}" "Telegram Bot"
    create_and_start_service "${WATCHDOG_SERVICE_NAME}" "${BOT_INSTALL_PATH}/watchdog.py" "root" "Watchdog" # Watchdog –≤—Å–µ–≥–¥–∞ –æ—Ç root

    local server_ip=$(curl -s 4.ipinfo.io/ip || echo "YOUR_SERVER_IP"); echo ""; echo "-----------------------------------------------------"; msg_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"; msg_info "   –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (UptimeRobot)"; msg_info "   –Ω–∞ IP: ${server_ip}"; echo "-----------------------------------------------------"
}

# –ò—Å–ø–æ–ª—å–∑—É–µ–º GIT_BRANCH, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –≤ –Ω–∞—á–∞–ª–µ
install_secure() { echo -e "\n${C_BOLD}=== –ù–∞—á–∞–ª–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"; common_install_steps; install_logic "secure" "${GIT_BRANCH}"; }
install_root() { echo -e "\n${C_BOLD}=== –ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –∏–º–µ–Ω–∏ Root (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"; common_install_steps; install_logic "root" "${GIT_BRANCH}"; }

create_and_start_service() {
    local svc_name=$1; local script_path=$2; local install_mode_or_user=$3; local description=$4
    local user="root"; local group="root"; local env_file_line=""; local desc_mode_suffix=""; local after_line="After=network.target"; local requires_line=""

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ $install_mode_or_user
    if [ "$install_mode_or_user" == "secure" ] && [ "$svc_name" == "$SERVICE_NAME" ]; then
        user=${SERVICE_USER}; group=${SERVICE_USER}; desc_mode_suffix="(Secure Mode)"
    elif [ "$svc_name" == "$SERVICE_NAME" ]; then # Root mode for bot
        user="root"; group="root"; desc_mode_suffix="(Root Mode)"
    # –î–ª—è watchdog –≤—Å–µ–≥–¥–∞ root
    elif [ "$svc_name" == "$WATCHDOG_SERVICE_NAME" ]; then
         user="root"; group="root"; after_line="After=network.target ${SERVICE_NAME}.service"
    fi

    # EnvironmentFile –Ω—É–∂–µ–Ω –¥–ª—è –æ–±–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤, —Ç.–∫. watchdog —á–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω/ID
    env_file_line="EnvironmentFile=${BOT_INSTALL_PATH}/.env"

    msg_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è ${svc_name}..."
    SERVICE_FILE="/etc/systemd/system/${svc_name}.service"
    sudo tee ${SERVICE_FILE} > /dev/null <<EOF
[Unit]
Description=${description} Service ${desc_mode_suffix}
${after_line}
${requires_line}

[Service]
Type=simple
User=${user}
Group=${group}
WorkingDirectory=${BOT_INSTALL_PATH}
${env_file_line}
ExecStart=${VENV_PATH}/bin/python ${script_path}
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

    msg_info "–ó–∞–ø—É—Å–∫ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ ${svc_name}..."; sudo systemctl daemon-reload; sudo systemctl enable ${svc_name}.service &> /dev/null; run_with_spinner "–ó–∞–ø—É—Å–∫ ${svc_name}" sudo systemctl restart ${svc_name}; sleep 2 # –ò—Å–ø–æ–ª—å–∑—É–µ–º restart –≤–º–µ—Å—Ç–æ start
    if sudo systemctl is-active --quiet ${svc_name}.service; then msg_success "–°–µ—Ä–≤–∏—Å ${svc_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"; msg_info "–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: sudo systemctl status ${svc_name}"; else msg_error "–°–µ—Ä–≤–∏—Å ${svc_name} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è. –õ–æ–≥–∏: sudo journalctl -u ${svc_name} -n 50 --no-pager"; if [ "$svc_name" == "$SERVICE_NAME" ]; then exit 1; fi; fi
}

uninstall_bot() {
    echo -e "\n${C_BOLD}=== –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è Telegram-–±–æ—Ç–∞ –∏ Watchdog ===${C_RESET}"; msg_info "1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    if systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then sudo systemctl stop ${SERVICE_NAME} &> /dev/null; sudo systemctl disable ${SERVICE_NAME} &> /dev/null; fi
    if systemctl list-units --full -all | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then sudo systemctl stop ${WATCHDOG_SERVICE_NAME} &> /dev/null; sudo systemctl disable ${WATCHDOG_SERVICE_NAME} &> /dev/null; fi
    msg_info "2. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."; sudo rm -f "/etc/systemd/system/${SERVICE_NAME}.service"; sudo rm -f "/etc/systemd/system/${WATCHDOG_SERVICE_NAME}.service"; sudo rm -f "/etc/sudoers.d/98-${SERVICE_NAME}-root"; sudo rm -f "/etc/sudoers.d/99-${WATCHDOG_SERVICE_NAME}-restart"; sudo systemctl daemon-reload
    msg_info "3. –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±–æ—Ç–æ–º..."; sudo rm -rf "${BOT_INSTALL_PATH}"; msg_info "4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}' (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)..."; if id "${SERVICE_USER}" &>/dev/null; then sudo userdel -r "${SERVICE_USER}" &> /dev/null || msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SERVICE_USER}."; fi; msg_success "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
}

update_bot() {
    echo -e "\n${C_BOLD}=== –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"
    if [ ! -d "${BOT_INSTALL_PATH}/.git" ]; then msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (git) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."; msg_error "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–æ—Ç–∞."; return 1; fi
    local exec_user_cmd=""; if [ -f "${BOT_INSTALL_PATH}/.env" ]; then INSTALL_MODE_DETECTED=$(grep '^INSTALL_MODE=' "${BOT_INSTALL_PATH}/.env" | cut -d'=' -f2 | tr -d '"'); if [ "$INSTALL_MODE_DETECTED" == "secure" ]; then exec_user_cmd="sudo -u ${SERVICE_USER}"; fi; fi
    msg_warning "–í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."; msg_warning "–§–∞–π–ª—ã .env, config/, logs/ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."; msg_info "1. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑ Git (–≤–µ—Ç–∫–∞ ${GIT_BRANCH})..."
    pushd "${BOT_INSTALL_PATH}" > /dev/null; run_with_spinner "–ü–æ–ª—É—á–µ–Ω–∏–µ (fetch) –∏–∑–º–µ–Ω–µ–Ω–∏–π" $exec_user_cmd git fetch origin; run_with_spinner "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å (reset) –¥–æ origin/${GIT_BRANCH}" $exec_user_cmd git reset --hard "origin/${GIT_BRANCH}"; local update_status=$?; popd > /dev/null
    if [ $update_status -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è git fetch/reset."; return 1; fi; msg_success "–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."
    msg_info "2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python..."; run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π" $exec_user_cmd "${VENV_PATH}/bin/pip" install -r "${BOT_INSTALL_PATH}/requirements.txt" --upgrade; if [ $? -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python."; return 1; fi
    msg_info "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."; if sudo systemctl restart ${SERVICE_NAME}; then msg_success "–°–µ—Ä–≤–∏—Å ${SERVICE_NAME} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."; else msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${SERVICE_NAME}."; return 1; fi; sleep 1
    if sudo systemctl restart ${WATCHDOG_SERVICE_NAME}; then msg_success "–°–µ—Ä–≤–∏—Å ${WATCHDOG_SERVICE_NAME} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."; else msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${WATCHDOG_SERVICE_NAME}."; fi
    echo -e "\n${C_GREEN}${C_BOLD}üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${C_RESET}\n"
}

# --- –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
main_menu() {
    while true; do
        clear
        echo -e "${C_BLUE}${C_BOLD}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${C_RESET}"
        echo -e "${C_BLUE}${C_BOLD}‚ïë     VPS Manager Telegram Bot      ‚ïë${C_RESET}"
        echo -e "${C_BLUE}${C_BOLD}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${C_RESET}"
        local current_branch=$(cd "$BOT_INSTALL_PATH" && git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        echo -e "  –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞): ${C_YELLOW}${current_branch}${C_RESET}"
        echo -e "  –¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞ (–¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è): ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –ù–ï –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –ò —Ü–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞ —Ä–∞–≤–Ω–∞ 'main'
        if [ -z "$orig_arg1" ] && [ "$GIT_BRANCH" == "main" ]; then
             echo -e "  ${C_YELLOW}(–ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –¥—Ä—É–≥–æ–π –≤–µ—Ç–∫–∏,${C_RESET}"
             echo -e "  ${C_YELLOW} —Å–∫–∞—á–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: sudo bash deploy.sh <–∏–º—è_–≤–µ—Ç–∫–∏>)${C_RESET}"
        fi

        check_integrity
        echo "--------------------------------------------------------"
        echo -n -e "  –°—Ç–∞—Ç—É—Å: "; if [ "$INSTALL_STATUS" == "OK" ]; then echo -e "${C_GREEN}${STATUS_MESSAGE}${C_RESET}"; else echo -e "${C_RED}${STATUS_MESSAGE}${C_RESET}"; msg_warning "  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞."; fi
        echo "--------------------------------------------------------"
        echo -e "${C_GREEN}  1)${C_RESET} ${C_BOLD}–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Secure):${C_RESET}     ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        echo -e "${C_YELLOW}  2)${C_RESET} ${C_BOLD}–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Root):${C_RESET}       ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        echo -e "${C_CYAN}  3)${C_RESET} ${C_BOLD}–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞:${C_RESET}               ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        echo -e "${C_RED}  4)${C_RESET} ${C_BOLD}–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞${C_RESET}"
        echo -e "  5) ${C_BOLD}–í—ã—Ö–æ–¥${C_RESET}"
        echo "--------------------------------------------------------"
        read -p "$(echo -e "${C_BOLD}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏ [1-5]: ${C_RESET}")" choice

        case $choice in
            1) rm -f /tmp/${SERVICE_NAME}_install.log; msg_question "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (secure, –≤–µ—Ç–∫–∞ ${GIT_BRANCH})? (y/n): " confirm; if [[ "$confirm" =~ ^[Yy]$ ]]; then uninstall_bot; install_secure; else msg_info "–û—Ç–º–µ–Ω–µ–Ω–æ."; fi ;;
            2) rm -f /tmp/${SERVICE_NAME}_install.log; msg_question "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (root, –≤–µ—Ç–∫–∞ ${GIT_BRANCH})? (y/n): " confirm; if [[ "$confirm" =~ ^[Yy]$ ]]; then uninstall_bot; install_root; else msg_info "–û—Ç–º–µ–Ω–µ–Ω–æ."; fi ;;
            3) rm -f /tmp/${SERVICE_NAME}_install.log; update_bot ;;
            4) msg_question "–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –ü–û–õ–ù–û–°–¢–¨–Æ? (y/n): " confirm_uninstall; if [[ "$confirm_uninstall" =~ ^[Yy]$ ]]; then uninstall_bot; msg_info "–ë–æ—Ç —É–¥–∞–ª–µ–Ω. –í—ã—Ö–æ–¥."; return; else msg_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."; fi ;;
            5) break ;;
            *) msg_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." ;;
        esac

        if [[ "$choice" != "4" || ! "$confirm_uninstall" =~ ^[Yy]$ ]]; then
            echo; read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."
        fi
    done
}

# --- –ì–ª–∞–≤–Ω—ã–π "–†–æ—É—Ç–µ—Ä" ---
main() {
    clear
    msg_info "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º (–¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞: ${GIT_BRANCH})..."
    check_integrity

    if [ "$INSTALL_STATUS" == "NOT_FOUND" ] || [ "$INSTALL_STATUS" == "PARTIAL" ]; then
        if [ "$INSTALL_STATUS" == "PARTIAL" ]; then
            msg_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞."; msg_warning "${STATUS_MESSAGE}"
            msg_question "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞. –£–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? (y/n): " confirm_delete
            if [[ "$confirm_delete" =~ ^[Yy]$ ]]; then uninstall_bot; else msg_error "–í—ã—Ö–æ–¥."; exit 1; fi
        fi

        msg_info "–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        echo "--------------------------------------------------------"
        echo -e "${C_GREEN}  1)${C_RESET} ${C_BOLD}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Secure):${C_RESET}     ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        echo -e "${C_YELLOW}  2)${C_RESET} ${C_BOLD}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Root):${C_RESET}       ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        echo -e "  3) ${C_BOLD}–í—ã—Ö–æ–¥${C_RESET}"
        echo "--------------------------------------------------------"
        read -p "$(echo -e "${C_BOLD}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏ [1-3]: ${C_RESET}")" install_choice

        local install_done=false
        rm -f /tmp/${SERVICE_NAME}_install.log

        case $install_choice in
            1) install_secure; install_done=true ;;
            2) install_root; install_done=true ;;
            *) msg_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã—Ö–æ–¥."; exit 0 ;;
        esac

        if [ "$install_done" = true ]; then
            msg_info "–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ –≤–µ—Ç–∫–∏ '${GIT_BRANCH}'..."
            check_integrity
            if [ "$INSTALL_STATUS" == "OK" ]; then
                msg_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞. –ó–∞–ø—É—Å–∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
                read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è..."
            else
                msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞."; msg_error "–õ–æ–≥: /tmp/${SERVICE_NAME}_install.log"; exit 1
            fi
        fi
    fi

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    main_menu
    echo -e "\n${C_CYAN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${C_RESET}"
}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Root ---
if [ "$(id -u)" -ne 0 ]; then msg_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root –∏–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ sudo."; exit 1; fi

# --- –ó–∞–ø—É—Å–∫ ---
main