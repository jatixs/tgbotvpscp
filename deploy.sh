#!/bin/bash

# --- –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ---
orig_arg1="$1"

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_INSTALL_PATH="/opt/tg-bot"
SERVICE_NAME="tg-bot"
WATCHDOG_SERVICE_NAME="tg-watchdog"
SERVICE_USER="tgbot"
PYTHON_BIN="/usr/bin/python3"
VENV_PATH="${BOT_INSTALL_PATH}/venv"
README_FILE="${BOT_INSTALL_PATH}/README.md"
# --- –î–û–ë–ê–í–õ–ï–ù–´ –ü–ï–†–ï–ú–ï–ù–ù–´–ï DOCKER ---
DOCKER_COMPOSE_FILE="${BOT_INSTALL_PATH}/docker-compose.yml"
ENV_FILE="${BOT_INSTALL_PATH}/.env"

# --- GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –í–µ—Ç–∫–∞ ---
GITHUB_REPO="jatixs/tgbotvpscp"
GIT_BRANCH="${orig_arg1:-main}"
GITHUB_REPO_URL="https://github.com/${GITHUB_REPO}.git"
GITHUB_API_URL="https://api.github.com/repos/${GITHUB_REPO}/releases/latest"

# --- –¶–≤–µ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ ---
C_RESET='\033[0m'; C_RED='\033[0;31m'; C_GREEN='\033[0;32m'; C_YELLOW='\033[0;33m'; C_BLUE='\033[0;34m'; C_CYAN='\033[0;36m'; C_BOLD='\033[1m'
msg_info() { echo -e "${C_CYAN}üîµ $1${C_RESET}"; }; msg_success() { echo -e "${C_GREEN}‚úÖ $1${C_RESET}"; }; msg_warning() { echo -e "${C_YELLOW}‚ö†Ô∏è  $1${C_RESET}"; }; msg_error() { echo -e "${C_RED}‚ùå $1${C_RESET}"; }; msg_question() { read -p "$(echo -e "${C_YELLOW}‚ùì $1${C_RESET}")" $2; }
spinner() { local pid=$1; local msg=$2; local spin='|/-\'; local i=0; while kill -0 $pid 2>/dev/null; do i=$(( (i+1) %4 )); printf "\r${C_BLUE}‚è≥ ${spin:$i:1} ${msg}...${C_RESET}"; sleep .1; done; printf "\r"; }
run_with_spinner() { local msg=$1; shift; ( "$@" >> /tmp/${SERVICE_NAME}_install.log 2>&1 ) & local pid=$!; spinner "$pid" "$msg"; wait $pid; local exit_code=$?; echo -ne "\033[2K\r"; if [ $exit_code -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è '$msg'. –ö–æ–¥: $exit_code"; msg_error "–õ–æ–≥: /tmp/${SERVICE_NAME}_install.log"; fi; return $exit_code; }

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ ---
if command -v wget &> /dev/null; then DOWNLOADER="wget -qO-"; elif command -v curl &> /dev/null; then DOWNLOADER="curl -sSLf"; else msg_error "–ù–∏ wget, –Ω–∏ curl –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."; exit 1; fi
if command -v curl &> /dev/null; then DOWNLOADER_PIPE="curl -s"; else DOWNLOADER_PIPE="wget -qO-"; fi

# --- –§—É–Ω–∫—Ü–∏–∏ –≤–µ—Ä—Å–∏–π ---
get_local_version() { local readme_path="$1"; local version="–ù–µ –Ω–∞–π–¥–µ–Ω–∞"; if [ -f "$readme_path" ]; then version=$(grep -oP 'img\.shields\.io/badge/version-v\K[\d\.]+' "$readme_path" || true); if [ -z "$version" ]; then version=$(grep -oP '<b\s*>v\K[\d\.]+(?=</b>)' "$readme_path" || true); fi; if [ -z "$version" ]; then version="–ù–µ –Ω–∞–π–¥–µ–Ω–∞"; else version="v$version"; fi; else version="–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; fi; echo "$version"; }
get_latest_version() { local api_url="$1"; local latest_tag=$($DOWNLOADER_PIPE "$api_url" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "–û—à–∏–±–∫–∞ API"); if [[ "$latest_tag" == *"API rate limit exceeded"* ]]; then latest_tag="–õ–∏–º–∏—Ç API"; elif [[ "$latest_tag" == "–û—à–∏–±–∫–∞ API" ]] || [ -z "$latest_tag" ]; then latest_tag="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"; fi; echo "$latest_tag"; }

# --- [–°–ò–õ–¨–ù–û –ò–ó–ú–ï–ù–ï–ù–û] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ---
INSTALL_TYPE="NONE"; STATUS_MESSAGE="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å."
check_integrity() {
    if [ ! -d "${BOT_INSTALL_PATH}" ] || [ ! -f "${ENV_FILE}" ]; then
        INSTALL_TYPE="NONE"; STATUS_MESSAGE="–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; return;
    fi

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (Docker –∏–ª–∏ Systemd)
    DEPLOY_MODE_FROM_ENV=$(grep '^DEPLOY_MODE=' "${ENV_FILE}" | cut -d'=' -f2 | tr -d '"' || echo "systemd")
    INSTALL_MODE_FROM_ENV=$(grep '^INSTALL_MODE=' "${ENV_FILE}" | cut -d'=' -f2 | tr -d '"' || echo "unknown")

    if [ "$DEPLOY_MODE_FROM_ENV" == "docker" ]; then
        INSTALL_TYPE="DOCKER ($INSTALL_MODE_FROM_ENV)"
        if ! command -v docker &> /dev/null; then
            STATUS_MESSAGE="${C_RED}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ (Docker –Ω–µ –Ω–∞–π–¥–µ–Ω).${C_RESET}"; return;
        fi
        if ! (command -v docker-compose &> /dev/null || docker compose version &> /dev/null); then
            STATUS_MESSAGE="${C_RED}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ (Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω).${C_RESET}"; return;
        fi
        if [ ! -f "${DOCKER_COMPOSE_FILE}" ]; then
            STATUS_MESSAGE="${C_RED}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ (–ù–µ—Ç docker-compose.yml).${C_RESET}"; return;
        fi
        
        local bot_container_name=$(grep '^TG_BOT_CONTAINER_NAME=' "${ENV_FILE}" | cut -d'=' -f2 | tr -d '"')
        if [ -z "$bot_container_name" ]; then
            bot_container_name="tg-bot-${INSTALL_MODE_FROM_ENV}" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        fi
        local watchdog_container_name="tg-watchdog"
        
        local bot_status; local watchdog_status;
        if docker ps -f "name=${bot_container_name}" --format '{{.Names}}' | grep -q "${bot_container_name}"; then bot_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else bot_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi
        if docker ps -f "name=${watchdog_container_name}" --format '{{.Names}}' | grep -q "${watchdog_container_name}"; then watchdog_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else watchdog_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi
        
        STATUS_MESSAGE="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker OK (–ë–æ—Ç: ${bot_status} | –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å: ${watchdog_status})"

    else # Systemd
        INSTALL_TYPE="SYSTEMD ($INSTALL_MODE_FROM_ENV)"
        INSTALL_STATUS="OK"; local errors=();
        if [ ! -f "${BOT_INSTALL_PATH}/bot.py" ] || [ ! -d "${BOT_INSTALL_PATH}/core" ] || [ ! -d "${BOT_INSTALL_PATH}/modules" ]; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã"); INSTALL_STATUS="PARTIAL"; fi;
        if [ ! -f "${VENV_PATH}/bin/python" ]; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç venv"); INSTALL_STATUS="PARTIAL"; fi;
        if ! systemctl list-unit-files | grep -q "${SERVICE_NAME}.service"; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${SERVICE_NAME}.service"); INSTALL_STATUS="PARTIAL"; fi;
        if ! systemctl list-unit-files | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${WATCHDOG_SERVICE_NAME}.service"); INSTALL_STATUS="PARTIAL"; fi;
        
        if [ "$INSTALL_STATUS" == "OK" ]; then
            local bot_status; local watchdog_status;
            if systemctl is-active --quiet ${SERVICE_NAME}.service; then bot_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else bot_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi;
            if systemctl is-active --quiet ${WATCHDOG_SERVICE_NAME}.service; then watchdog_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else watchdog_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi;
            STATUS_MESSAGE="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Systemd OK (–ë–æ—Ç: ${bot_status} | –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å: ${watchdog_status})"
        else
            STATUS_MESSAGE="${C_RED}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Systemd –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.${C_RESET}\n  –ü—Ä–æ–±–ª–µ–º–∞: ${errors[0]}"
        fi
    fi
}


# --- –§—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
install_extras() {
    local packages_to_install=()
    local packages_to_remove=()

    # Fail2Ban Check
    if ! command -v fail2ban-client &> /dev/null; then
        msg_question "Fail2Ban –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_F2B
        if [[ "$INSTALL_F2B" =~ ^[Yy]$ ]]; then
            packages_to_install+=("fail2ban")
        else
            msg_info "–ü—Ä–æ–ø—É—Å–∫ Fail2Ban."
        fi
    else
        msg_success "Fail2Ban —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi

    # iperf3 Check
    if ! command -v iperf3 &> /dev/null; then
        msg_question "iperf3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –º–æ–¥—É–ª—è '–°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏'. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_IPERF3
        if [[ "$INSTALL_IPERF3" =~ ^[Yy]$ ]]; then
            packages_to_install+=("iperf3")
        else
            msg_info "–ü—Ä–æ–ø—É—Å–∫ iperf3. –ú–æ–¥—É–ª—å '–°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏' –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
        fi
    else
        msg_success "iperf3 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi

    # Speedtest CLI Check for removal
    if command -v speedtest &> /dev/null || dpkg -s speedtest-cli &> /dev/null; then
        msg_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–∞–∫–µ—Ç 'speedtest-cli'."
        msg_question "–£–¥–∞–ª–∏—Ç—å 'speedtest-cli'? (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —Ç.–∫. –±–æ—Ç —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç iperf3) (y/n): " REMOVE_SPEEDTEST
        if [[ "$REMOVE_SPEEDTEST" =~ ^[Yy]$ ]]; then
            packages_to_remove+=("speedtest-cli")
        else
            msg_info "–ü—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è speedtest-cli."
        fi
    fi

    # Package Removal
    if [ ${#packages_to_remove[@]} -gt 0 ]; then
        msg_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤: ${packages_to_remove[*]}"
        run_with_spinner "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get remove --purge -y "${packages_to_remove[@]}"
        run_with_spinner "–û—á–∏—Å—Ç–∫–∞ apt" sudo apt-get autoremove -y
        msg_success "–£–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã."
    fi

    # Package Installation
    if [ ${#packages_to_install[@]} -gt 0 ]; then
        msg_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${packages_to_install[*]}"
        run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get update -y
        run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo DEBIAN_FRONTEND=noninteractive apt-get install -y "${packages_to_install[@]}"
        if [ $? -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ–ø. –ø–∞–∫–µ—Ç–æ–≤."; exit 1; fi

        if [[ " ${packages_to_install[*]} " =~ " fail2ban " ]]; then
             sudo systemctl enable fail2ban &> /dev/null
             sudo systemctl start fail2ban &> /dev/null
             msg_success "Fail2Ban —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."
        fi
        if [[ " ${packages_to_install[*]} " =~ " iperf3 " ]]; then
             msg_success "iperf3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        fi
        msg_success "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
    fi
}
# --- [–ò–ó–ú–ï–ù–ï–ù–û] common_install_steps ---
common_install_steps() {
    echo "" > /tmp/${SERVICE_NAME}_install.log
    msg_info "1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get update -y || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"; exit 1; }
    # –î–æ–±–∞–≤–ª—è–µ–º python3-yaml –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
    run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (python3, pip, venv, git, curl, wget, sudo, yaml)" sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3 python3-pip python3-venv git curl wget sudo python3-yaml || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"; exit 1; }
    install_extras
}
# --- [–ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô] common_install_steps ---

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö .env ---
ask_env_details() {
    msg_info "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è .env —Ñ–∞–π–ª–∞..."
    msg_question "–¢–æ–∫–µ–Ω –ë–æ—Ç–∞ (TG_BOT_TOKEN): " T
    msg_question "ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (TG_ADMIN_ID): " A
    msg_question "–ò–º—è (Username) –ê–¥–º–∏–Ω–∞ (TG_ADMIN_USERNAME, –æ–ø—Ü): " U
    msg_question "–ò–º—è –ë–æ—Ç–∞ (TG_BOT_NAME, –æ–ø—Ü, –Ω–∞–ø—Ä. '–ú–æ–π VPS'): " N
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤—ã–∑—ã–≤–∞—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
    export T A U N
}

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ó–∞–ø–∏—Å—å .env ---
write_env_file() {
    local deploy_mode=$1 # "systemd" –∏–ª–∏ "docker"
    local install_mode=$2 # "secure" –∏–ª–∏ "root"
    local container_name=$3 # "tg-bot-secure" / "tg-bot-root" / ""

    msg_info "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
    sudo bash -c "cat > ${ENV_FILE}" <<EOF
# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram-–±–æ—Ç–∞ ---
TG_BOT_TOKEN="${T}"
TG_ADMIN_ID="${A}"
TG_ADMIN_USERNAME="${U}"
TG_BOT_NAME="${N}"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (–ù–ï –ò–ó–ú–ï–ù–Ø–¢–¨ –í–†–£–ß–ù–£–Æ) ---
INSTALL_MODE="${install_mode}"
DEPLOY_MODE="${deploy_mode}"
TG_BOT_CONTAINER_NAME="${container_name}"
EOF
    sudo chmod 600 "${ENV_FILE}"
    msg_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω."
}

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ ---
setup_repo_and_dirs() {
    local owner_user="root"
    if [ "$1" == "secure" ]; then
        msg_info "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}'..."
        if ! id "${SERVICE_USER}" &>/dev/null; then
            sudo useradd -r -s /bin/false -d ${BOT_INSTALL_PATH} ${SERVICE_USER} || exit 1
        fi
        owner_user=${SERVICE_USER}
    fi
    
    sudo mkdir -p ${BOT_INSTALL_PATH}
    msg_info "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (–≤–µ—Ç–∫–∞ ${GIT_BRANCH})..."
    run_with_spinner "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" sudo git clone --branch "${GIT_BRANCH}" "${GITHUB_REPO_URL}" "${BOT_INSTALL_PATH}" || exit 1
    
    msg_info "–°–æ–∑–¥–∞–Ω–∏–µ .gitignore, logs/, config/..."
    # [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –£–±–∏—Ä–∞–µ–º docker-compose.yml –∏–∑ .gitignore
    sudo -u ${owner_user} bash -c "cat > ${BOT_INSTALL_PATH}/.gitignore" <<< $'/venv/\n/__pycache__/\n*.pyc\n/.env\n/config/\n/logs/\n*.log\n*_flag.txt'
    sudo chmod 644 "${BOT_INSTALL_PATH}/.gitignore"
    sudo -u ${owner_user} mkdir -p "${BOT_INSTALL_PATH}/logs/bot" "${BOT_INSTALL_PATH}/logs/watchdog" "${BOT_INSTALL_PATH}/config"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –≤—Å–µ–≥–æ, –∫—Ä–æ–º–µ .git
    sudo chown -R ${owner_user}:${owner_user} ${BOT_INSTALL_PATH}
    sudo chown -R root:root ${BOT_INSTALL_PATH}/.git
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è .env
    export OWNER_USER=${owner_user}
}

# --- [–ò–°–ü–†–ê–í–õ–ï–ù–û] –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker ---
check_docker_deps() {
    msg_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Docker..."
    if ! command -v docker &> /dev/null; then
        msg_warning "Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker (docker.io)" sudo apt-get install -y docker.io || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å docker.io."; exit 1; }
        sudo systemctl start docker
        sudo systemctl enable docker
    else
        msg_success "Docker –Ω–∞–π–¥–µ–Ω."
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ v2 (docker compose) –∏ v1 (docker-compose)
    if command -v docker-compose &> /dev/null; then
        msg_success "Docker Compose v1 (docker-compose) –Ω–∞–π–¥–µ–Ω."
    elif docker compose version &> /dev/null; then
        msg_success "Docker Compose v2 (docker compose) –Ω–∞–π–¥–µ–Ω."
    else
        msg_warning "Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        
        # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å v2 –ø–ª–∞–≥–∏–Ω —á–µ—Ä–µ–∑ apt (–∫–∞–∫ –±—ã–ª–æ)
        msg_info "–ü–æ–ø—ã—Ç–∫–∞ 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ 'docker-compose-plugin' —á–µ—Ä–µ–∑ apt..."
        sudo apt-get install -y docker-compose-plugin &> /tmp/${SERVICE_NAME}_install.log
        
        if docker compose version &> /dev/null; then
            msg_success "–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 'docker-compose-plugin' (v2) —á–µ—Ä–µ–∑ apt."
            # v2 –Ω–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–∏–º–ª–∏–Ω–∫–µ /usr/bin/docker-compose
        else
            msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å v2 —á–µ—Ä–µ–∑ apt. –ü–æ–ø—ã—Ç–∫–∞ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ v1 ('docker-compose') —á–µ—Ä–µ–∑ apt..."
            # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ2: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å v1 —á–µ—Ä–µ–∑ apt
            sudo apt-get install -y docker-compose &> /tmp/${SERVICE_NAME}_install.log
            
            if command -v docker-compose &> /dev/null; then
                 msg_success "–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω 'docker-compose' (v1) —á–µ—Ä–µ–∑ apt."
            else
                msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å v1 —á–µ—Ä–µ–∑ apt. –ü–æ–ø—ã—Ç–∫–∞ 3: –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ v2..."
                # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ3: –°–∫–∞—á–∞—Ç—å –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª v2 (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
                local DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
                if [ -z "$DOCKER_COMPOSE_VERSION" ] || [[ "$DOCKER_COMPOSE_VERSION" == *"API rate limit"* ]]; then
                    msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é Docker Compose —Å GitHub (–≤–æ–∑–º–æ–∂–Ω–æ, –ª–∏–º–∏—Ç API)."
                    msg_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose (v1 –∏–ª–∏ v2) –≤—Ä—É—á–Ω—É—é."
                    exit 1;
                fi
                
                local LATEST_COMPOSE_URL="https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)"
                # [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –ò—Å–ø–æ–ª—å–∑—É–µ–º /usr/local/bin (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π) –∏–ª–∏ /usr/libexec/docker/cli-plugins
                local DOCKER_CLI_PLUGIN_DIR="/usr/libexec/docker/cli-plugins"
                local DOCKER_COMPOSE_PATH="${DOCKER_CLI_PLUGIN_DIR}/docker-compose"

                sudo mkdir -p ${DOCKER_CLI_PLUGIN_DIR}
                
                msg_info "–ó–∞–≥—Ä—É–∑–∫–∞ Docker Compose ${DOCKER_COMPOSE_VERSION} –≤ ${DOCKER_COMPOSE_PATH}..."
                run_with_spinner "–ó–∞–≥—Ä—É–∑–∫–∞ docker-compose" sudo curl -SLf "${LATEST_COMPOSE_URL}" -o "${DOCKER_COMPOSE_PATH}"
                if [ $? -ne 0 ]; then
                    msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Docker Compose —Å ${LATEST_COMPOSE_URL}."
                    msg_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose (v1 –∏–ª–∏ v2) –≤—Ä—É—á–Ω—É—é."
                    exit 1;
                fi
                
                sudo chmod +x "${DOCKER_COMPOSE_PATH}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
                if docker compose version &> /dev/null; then
                    msg_success "–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Docker Compose v2 (–±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª)."
                else
                    msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker Compose. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
                    exit 1;
                fi
            fi
        fi
    fi
}


# --- –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (Systemd) ---
create_and_start_service() { local svc=$1; local script=$2; local mode=$3; local desc=$4; local user="root"; local group="root"; local env=""; local suffix=""; local after="After=network.target"; local req=""; if [ "$mode" == "secure" ] && [ "$svc" == "$SERVICE_NAME" ]; then user=${SERVICE_USER}; group=${SERVICE_USER}; suffix="(–ë–µ–∑–æ–ø–∞—Å–Ω–æ)"; elif [ "$svc" == "$SERVICE_NAME" ]; then user="root"; group="root"; suffix="(Root)"; elif [ "$svc" == "$WATCHDOG_SERVICE_NAME" ]; then user="root"; group="root"; after="After=network.target ${SERVICE_NAME}.service"; fi; env="EnvironmentFile=${BOT_INSTALL_PATH}/.env"; msg_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd –¥–ª—è ${svc}..."; FILE="/etc/systemd/system/${svc}.service"; sudo tee ${FILE} > /dev/null <<EOF
[Unit]
Description=${desc} –°–ª—É–∂–±–∞ ${suffix}
${after}
${req}
[Service]
Type=simple
User=${user}
Group=${group}
WorkingDirectory=${BOT_INSTALL_PATH}
${env}
ExecStart=${VENV_PATH}/bin/python ${script}
Restart=always
RestartSec=10
[Install]
WantedBy=multi-user.target
EOF
msg_info "–ó–∞–ø—É—Å–∫ ${svc}..."; sudo systemctl daemon-reload; sudo systemctl enable ${svc}.service &> /dev/null; run_with_spinner "–ó–∞–ø—É—Å–∫ ${svc}" sudo systemctl restart ${svc}; sleep 2; if sudo systemctl is-active --quiet ${svc}.service; then msg_success "${svc} –∑–∞–ø—É—â–µ–Ω!"; msg_info "–°—Ç–∞—Ç—É—Å: sudo systemctl status ${svc}"; else msg_error "${svc} –ù–ï –ó–ê–ü–£–°–¢–ò–õ–°–Ø. –õ–æ–≥–∏: sudo journalctl -u ${svc} -n 50 --no-pager"; if [ "$svc" == "$SERVICE_NAME" ]; then exit 1; fi; fi; }

install_systemd_logic() { 
    local mode=$1 # "secure" –∏–ª–∏ "root"
    local branch_to_use=$2
    
    common_install_steps
    setup_repo_and_dirs "$mode" # –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–ø–∞–ø–∫–∏
    
    local exec_user_cmd=""
    if [ "$mode" == "secure" ]; then
        exec_user_cmd="sudo -u ${SERVICE_USER}"
    fi

    msg_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ venv –¥–ª—è Systemd..."
    if [ ! -d "${VENV_PATH}" ]; then run_with_spinner "–°–æ–∑–¥–∞–Ω–∏–µ venv" $exec_user_cmd ${PYTHON_BIN} -m venv "${VENV_PATH}" || exit 1; fi;
    run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip" $exec_user_cmd "${VENV_PATH}/bin/pip" install --upgrade pip || msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip...";
    run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python" $exec_user_cmd "${VENV_PATH}/bin/pip" install -r "${BOT_INSTALL_PATH}/requirements.txt" || exit 1;
    
    ask_env_details # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç T, A, U, N
    write_env_file "systemd" "$mode" "" # –ü–∏—à–µ—Ç .env
    sudo chown ${OWNER_USER}:${OWNER_USER} "${ENV_FILE}" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ .env
    
    if [ "$mode" == "root" ]; then msg_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo (root)..."; F="/etc/sudoers.d/98-${SERVICE_NAME}-root"; sudo tee ${F} > /dev/null <<< $'root ALL=(ALL) NOPASSWD: /bin/systemctl restart tg-bot.service\nroot ALL=(ALL) NOPASSWD: /bin/systemctl restart tg-watchdog.service\nroot ALL=(ALL) NOPASSWD: /sbin/reboot'; sudo chmod 440 ${F}; elif [ "$mode" == "secure" ]; then F="/etc/sudoers.d/99-${WATCHDOG_SERVICE_NAME}-restart"; sudo tee ${F} > /dev/null <<< $'Defaults:tgbot !requiretty\ntgbot ALL=(root) NOPASSWD: /bin/systemctl restart tg-bot.service'; sudo chmod 440 ${F}; msg_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo (secure)..."; fi;
    
    create_and_start_service "${SERVICE_NAME}" "${BOT_INSTALL_PATH}/bot.py" "${mode}" "Telegram –ë–æ—Ç";
    create_and_start_service "${WATCHDOG_SERVICE_NAME}" "${BOT_INSTALL_PATH}/watchdog.py" "root" "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å";
    
    local ip=$(curl -s --connect-timeout 5 ipinfo.io/ip || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"); echo ""; echo "---"; msg_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (Systemd) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"; msg_info "IP: ${ip}"; echo "---";
}

install_systemd_secure() { echo -e "\n${C_BOLD}=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Systemd (Secure) (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"; install_systemd_logic "secure" "${GIT_BRANCH}"; }
install_systemd_root() { echo -e "\n${C_BOLD}=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Systemd (Root) (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"; install_systemd_logic "root" "${GIT_BRANCH}"; }


# --- [–ò–°–ü–†–ê–í–õ–ï–ù–û] –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –£–°–¢–ê–ù–û–í–ö–ò (Docker) ---
create_dockerfile() {
    msg_info "–°–æ–∑–¥–∞–Ω–∏–µ Dockerfile..."
    sudo tee "${BOT_INSTALL_PATH}/Dockerfile" > /dev/null <<'EOF'
# /opt/tg-bot/Dockerfile

# 1. –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑
FROM python:3.10-slim-bookworm

LABEL maintainer="Jatixs"
LABEL description="Telegram VPS Bot"

# 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# –ù—É–∂–Ω—ã –¥–ª—è –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞ (iperf3, yaml, ps, ping) –∏ –¥–ª—è —Å–±–æ—Ä–∫–∏
RUN apt-get update && apt-get install -y \
    python3-yaml \
    iperf3 \
    git \
    curl \
    wget \
    sudo \
    procps \
    iputils-ping \
    net-tools \
    gnupg \
    && rm -rf /var/lib/apt/lists/*

# 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Docker (–¥–ª—è watchdog)
RUN pip install --no-cache-dir docker

# 4. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'tgbot' (–¥–ª—è —Ä–µ–∂–∏–º–∞ secure)
# UID/GID 1001.
RUN groupadd -g 1001 tgbot && \
    useradd -u 1001 -g 1001 -m -s /bin/bash tgbot && \
    # –î–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é tgbot –ø—Ä–∞–≤–∞ sudo –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–¥–ª—è —Ä–µ–∂–∏–º–∞ secure)
    echo "tgbot ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers

# 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
WORKDIR /opt/tg-bot

# 6. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# 7. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ–≥–æ –∫–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# 8. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ config –∏ logs
# (–û–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã volumes, –Ω–æ —ç—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞)
RUN mkdir -p /opt/tg-bot/config /opt/tg-bot/logs/bot /opt/tg-bot/logs/watchdog && \
    chown -R tgbot:tgbot /opt/tg-bot

# 9. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'tgbot' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
# (docker-compose –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç —ç—Ç–æ –Ω–∞ 'root' –¥–ª—è root-—Ä–µ–∂–∏–º–∞)
USER tgbot

# 10. –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CMD ["python", "bot.py"]
EOF
    sudo chown ${OWNER_USER}:${OWNER_USER} "${BOT_INSTALL_PATH}/Dockerfile"
    sudo chmod 644 "${BOT_INSTALL_PATH}/Dockerfile"
}

create_docker_compose_yml() {
    msg_info "–°–æ–∑–¥–∞–Ω–∏–µ docker-compose.yml..."
    sudo tee "${BOT_INSTALL_PATH}/docker-compose.yml" > /dev/null <<'EOF'
# /opt/tg-bot/docker-compose.yml
version: '3.8'

services:
  # --- –ë–ê–ó–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê ---
  # (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤)
  bot-base: &bot-base
    build: .
    image: tg-vps-bot:latest
    restart: always
    env_file: .env # –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç .env —Ñ–∞–π–ª

  # --- –†–ï–ñ–ò–ú SECURE (Docker) ---
  bot-secure:
    <<: *bot-base # –ù–∞—Å–ª–µ–¥—É–µ—Ç 'bot-base'
    container_name: tg-bot-secure
    profiles: ["secure"] # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π: docker-compose --profile secure up
    user: "tgbot" # –ó–∞–ø—É—Å–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'tgbot' (UID 1001 –∏–∑ Dockerfile)
    environment:
      - INSTALL_MODE=secure # –°–æ–æ–±—â–∞–µ—Ç –±–æ—Ç—É, —á—Ç–æ –æ–Ω –≤ secure —Ä–µ–∂–∏–º–µ
      - DEPLOY_MODE=docker
      - TG_BOT_CONTAINER_NAME=tg-bot-secure # –ò–º—è –¥–ª—è watchdog
    volumes:
      - ./config:/opt/tg-bot/config
      - ./logs/bot:/opt/tg-bot/logs/bot
      # --- –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ö–æ—Å—Ç—É ---
      - /var/run/docker.sock:/var/run/docker.sock:ro # –î–ª—è –º–æ–¥—É–ª–µ–π (xray)
      - /proc/uptime:/proc/uptime:ro                 # –î–ª—è uptime
      - /proc/stat:/proc/stat:ro                     # –î–ª—è selftest (cpu)
      - /proc/meminfo:/proc/meminfo:ro               # –î–ª—è selftest (ram)
      - /proc/net/dev:/proc/net/dev:ro               # –î–ª—è traffic
    cap_drop: [ALL]   # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
    cap_add: [NET_RAW] # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 'ping'

  # --- –†–ï–ñ–ò–ú ROOT (Docker) ---
  bot-root:
    <<: *bot-base # –ù–∞—Å–ª–µ–¥—É–µ—Ç 'bot-base'
    container_name: tg-bot-root
    profiles: ["root"] # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π: docker-compose --profile root up
    user: "root"
    environment:
      - INSTALL_MODE=root # –°–æ–æ–±—â–∞–µ—Ç –±–æ—Ç—É, —á—Ç–æ –æ–Ω –≤ root —Ä–µ–∂–∏–º–µ
      - DEPLOY_MODE=docker
      - TG_BOT_CONTAINER_NAME=tg-bot-root # –ò–º—è –¥–ª—è watchdog
    # --- –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ö–æ—Å—Ç—É ---
    privileged: true     # –í–∫–ª—é—á–∞–µ—Ç --privileged
    pid: "host"          # –î–æ—Å—Ç—É–ø –∫ –ø—Ä–æ—Ü–µ—Å—Å–∞–º —Ö–æ—Å—Ç–∞ (–¥–ª—è 'top')
    network_mode: "host" # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ç—å —Ö–æ—Å—Ç–∞
    ipc: "host"          # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç IPC —Ö–æ—Å—Ç–∞
    volumes:
      # –ú–æ–Ω—Ç–∏—Ä—É–µ–º config –∏ logs
      - ./config:/opt/tg-bot/config
      - ./logs/bot:/opt/tg-bot/logs/bot
      # –ú–æ–Ω—Ç–∏—Ä—É–µ–º –≤—Å—é –§–° —Ö–æ—Å—Ç–∞, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã 'apt update', 'reboot'
      # –∏ —á—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–ª–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ –º–æ–¥—É–ª—è—Ö
      - /:/host

  # --- –ù–ê–ë–õ–Æ–î–ê–¢–ï–õ–¨ (WATCHDOG) ---
  watchdog:
    <<: *bot-base # –ù–∞—Å–ª–µ–¥—É–µ—Ç 'bot-base'
    container_name: tg-watchdog
    # –ù–µ –∏–º–µ–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ (–∫–æ–≥–¥–∞ –∑–∞–ø—É—â–µ–Ω docker-compose)
    command: python watchdog.py
    user: "root" # –ù—É–∂–µ–Ω root –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ docker.sock
    restart: always
    volumes:
      - ./config:/opt/tg-bot/config # –î–ª—è —á—Ç–µ–Ω–∏—è RESTART_FLAG
      - ./logs/watchdog:/opt/tg-bot/logs/watchdog
      - /var/run/docker.sock:/var/run/docker.sock:ro # –î–æ—Å—Ç—É–ø –∫ Docker API
EOF
    sudo chown ${OWNER_USER}:${OWNER_USER} "${BOT_INSTALL_PATH}/docker-compose.yml"
    sudo chmod 644 "${BOT_INSTALL_PATH}/docker-compose.yml"
}


install_docker_logic() {
    local mode=$1 # "secure" –∏–ª–∏ "root"
    local branch_to_use=$2
    local container_name="tg-bot-${mode}"
    
    check_docker_deps # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç/—Å—Ç–∞–≤–∏—Ç docker –∏ compose
    setup_repo_and_dirs "$mode" # –ö–ª–æ–Ω–∏—Ä—É–µ—Ç —Ä–µ–ø–æ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–ø–∞–ø–∫–∏ (OWNER_USER —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è)
    
    # --- [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –î–û —Å–±–æ—Ä–∫–∏ ---
    create_dockerfile
    create_docker_compose_yml
    # ----------------------------------------
    
    ask_env_details # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç T, A, U, N
    write_env_file "docker" "$mode" "$container_name" # –ü–∏—à–µ—Ç .env
    sudo chown ${OWNER_USER}:${OWNER_USER} "${ENV_FILE}" # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ .env

    # --- [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É compose ---
    local COMPOSE_CMD=""
    if command -v docker-compose &> /dev/null; then
        COMPOSE_CMD="sudo docker-compose"
    elif docker compose version &> /dev/null; then
        COMPOSE_CMD="sudo docker compose"
    else
        msg_error "[Install] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ docker-compose. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –ø—Ä–µ—Ä–≤–∞–Ω–∞."
        exit 1
    fi
    
    msg_info "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    (cd ${BOT_INSTALL_PATH} && run_with_spinner "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ tg-vps-bot:latest" $COMPOSE_CMD build) || { msg_error "–°–±–æ—Ä–∫–∞ Docker –Ω–µ —É–¥–∞–ª–∞—Å—å."; exit 1; }
    
    msg_info "–ó–∞–ø—É—Å–∫ Docker Compose (–ü—Ä–æ—Ñ–∏–ª—å: ${mode})..."
    (cd ${BOT_INSTALL_PATH} && run_with_spinner "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤" $COMPOSE_CMD --profile "${mode}" up -d) || { msg_error "–ó–∞–ø—É—Å–∫ Docker Compose –Ω–µ —É–¥–∞–ª—Å—è."; exit 1; }
    
    sleep 2
    msg_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (Docker) –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    msg_info "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã:"
    (cd ${BOT_INSTALL_PATH} && $COMPOSE_CMD ps)
    msg_info "–õ–æ–≥–∏ –±–æ—Ç–∞: $COMPOSE_CMD logs -f ${container_name}"
    msg_info "–õ–æ–≥–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è: $COMPOSE_CMD logs -f tg-watchdog"
}

install_docker_secure() { echo -e "\n${C_BOLD}=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker (Secure) (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"; install_docker_logic "secure" "${GIT_BRANCH}"; }
install_docker_root() { echo -e "\n${C_BOLD}=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker (Root) (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"; install_docker_logic "root" "${GIT_BRANCH}"; }


# --- [–°–ò–õ–¨–ù–û –ò–ó–ú–ï–ù–ï–ù–û] –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –£–î–ê–õ–ï–ù–ò–Ø ---
uninstall_bot() {
    echo -e "\n${C_BOLD}=== –£–¥–∞–ª–µ–Ω–∏–µ –ë–æ—Ç–∞ ===${C_RESET}";
    
    # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Systemd
    msg_info "1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–± Systemd (–µ—Å–ª–∏ –µ—Å—Ç—å)...";
    if systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then
        sudo systemctl stop ${SERVICE_NAME} &> /dev/null
        sudo systemctl disable ${SERVICE_NAME} &> /dev/null
    fi
    if systemctl list-units --full -all | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then
        sudo systemctl stop ${WATCHDOG_SERVICE_NAME} &> /dev/null
        sudo systemctl disable ${WATCHDOG_SERVICE_NAME} &> /dev/null
    fi
    
    # 2. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
    if [ -f "${DOCKER_COMPOSE_FILE}" ]; then
        msg_info "2. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ Docker (–µ—Å–ª–∏ –µ—Å—Ç—å)...";
        # [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É compose
        local COMPOSE_CMD=""
        if command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="sudo docker-compose"
        elif docker compose version &> /dev/null; then
            COMPOSE_CMD="sudo docker compose"
        fi
        
        if [ -n "$COMPOSE_CMD" ]; then
            (cd ${BOT_INSTALL_PATH} && $COMPOSE_CMD down -v --remove-orphans &> /tmp/${SERVICE_NAME}_install.log)
        else
            msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É docker-compose/docker compose –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤."
        fi
    fi
    
    # 3. –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ Systemd
    msg_info "3. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (systemd, sudoers)...";
    sudo rm -f "/etc/systemd/system/${SERVICE_NAME}.service"
    sudo rm -f "/etc/systemd/system/${WATCHDOG_SERVICE_NAME}.service"
    sudo rm -f "/etc/sudoers.d/98-${SERVICE_NAME}-root"
    sudo rm -f "/etc/sudoers.d/99-${WATCHDOG_SERVICE_NAME}-restart"
    sudo systemctl daemon-reload
    
    # 4. –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    msg_info "4. –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞ (${BOT_INSTALL_PATH})...";
    sudo rm -rf "${BOT_INSTALL_PATH}"
    
    # 5. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    msg_info "5. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}' (–µ—Å–ª–∏ –µ—Å—Ç—å)...";
    if id "${SERVICE_USER}" &>/dev/null; then
        sudo userdel -r "${SERVICE_USER}" &> /dev/null || msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SERVICE_USER}."
    fi

    # 6. –£–¥–∞–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if command -v docker &> /dev/null && docker image inspect tg-vps-bot:latest &> /dev/null; then
        msg_question "–£–¥–∞–ª–∏—Ç—å Docker –æ–±—Ä–∞–∑ 'tg-vps-bot:latest'? (y/n): " confirm_docker_rmi
        if [[ "$confirm_docker_rmi" =~ ^[Yy]$ ]]; then
            sudo docker rmi tg-vps-bot:latest &> /dev/null
        fi
    fi
    
    msg_success "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.";
}

# --- [–°–ò–õ–¨–ù–û –ò–ó–ú–ï–ù–ï–ù–û] –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–ù–û–í–õ–ï–ù–ò–Ø ---
update_bot() {
    echo -e "\n${C_BOLD}=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–æ—Ç–∞ (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}";
    if [ ! -d "${BOT_INSTALL_PATH}/.git" ]; then msg_error "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å."; return 1; fi
    
    local exec_user="";
    if [ ! -f "${ENV_FILE}" ]; then msg_error "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∂–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."; return 1; fi
    
    local DEPLOY_MODE_FROM_ENV=$(grep '^DEPLOY_MODE=' "${ENV_FILE}" | cut -d'=' -f2 | tr -d '"')
    local INSTALL_MODE_FROM_ENV=$(grep '^INSTALL_MODE=' "${ENV_FILE}" | cut -d'=' -f2 | tr -d '"')
    
    if [ "$INSTALL_MODE_FROM_ENV" == "secure" ]; then
        exec_user="sudo -u ${SERVICE_USER}"
    fi

    msg_warning "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.";
    msg_warning ".env, config/, logs/ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.";
    
    msg_info "1. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–≤–µ—Ç–∫–∞ ${GIT_BRANCH})...";
    pushd "${BOT_INSTALL_PATH}" > /dev/null;
    run_with_spinner "Git fetch (–∑–∞–≥—Ä—É–∑–∫–∞)" $exec_user git fetch origin;
    run_with_spinner "Git reset --hard (—Å–±—Ä–æ—Å)" $exec_user git reset --hard "origin/${GIT_BRANCH}";
    local st=$?;
    popd > /dev/null;
    if [ $st -ne 0 ]; then msg_error "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Git –Ω–µ —É–¥–∞–ª–æ—Å—å."; return 1; fi;
    msg_success "–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.";

    if [ "$DEPLOY_MODE_FROM_ENV" == "docker" ]; then
        # [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É compose
        local COMPOSE_CMD=""
        if command -v docker-compose &> /dev/null; then
            COMPOSE_CMD="sudo docker-compose"
        elif docker compose version &> /dev/null; then
            COMPOSE_CMD="sudo docker compose"
        else
            msg_error "[Update] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ docker-compose. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –ø—Ä–µ—Ä–≤–∞–Ω–æ."
            return 1
        fi
        
        # [–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï] –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –∏—Ö –≤–¥—Ä—É–≥ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Å—Ç–∞—Ä–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏)
        if [ ! -f "${BOT_INSTALL_PATH}/Dockerfile" ]; then create_dockerfile; fi
        if [ ! -f "${BOT_INSTALL_PATH}/docker-compose.yml" ]; then create_docker_compose_yml; fi
    
        msg_info "2. [Docker] –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞...";
        (cd ${BOT_INSTALL_PATH} && run_with_spinner "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞" $COMPOSE_CMD build) || { msg_error "–°–±–æ—Ä–∫–∞ Docker –Ω–µ —É–¥–∞–ª–∞—Å—å."; return 1; }
        msg_info "3. [Docker] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (–ü—Ä–æ—Ñ–∏–ª—å: ${INSTALL_MODE_FROM_ENV})...";
        (cd ${BOT_INSTALL_PATH} && run_with_spinner "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker Compose" $COMPOSE_CMD --profile "${INSTALL_MODE_FROM_ENV}" up -d) || { msg_error "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker Compose –Ω–µ —É–¥–∞–ª—Å—è."; return 1; }
    
    else # Systemd
        msg_info "2. [Systemd] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python...";
        run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pip" $exec_user "${VENV_PATH}/bin/pip" install -r "${BOT_INSTALL_PATH}/requirements.txt" --upgrade;
        if [ $? -ne 0 ]; then msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pip –Ω–µ —É–¥–∞–ª–∞—Å—å."; return 1; fi;
        
        msg_info "3. [Systemd] –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±...";
        if sudo systemctl restart ${SERVICE_NAME}; then msg_success "${SERVICE_NAME} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."; else msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ${SERVICE_NAME}."; return 1; fi;
        sleep 1;
        if sudo systemctl restart ${WATCHDOG_SERVICE_NAME}; then msg_success "${WATCHDOG_SERVICE_NAME} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."; else msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ${WATCHDOG_SERVICE_NAME}."; fi;
    fi

    echo -e "\n${C_GREEN}${C_BOLD}üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${C_RESET}\n";
}


# --- [–°–ò–õ–¨–ù–û –ò–ó–ú–ï–ù–ï–ù–û] –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
main_menu() {
    local local_version=$(get_local_version "$README_FILE")
    local latest_version=$(get_latest_version "$GITHUB_API_URL")
    
    while true; do
        clear
        echo -e "${C_BLUE}${C_BOLD}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${C_RESET}"
        echo -e "${C_BLUE}${C_BOLD}‚ïë    –ú–µ–Ω–µ–¥–∂–µ—Ä VPS Telegram –ë–æ—Ç      ‚ïë${C_RESET}"
        echo -e "${C_BLUE}${C_BOLD}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${C_RESET}"
        
        local current_branch=$(cd "$BOT_INSTALL_PATH" && git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        echo -e "  –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞): ${C_YELLOW}${current_branch}${C_RESET}"
        echo -e "  –¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞ (–¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è): ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        echo -e "  –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${C_GREEN}${local_version}${C_RESET}"
        echo -e "  –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: ${C_CYAN}${latest_version}${C_RESET}"
        if [ -z "$orig_arg1" ] && [ "$GIT_BRANCH" == "main" ]; then
            echo -e "  ${C_YELLOW}(–ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è –¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–æ–π –≤–µ—Ç–∫–æ–π, –∑–∞–ø—É—Å—Ç–∏—Ç–µ:${C_RESET}";
            echo -e "  ${C_YELLOW} sudo bash $0 <–∏–º—è_–≤–µ—Ç–∫–∏>)${C_RESET}";
        fi
        
        check_integrity # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        echo "--------------------------------------------------------"
        echo -n -e "  –¢–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${C_GREEN}${INSTALL_TYPE}${C_RESET}\n"
        echo -n -e "  –°—Ç–∞—Ç—É—Å: ";
        if [[ "$STATUS_MESSAGE" == *"OK"* ]]; then
            echo -e "${C_GREEN}${STATUS_MESSAGE}${C_RESET}"
        else
            echo -e "${C_RED}${STATUS_MESSAGE}${C_RESET}"
            msg_warning "  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞."
        fi
        echo "--------------------------------------------------------"
        echo -e "  ${C_BOLD}–£–ü–†–ê–í–õ–ï–ù–ò–ï:${C_RESET}"
        echo -e "  1) ${C_CYAN}${C_BOLD}–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞:${C_RESET}               ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        echo -e "  2) ${C_RED}${C_BOLD}–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞${C_RESET}"
        echo -e "\n  ${C_BOLD}–ü–ï–†–ï–£–°–¢–ê–ù–û–í–ö–ê (–í–µ—Ç–∫–∞: ${C_YELLOW}${GIT_BRANCH}${C_RESET}):"
        echo -e "  3) ${C_GREEN}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (Systemd - Secure)${C_RESET}"
        echo -e "  4) ${C_YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (Systemd - Root)${C_RESET}"
        echo -e "  5) ${C_BLUE}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (Docker - Secure)${C_RESET}"
        echo -e "  6) ${C_BLUE}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ (Docker - Root)${C_RESET}"
        echo -e "\n  7) ${C_BOLD}–í—ã—Ö–æ–¥${C_RESET}"
        echo "--------------------------------------------------------"
        read -p "$(echo -e "${C_BOLD}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏ [1-7]: ${C_RESET}")" choice
        
        case $choice in
            1) rm -f /tmp/${SERVICE_NAME}_install.log; update_bot && local_version=$(get_local_version "$README_FILE") ;;
            2) msg_question "–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –ü–û–õ–ù–û–°–¢–¨–Æ? (y/n): " confirm_uninstall;
               if [[ "$confirm_uninstall" =~ ^[Yy]$ ]]; then uninstall_bot; msg_info "–ë–æ—Ç —É–¥–∞–ª–µ–Ω. –í—ã—Ö–æ–¥."; return; else msg_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."; fi ;;
            
            3) rm -f /tmp/${SERVICE_NAME}_install.log; msg_question "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Systemd - Secure, ${GIT_BRANCH})? (y/n): " confirm;
               if [[ "$confirm" =~ ^[Yy]$ ]]; then uninstall_bot; install_systemd_secure; local_version=$(get_local_version "$README_FILE"); else msg_info "–û—Ç–º–µ–Ω–µ–Ω–æ."; fi ;;
            4) rm -f /tmp/${SERVICE_NAME}_install.log; msg_question "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Systemd - Root, ${GIT_BRANCH})? (y/n): " confirm;
               if [[ "$confirm" =~ ^[Yy]$ ]]; then uninstall_bot; install_systemd_root; local_version=$(get_local_version "$README_FILE"); else msg_info "–û—Ç–º–µ–Ω–µ–Ω–æ."; fi ;;
            5) rm -f /tmp/${SERVICE_NAME}_install.log; msg_question "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Docker - Secure, ${GIT_BRANCH})? (y/n): " confirm;
               if [[ "$confirm" =~ ^[Yy]$ ]]; then uninstall_bot; install_docker_secure; local_version=$(get_local_version "$README_FILE"); else msg_info "–û—Ç–º–µ–Ω–µ–Ω–æ."; fi ;;
            6) rm -f /tmp/${SERVICE_NAME}_install.log; msg_question "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Docker - Root, ${GIT_BRANCH})? (y/n): " confirm;
               if [[ "$confirm" =~ ^[Yy]$ ]]; then uninstall_bot; install_docker_root; local_version=$(get_local_version "$README_FILE"); else msg_info "–û—Ç–º–µ–Ω–µ–Ω–æ."; fi ;;

            7) break ;;
            *) msg_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." ;;
        esac
        if [[ "$choice" != "2" || ! "$confirm_uninstall" =~ ^[Yy]$ ]]; then
            echo; read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...";
        fi
    done
}

# --- [–°–ò–õ–¨–ù–û –ò–ó–ú–ï–ù–ï–ù–û] –ì–ª–∞–≤–Ω—ã–π "–†–æ—É—Ç–µ—Ä" ---
main() {
    clear
    msg_info "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º (–¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞: ${GIT_BRANCH})..."
    check_integrity # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞

    if [ "$INSTALL_TYPE" == "NONE" ] || [[ "$STATUS_MESSAGE" == *"–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞"* ]]; then
        if [[ "$STATUS_MESSAGE" == *"–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞"* ]]; then
            msg_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞."
            msg_warning "${STATUS_MESSAGE}" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
            msg_question "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " confirm_delete
            if [[ "$confirm_delete" =~ ^[Yy]$ ]]; then
                uninstall_bot # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è
            else
                msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.";
                exit 1;
            fi
        fi

        # –ú–µ–Ω—é –ü–µ—Ä–≤–æ–π –£—Å—Ç–∞–Ω–æ–≤–∫–∏
        clear
        echo -e "${C_BLUE}${C_BOLD}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${C_RESET}"
        echo -e "${C_BLUE}${C_BOLD}‚ïë      –£—Å—Ç–∞–Ω–æ–≤–∫–∞ VPS Telegram –ë–æ—Ç   ‚ïë${C_RESET}"
        echo -e "${C_BLUE}${C_BOLD}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${C_RESET}"
        echo -e "  ${C_YELLOW}–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.${C_RESET}"
        echo -e "  –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤–µ—Ç–∫–∏: ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        echo "--------------------------------------------------------"
        echo -e "  ${C_BOLD}–†–ï–ñ–ò–ú SYSTEMD (–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π):${C_RESET}"
        echo -e "  1) ${C_GREEN}Secure:${C_RESET}   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è (–ó–∞–ø—É—Å–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'tgbot')"
        echo -e "  2) ${C_YELLOW}Root:${C_RESET}     –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–ó–∞–ø—É—Å–∫ –æ—Ç 'root')"
        echo ""
        echo -e "  ${C_BOLD}–†–ï–ñ–ò–ú DOCKER (–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π):${C_RESET}"
        echo -e "  3) ${C_BLUE}Secure:${C_RESET}   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ö–æ—Å—Ç—É)"
        echo -e "  4) ${C_BLUE}Root:${C_RESET}     –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)"
        echo ""
        echo -e "  5) ${C_BOLD}–í—ã—Ö–æ–¥${C_RESET}"
        echo "--------------------------------------------------------"
        read -p "$(echo -e "${C_BOLD}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏ [1-5]: ${C_RESET}")" install_choice

        local install_done=false
        rm -f /tmp/${SERVICE_NAME}_install.log
        case $install_choice in
            1) install_systemd_secure; install_done=true ;;
            2) install_systemd_root; install_done=true ;;
            3) install_docker_secure; install_done=true ;;
            4) install_docker_root; install_done=true ;;
            5) msg_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."; exit 0 ;;
            *) msg_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä."; exit 1 ;;
        esac

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if [ "$install_done" = true ]; then
            msg_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...";
            check_integrity; # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
            if [[ "$STATUS_MESSAGE" == *"OK"* ]]; then
                msg_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                echo -e "${C_GREEN}${STATUS_MESSAGE}${C_RESET}"
                read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é..."
                main_menu
                echo -e "\n${C_CYAN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${C_RESET}"
                exit 0
            else
                msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!"
                msg_error "${C_RED}${STATUS_MESSAGE}${C_RESET}"
                msg_error "–õ–æ–≥: /tmp/${SERVICE_NAME}_install.log";
                exit 1;
            fi
        fi
    else
        # –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (INSTALL_TYPE != "NONE"), —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        main_menu;
        echo -e "\n${C_CYAN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${C_RESET}"
    fi
}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Root ---
if [ "$(id -u)" -ne 0 ]; then msg_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root –∏–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ sudo."; exit 1; fi

# --- –ó–∞–ø—É—Å–∫ ---
main

