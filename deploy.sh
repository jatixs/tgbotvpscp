#!/bin/bash

# --- –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç ---
orig_arg1="$1"

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_INSTALL_PATH="/opt/tg-bot"
SERVICE_NAME="tg-bot"
WATCHDOG_SERVICE_NAME="tg-watchdog"
SERVICE_USER="tgbot"
PYTHON_BIN="/usr/bin/python3"
VENV_PATH="${BOT_INSTALL_PATH}/venv"
README_FILE="${BOT_INSTALL_PATH}/README.md"

# --- GitHub –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –í–µ—Ç–∫–∞ ---
GITHUB_REPO="jatixs/tgbotvpscp"
GIT_BRANCH="${orig_arg1:-main}"
GITHUB_REPO_URL="https://github.com/${GITHUB_REPO}.git"
GITHUB_API_URL="https://api.github.com/repos/${GITHUB_REPO}/releases/latest"

# --- –¶–≤–µ—Ç–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–≤–æ–¥–∞ ---
C_RESET='\033[0m'; C_RED='\033[0;31m'; C_GREEN='\033[0;32m'; C_YELLOW='\033[0;33m'; C_BLUE='\033[0;34m'; C_CYAN='\033[0;36m'; C_BOLD='\033[1m'
msg_info() { echo -e "${C_CYAN}üîµ $1${C_RESET}"; }; msg_success() { echo -e "${C_GREEN}‚úÖ $1${C_RESET}"; }; msg_warning() { echo -e "${C_YELLOW}‚ö†Ô∏è  $1${C_RESET}"; }; msg_error() { echo -e "${C_RED}‚ùå $1${C_RESET}"; }; msg_question() { read -p "$(echo -e "${C_YELLOW}‚ùì $1${C_RESET}")" $2; }
spinner() { local pid=$1; local msg=$2; local spin='|/-\'; local i=0; while kill -0 $pid 2>/dev/null; do i=$(( (i+1) %4 )); printf "\r${C_BLUE}‚è≥ ${spin:$i:1} ${msg}...${C_RESET}"; sleep .1; done; printf "\r"; }
run_with_spinner() { local msg=$1; shift; ( "$@" >> /tmp/${SERVICE_NAME}_install.log 2>&1 ) & local pid=$!; spinner "$pid" "$msg"; wait $pid; local exit_code=$?; echo -ne "\033[2K\r"; if [ $exit_code -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è '$msg'. –ö–æ–¥: $exit_code"; msg_error "–õ–æ–≥: /tmp/${SERVICE_NAME}_install.log"; fi; return $exit_code; }

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ ---
if command -v wget &> /dev/null; then DOWNLOADER="wget -qO-"; elif command -v curl &> /dev/null; then DOWNLOADER="curl -sSLf"; else msg_error "–ù–∏ wget, –Ω–∏ curl –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."; exit 1; fi
if command -v curl &> /dev/null; then DOWNLOADER_PIPE="curl -s"; else DOWNLOADER_PIPE="wget -qO-"; fi

# --- –§—É–Ω–∫—Ü–∏–∏ –≤–µ—Ä—Å–∏–π ---
get_local_version() { local readme_path="$1"; local version="–ù–µ –Ω–∞–π–¥–µ–Ω–∞"; if [ -f "$readme_path" ]; then version=$(grep -oP 'img\.shields\.io/badge/version-v\K[\d\.]+' "$readme_path" || true); if [ -z "$version" ]; then version=$(grep -oP '<b\s*>v\K[\d\.]+(?=</b>)' "$readme_path" || true); fi; if [ -z "$version" ]; then version="–ù–µ –Ω–∞–π–¥–µ–Ω–∞"; else version="v$version"; fi; else version="–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"; fi; echo "$version"; }
get_latest_version() { local api_url="$1"; local latest_tag=$($DOWNLOADER_PIPE "$api_url" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "–û—à–∏–±–∫–∞ API"); if [[ "$latest_tag" == *"API rate limit exceeded"* ]]; then latest_tag="–õ–∏–º–∏—Ç API"; elif [[ "$latest_tag" == "–û—à–∏–±–∫–∞ API" ]] || [ -z "$latest_tag" ]; then latest_tag="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"; fi; echo "$latest_tag"; }

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ ---
INSTALL_STATUS="NOT_FOUND"; STATUS_MESSAGE="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å."
check_integrity() { if [ ! -d "${BOT_INSTALL_PATH}" ]; then INSTALL_STATUS="NOT_FOUND"; STATUS_MESSAGE="–ë–æ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."; return; fi; INSTALL_STATUS="OK"; local errors=(); if [ ! -d "${BOT_INSTALL_PATH}/.git" ]; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .git"); INSTALL_STATUS="PARTIAL"; fi; if [ ! -f "${BOT_INSTALL_PATH}/bot.py" ] || [ ! -f "${BOT_INSTALL_PATH}/watchdog.py" ] || [ ! -d "${BOT_INSTALL_PATH}/core" ] || [ ! -d "${BOT_INSTALL_PATH}/modules" ]; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã"); INSTALL_STATUS="PARTIAL"; fi; if [ ! -f "${VENV_PATH}/bin/python" ]; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç venv"); INSTALL_STATUS="PARTIAL"; fi; if [ ! -f "${BOT_INSTALL_PATH}/.env" ]; then errors+=("- (–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ) –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .env"); fi; if ! systemctl list-unit-files | grep -q "${SERVICE_NAME}.service"; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${SERVICE_NAME}.service"); INSTALL_STATUS="PARTIAL"; fi; if ! systemctl list-unit-files | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then errors+=("- –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ${WATCHDOG_SERVICE_NAME}.service"); INSTALL_STATUS="PARTIAL"; fi; if [ "$INSTALL_STATUS" == "OK" ]; then local bot_status; local watchdog_status; if systemctl is-active --quiet ${SERVICE_NAME}.service; then bot_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else bot_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi; if systemctl is-active --quiet ${WATCHDOG_SERVICE_NAME}.service; then watchdog_status="${C_GREEN}–ê–∫—Ç–∏–≤–µ–Ω${C_RESET}"; else watchdog_status="${C_RED}–ù–µ–∞–∫—Ç–∏–≤–µ–Ω${C_RESET}"; fi; STATUS_MESSAGE="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ OK (–ë–æ—Ç: ${bot_status} | –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å: ${watchdog_status})"; if [[ " ${errors[*]} " =~ " .env" ]]; then STATUS_MESSAGE+=" ${C_YELLOW}(–ù–µ—Ç .env!)${C_RESET}"; fi; elif [ "$INSTALL_STATUS" == "PARTIAL" ]; then STATUS_MESSAGE="${C_RED}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.${C_RESET}\n  –ü—Ä–æ–±–ª–µ–º–∞: ${errors[0]}"; fi; }

# --- –§—É–Ω–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
install_extras() {
    local packages_to_install=()
    local packages_to_remove=()

    # Fail2Ban Check
    if ! command -v fail2ban-client &> /dev/null; then
        msg_question "Fail2Ban –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_F2B
        if [[ "$INSTALL_F2B" =~ ^[Yy]$ ]]; then
            packages_to_install+=("fail2ban")
        else
            msg_info "–ü—Ä–æ–ø—É—Å–∫ Fail2Ban."
        fi
    else
        msg_success "Fail2Ban —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi

    # iperf3 Check
    if ! command -v iperf3 &> /dev/null; then
        msg_question "iperf3 –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –º–æ–¥—É–ª—è '–°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏'. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " INSTALL_IPERF3
        if [[ "$INSTALL_IPERF3" =~ ^[Yy]$ ]]; then
            packages_to_install+=("iperf3")
        else
            msg_info "–ü—Ä–æ–ø—É—Å–∫ iperf3. –ú–æ–¥—É–ª—å '–°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏' –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å."
        fi
    else
        msg_success "iperf3 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    fi

    # Speedtest CLI Check for removal
    if command -v speedtest &> /dev/null || dpkg -s speedtest-cli &> /dev/null; then
        msg_warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–∞–∫–µ—Ç 'speedtest-cli'."
        msg_question "–£–¥–∞–ª–∏—Ç—å 'speedtest-cli'? (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è, —Ç.–∫. –±–æ—Ç —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç iperf3) (y/n): " REMOVE_SPEEDTEST
        if [[ "$REMOVE_SPEEDTEST" =~ ^[Yy]$ ]]; then
            packages_to_remove+=("speedtest-cli")
        else
            msg_info "–ü—Ä–æ–ø—É—Å–∫ —É–¥–∞–ª–µ–Ω–∏—è speedtest-cli."
        fi
    fi

    # Package Removal
    if [ ${#packages_to_remove[@]} -gt 0 ]; then
        msg_info "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤: ${packages_to_remove[*]}"
        run_with_spinner "–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get remove --purge -y "${packages_to_remove[@]}"
        run_with_spinner "–û—á–∏—Å—Ç–∫–∞ apt" sudo apt-get autoremove -y
        msg_success "–£–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É–¥–∞–ª–µ–Ω—ã."
    fi

    # Package Installation
    if [ ${#packages_to_install[@]} -gt 0 ]; then
        msg_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: ${packages_to_install[*]}"
        run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get update -y
        run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo DEBIAN_FRONTEND=noninteractive apt-get install -y "${packages_to_install[@]}"
        if [ $? -ne 0 ]; then msg_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ–ø. –ø–∞–∫–µ—Ç–æ–≤."; exit 1; fi

        if [[ " ${packages_to_install[*]} " =~ " fail2ban " ]]; then
             sudo systemctl enable fail2ban &> /dev/null
             sudo systemctl start fail2ban &> /dev/null
             msg_success "Fail2Ban —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."
        fi
        if [[ " ${packages_to_install[*]} " =~ " iperf3 " ]]; then
             msg_success "iperf3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
        fi
        msg_success "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."
    fi
}
# --- [–ò–ó–ú–ï–ù–ï–ù–û] common_install_steps ---
common_install_steps() {
    echo "" > /tmp/${SERVICE_NAME}_install.log
    msg_info "1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤" sudo apt-get update -y || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞–∫–µ—Ç—ã"; exit 1; }
    # –î–æ–±–∞–≤–ª—è–µ–º python3-yaml –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
    run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (python3, pip, venv, git, curl, wget, sudo, yaml)" sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3 python3-pip python3-venv git curl wget sudo python3-yaml || { msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"; exit 1; }
    install_extras
}
# --- [–ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô] common_install_steps ---
install_logic() { local mode=$1; local branch_to_use=$2; local exec_user_cmd=""; local owner="root:root"; local owner_user="root"; if [ "$mode" == "secure" ]; then msg_info "2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}'..."; if ! id "${SERVICE_USER}" &>/dev/null; then sudo useradd -r -s /bin/false -d ${BOT_INSTALL_PATH} ${SERVICE_USER} || exit 1; fi; sudo mkdir -p ${BOT_INSTALL_PATH}; sudo chown -R ${SERVICE_USER}:${SERVICE_USER} ${BOT_INSTALL_PATH}; msg_info "3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ (–≤–µ—Ç–∫–∞ ${branch_to_use}) –æ—Ç ${SERVICE_USER}..."; run_with_spinner "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" sudo -u ${SERVICE_USER} git clone --branch "${branch_to_use}" "${GITHUB_REPO_URL}" "${BOT_INSTALL_PATH}" || exit 1; exec_user_cmd="sudo -u ${SERVICE_USER}"; owner="${SERVICE_USER}:${SERVICE_USER}"; owner_user=${SERVICE_USER}; else msg_info "2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."; sudo mkdir -p ${BOT_INSTALL_PATH}; msg_info "3. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ (–≤–µ—Ç–∫–∞ ${branch_to_use}) –æ—Ç root..."; run_with_spinner "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è" sudo git clone --branch "${branch_to_use}" "${GITHUB_REPO_URL}" "${BOT_INSTALL_PATH}" || exit 1; exec_user_cmd=""; owner="root:root"; owner_user="root"; fi; msg_info "4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ venv..."; if [ ! -d "${VENV_PATH}" ]; then run_with_spinner "–°–æ–∑–¥–∞–Ω–∏–µ venv" $exec_user_cmd ${PYTHON_BIN} -m venv "${VENV_PATH}" || exit 1; fi; run_with_spinner "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip" $exec_user_cmd "${VENV_PATH}/bin/pip" install --upgrade pip || msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip..."; run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python" $exec_user_cmd "${VENV_PATH}/bin/pip" install -r "${BOT_INSTALL_PATH}/requirements.txt" || exit 1; msg_info "5. –°–æ–∑–¥–∞–Ω–∏–µ .gitignore, logs/, config/..."; sudo -u ${owner_user} bash -c "cat > ${BOT_INSTALL_PATH}/.gitignore" <<< $'/venv/\n/__pycache__/\n*.pyc\n/.env\n/config/\n/logs/\n*.log\n*_flag.txt'; sudo chmod 644 "${BOT_INSTALL_PATH}/.gitignore"; sudo -u ${owner_user} mkdir -p "${BOT_INSTALL_PATH}/logs/bot" "${BOT_INSTALL_PATH}/logs/watchdog" "${BOT_INSTALL_PATH}/config"; msg_info "6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env..."; msg_question "–¢–æ–∫–µ–Ω: " T; msg_question "ID –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " A; msg_question "–ò–º—è (Username) –ê–¥–º–∏–Ω–∞ (–æ–ø—Ü): " U; msg_question "–ò–º—è –ë–æ—Ç–∞ (–æ–ø—Ü): " N; sudo bash -c "cat > ${BOT_INSTALL_PATH}/.env" <<< $(printf "TG_BOT_TOKEN=\"%s\"\nTG_ADMIN_ID=\"%s\"\nTG_ADMIN_USERNAME=\"%s\"\nTG_BOT_NAME=\"%s\"\nINSTALL_MODE=\"%s\"" "$T" "$A" "$U" "$N" "$mode"); sudo chown ${owner} "${BOT_INSTALL_PATH}/.env"; sudo chmod 600 "${BOT_INSTALL_PATH}/.env"; if [ "$mode" == "root" ]; then msg_info "7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo (root)..."; F="/etc/sudoers.d/98-${SERVICE_NAME}-root"; sudo tee ${F} > /dev/null <<< $'root ALL=(ALL) NOPASSWD: /bin/systemctl restart tg-bot.service\nroot ALL=(ALL) NOPASSWD: /bin/systemctl restart tg-watchdog.service\nroot ALL=(ALL) NOPASSWD: /sbin/reboot'; sudo chmod 440 ${F}; elif [ "$mode" == "secure" ]; then F="/etc/sudoers.d/99-${WATCHDOG_SERVICE_NAME}-restart"; sudo tee ${F} > /dev/null <<< $'Defaults:tgbot !requiretty\ntgbot ALL=(root) NOPASSWD: /bin/systemctl restart tg-bot.service'; sudo chmod 440 ${F}; msg_info "7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo (secure)..."; fi; create_and_start_service "${SERVICE_NAME}" "${BOT_INSTALL_PATH}/bot.py" "${mode}" "Telegram –ë–æ—Ç"; create_and_start_service "${WATCHDOG_SERVICE_NAME}" "${BOT_INSTALL_PATH}/watchdog.py" "root" "–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å"; local ip=$(curl -s --connect-timeout 5 ipinfo.io/ip || echo "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"); echo ""; echo "---"; msg_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"; msg_info "IP: ${ip}"; echo "---"; }
install_secure() { echo -e "\n${C_BOLD}=== –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"; common_install_steps; install_logic "secure" "${GIT_BRANCH}"; }
install_root() { echo -e "\n${C_BOLD}=== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç Root (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"; common_install_steps; install_logic "root" "${GIT_BRANCH}"; }
create_and_start_service() { local svc=$1; local script=$2; local mode=$3; local desc=$4; local user="root"; local group="root"; local env=""; local suffix=""; local after="After=network.target"; local req=""; if [ "$mode" == "secure" ] && [ "$svc" == "$SERVICE_NAME" ]; then user=${SERVICE_USER}; group=${SERVICE_USER}; suffix="(–ë–µ–∑–æ–ø–∞—Å–Ω–æ)"; elif [ "$svc" == "$SERVICE_NAME" ]; then user="root"; group="root"; suffix="(Root)"; elif [ "$svc" == "$WATCHDOG_SERVICE_NAME" ]; then user="root"; group="root"; after="After=network.target ${SERVICE_NAME}.service"; fi; env="EnvironmentFile=${BOT_INSTALL_PATH}/.env"; msg_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd –¥–ª—è ${svc}..."; FILE="/etc/systemd/system/${svc}.service"; sudo tee ${FILE} > /dev/null <<EOF
[Unit]
Description=${desc} –°–ª—É–∂–±–∞ ${suffix}
${after}
${req}
[Service]
Type=simple
User=${user}
Group=${group}
WorkingDirectory=${BOT_INSTALL_PATH}
${env}
ExecStart=${VENV_PATH}/bin/python ${script}
Restart=always
RestartSec=10
[Install]
WantedBy=multi-user.target
EOF
msg_info "–ó–∞–ø—É—Å–∫ ${svc}..."; sudo systemctl daemon-reload; sudo systemctl enable ${svc}.service &> /dev/null; run_with_spinner "–ó–∞–ø—É—Å–∫ ${svc}" sudo systemctl restart ${svc}; sleep 2; if sudo systemctl is-active --quiet ${svc}.service; then msg_success "${svc} –∑–∞–ø—É—â–µ–Ω!"; msg_info "–°—Ç–∞—Ç—É—Å: sudo systemctl status ${svc}"; else msg_error "${svc} –ù–ï –ó–ê–ü–£–°–¢–ò–õ–°–Ø. –õ–æ–≥–∏: sudo journalctl -u ${svc} -n 50 --no-pager"; if [ "$svc" == "$SERVICE_NAME" ]; then exit 1; fi; fi; }
uninstall_bot() { echo -e "\n${C_BOLD}=== –£–¥–∞–ª–µ–Ω–∏–µ –ë–æ—Ç–∞ ===${C_RESET}"; msg_info "1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª—É–∂–±..."; if systemctl list-units --full -all | grep -q "${SERVICE_NAME}.service"; then sudo systemctl stop ${SERVICE_NAME} &> /dev/null; sudo systemctl disable ${SERVICE_NAME} &> /dev/null; fi; if systemctl list-units --full -all | grep -q "${WATCHDOG_SERVICE_NAME}.service"; then sudo systemctl stop ${WATCHDOG_SERVICE_NAME} &> /dev/null; sudo systemctl disable ${WATCHDOG_SERVICE_NAME} &> /dev/null; fi; msg_info "2. –£–¥–∞–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."; sudo rm -f "/etc/systemd/system/${SERVICE_NAME}.service"; sudo rm -f "/etc/systemd/system/${WATCHDOG_SERVICE_NAME}.service"; sudo rm -f "/etc/sudoers.d/98-${SERVICE_NAME}-root"; sudo rm -f "/etc/sudoers.d/99-${WATCHDOG_SERVICE_NAME}-restart"; sudo systemctl daemon-reload; msg_info "3. –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–æ—Ç–∞..."; sudo rm -rf "${BOT_INSTALL_PATH}"; msg_info "4. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}'..."; if id "${SERVICE_USER}" &>/dev/null; then sudo userdel -r "${SERVICE_USER}" &> /dev/null || msg_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${SERVICE_USER}."; fi; msg_success "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."; }
update_bot() { echo -e "\n${C_BOLD}=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–æ—Ç–∞ (–≤–µ—Ç–∫–∞: ${GIT_BRANCH}) ===${C_RESET}"; if [ ! -d "${BOT_INSTALL_PATH}/.git" ]; then msg_error "–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å."; return 1; fi; local exec_user=""; if [ -f "${BOT_INSTALL_PATH}/.env" ]; then MODE=$(grep '^INSTALL_MODE=' "${BOT_INSTALL_PATH}/.env" | cut -d'=' -f2 | tr -d '"'); if [ "$MODE" == "secure" ]; then exec_user="sudo -u ${SERVICE_USER}"; fi; fi; msg_warning "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è."; msg_warning ".env, config/, logs/ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."; msg_info "1. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–≤–µ—Ç–∫–∞ ${GIT_BRANCH})..."; pushd "${BOT_INSTALL_PATH}" > /dev/null; run_with_spinner "Git fetch (–∑–∞–≥—Ä—É–∑–∫–∞)" $exec_user git fetch origin; run_with_spinner "Git reset --hard (—Å–±—Ä–æ—Å)" $exec_user git reset --hard "origin/${GIT_BRANCH}"; local st=$?; popd > /dev/null; if [ $st -ne 0 ]; then msg_error "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Git –Ω–µ —É–¥–∞–ª–æ—Å—å."; return 1; fi; msg_success "–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã."; msg_info "2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python..."; run_with_spinner "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pip" $exec_user "${VENV_PATH}/bin/pip" install -r "${BOT_INSTALL_PATH}/requirements.txt" --upgrade; if [ $? -ne 0 ]; then msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Pip –Ω–µ —É–¥–∞–ª–∞—Å—å."; return 1; fi; msg_info "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–ª—É–∂–±..."; if sudo systemctl restart ${SERVICE_NAME}; then msg_success "${SERVICE_NAME} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."; else msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ${SERVICE_NAME}."; return 1; fi; sleep 1; if sudo systemctl restart ${WATCHDOG_SERVICE_NAME}; then msg_success "${WATCHDOG_SERVICE_NAME} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω."; else msg_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å ${WATCHDOG_SERVICE_NAME}."; fi; echo -e "\n${C_GREEN}${C_BOLD}üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${C_RESET}\n"; }

# --- –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
main_menu() { local local_version=$(get_local_version "$README_FILE"); local latest_version=$(get_latest_version "$GITHUB_API_URL"); while true; do clear; echo -e "${C_BLUE}${C_BOLD}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${C_RESET}"; echo -e "${C_BLUE}${C_BOLD}‚ïë    –ú–µ–Ω–µ–¥–∂–µ—Ä VPS Telegram –ë–æ—Ç      ‚ïë${C_RESET}"; echo -e "${C_BLUE}${C_BOLD}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${C_RESET}"; local current_branch=$(cd "$BOT_INSTALL_PATH" && git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"); echo -e "  –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞ (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞): ${C_YELLOW}${current_branch}${C_RESET}"; echo -e "  –¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞ (–¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è): ${C_YELLOW}${GIT_BRANCH}${C_RESET}"; echo -e "  –õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${C_GREEN}${local_version}${C_RESET}"; echo -e "  –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è: ${C_CYAN}${latest_version}${C_RESET}"; if [ -z "$orig_arg1" ] && [ "$GIT_BRANCH" == "main" ]; then echo -e "  ${C_YELLOW}(–ü–æ–¥—Å–∫–∞–∑–∫–∞: –î–ª—è –¥–µ–π—Å—Ç–≤–∏—è —Å –¥—Ä—É–≥–æ–π –≤–µ—Ç–∫–æ–π, –∑–∞–ø—É—Å—Ç–∏—Ç–µ:${C_RESET}"; echo -e "  ${C_YELLOW} sudo bash $0 <–∏–º—è_–≤–µ—Ç–∫–∏>)${C_RESET}"; fi; check_integrity; echo "--------------------------------------------------------"; echo -n -e "  –°—Ç–∞—Ç—É—Å: "; if [ "$INSTALL_STATUS" == "OK" ]; then echo -e "${C_GREEN}${STATUS_MESSAGE}${C_RESET}"; else echo -e "${C_RED}${STATUS_MESSAGE}${C_RESET}"; msg_warning "  –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞."; fi; echo "--------------------------------------------------------"; echo -e "${C_GREEN}  1)${C_RESET} ${C_BOLD}–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–ë–µ–∑–æ–ø–∞—Å–Ω–æ):${C_RESET}  ${C_YELLOW}${GIT_BRANCH}${C_RESET}"; echo -e "${C_YELLOW}  2)${C_RESET} ${C_BOLD}–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (Root):${C_RESET}       ${C_YELLOW}${GIT_BRANCH}${C_RESET}"; echo -e "${C_CYAN}  3)${C_RESET} ${C_BOLD}–û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞:${C_RESET}               ${C_YELLOW}${GIT_BRANCH}${C_RESET}"; echo -e "${C_RED}  4)${C_RESET} ${C_BOLD}–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞${C_RESET}"; echo -e "  5) ${C_BOLD}–í—ã—Ö–æ–¥${C_RESET}"; echo "--------------------------------------------------------"; read -p "$(echo -e "${C_BOLD}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏ [1-5]: ${C_RESET}")" choice; case $choice in 1) rm -f /tmp/${SERVICE_NAME}_install.log; msg_question "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (–±–µ–∑–æ–ø–∞—Å–Ω–æ, ${GIT_BRANCH})? (y/n): " confirm; if [[ "$confirm" =~ ^[Yy]$ ]]; then uninstall_bot; install_secure; local_version=$(get_local_version "$README_FILE"); else msg_info "–û—Ç–º–µ–Ω–µ–Ω–æ."; fi ;; 2) rm -f /tmp/${SERVICE_NAME}_install.log; msg_question "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å (root, ${GIT_BRANCH})? (y/n): " confirm; if [[ "$confirm" =~ ^[Yy]$ ]]; then uninstall_bot; install_root; local_version=$(get_local_version "$README_FILE"); else msg_info "–û—Ç–º–µ–Ω–µ–Ω–æ."; fi ;; 3) rm -f /tmp/${SERVICE_NAME}_install.log; update_bot && local_version=$(get_local_version "$README_FILE") ;; 4) msg_question "–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –ü–û–õ–ù–û–°–¢–¨–Æ? (y/n): " confirm_uninstall; if [[ "$confirm_uninstall" =~ ^[Yy]$ ]]; then uninstall_bot; msg_info "–ë–æ—Ç —É–¥–∞–ª–µ–Ω. –í—ã—Ö–æ–¥."; return; else msg_info "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."; fi ;; 5) break ;; *) msg_error "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä." ;; esac; if [[ "$choice" != "4" || ! "$confirm_uninstall" =~ ^[Yy]$ ]]; then echo; read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é..."; fi; done; }

# --- –ì–ª–∞–≤–Ω—ã–π "–†–æ—É—Ç–µ—Ä" ---
main() {
    clear
    msg_info "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º (–¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞: ${GIT_BRANCH})..."
    check_integrity # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞

    if [ "$INSTALL_STATUS" == "NOT_FOUND" ] || [ "$INSTALL_STATUS" == "PARTIAL" ]; then
        if [ "$INSTALL_STATUS" == "PARTIAL" ]; then
            msg_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞."
            msg_warning "${STATUS_MESSAGE}" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
            msg_question "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å? (y/n): " confirm_delete
            if [[ "$confirm_delete" =~ ^[Yy]$ ]]; then
                uninstall_bot # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è
            else
                msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.";
                exit 1;
            fi
            # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Ç.–∫. —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ NOT_FOUND
            check_integrity
        fi

        # –ö—Ä–∞—Å–∏–≤—ã–π –±–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        clear
        echo -e "${C_BLUE}${C_BOLD}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${C_RESET}"
        echo -e "${C_BLUE}${C_BOLD}‚ïë      –£—Å—Ç–∞–Ω–æ–≤–∫–∞ VPS Telegram –ë–æ—Ç     ‚ïë${C_RESET}"
        echo -e "${C_BLUE}${C_BOLD}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${C_RESET}"
        echo -e "  ${C_YELLOW}–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.${C_RESET}"
        echo -e "  –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –≤–µ—Ç–∫–∏: ${C_YELLOW}${GIT_BRANCH}${C_RESET}"
        echo "--------------------------------------------------------"
        echo -e "${C_GREEN}  1)${C_RESET} ${C_BOLD}–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞:${C_RESET}   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è"
        echo -e "     (–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '${SERVICE_USER}')"
        echo ""
        echo -e "${C_YELLOW}  2)${C_RESET} ${C_BOLD}–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç Root:${C_RESET}      –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
        echo -e "     (–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç 'root', –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ sudo)"
        echo ""
        echo -e "  3) ${C_BOLD}–í—ã—Ö–æ–¥${C_RESET}"
        echo "--------------------------------------------------------"
        read -p "$(echo -e "${C_BOLD}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–ø—Ü–∏–∏ [1-3]: ${C_RESET}")" install_choice

        local install_done=false # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ñ–ª–∞–≥
        rm -f /tmp/${SERVICE_NAME}_install.log # –û—á–∏—â–∞–µ–º –ª–æ–≥ –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
        case $install_choice in
            1) install_secure; install_done=true ;;
            2) install_root; install_done=true ;;
            *) msg_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."; exit 0 ;;
        esac

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        if [ "$install_done" = true ]; then
            msg_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...";
            check_integrity; # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
            if [ "$INSTALL_STATUS" == "OK" ]; then
                msg_success "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                echo -e "${C_GREEN}${STATUS_MESSAGE}${C_RESET}"
                read -n 1 -s -r -p "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é..."
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                main_menu
                echo -e "\n${C_CYAN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${C_RESET}"
                exit 0 # –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ main_menu
            else
                msg_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!"
                msg_error "${C_RED}${STATUS_MESSAGE}${C_RESET}"
                msg_error "–õ–æ–≥: /tmp/${SERVICE_NAME}_install.log";
                exit 1;
            fi
        fi
        # –ï—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –º—ã —Å—é–¥–∞ –Ω–µ –¥–æ–π–¥–µ–º
    else
        # –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (INSTALL_STATUS == OK), —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        main_menu;
        echo -e "\n${C_CYAN}üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!${C_RESET}"
    fi
}

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ Root ---
if [ "$(id -u)" -ne 0 ]; then msg_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç –∏–º–µ–Ω–∏ root –∏–ª–∏ —Å –ø—Ä–∞–≤–∞–º–∏ sudo."; exit 1; fi

# --- –ó–∞–ø—É—Å–∫ ---
main
