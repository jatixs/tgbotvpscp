# /opt/tg-bot/modules/notifications.py
import asyncio
import logging
import psutil
import time
import re
import os
from datetime import datetime
from aiogram import F, Dispatcher, types, Bot
from aiogram.types import KeyboardButton
from aiogram.exceptions import TelegramBadRequest

from core.auth import is_allowed, send_access_denied_message
from core.messaging import delete_previous_message, send_alert
from core.shared_state import (
    LAST_MESSAGE_IDS, ALERTS_CONFIG, RESOURCE_ALERT_STATE, LAST_RESOURCE_ALERT_TIME
)
from core.utils import (
    save_alerts_config, get_country_flag, get_server_timezone_label, escape_html
)
from core.keyboards import get_alerts_menu_keyboard
from core.config import (
    RESOURCE_CHECK_INTERVAL, CPU_THRESHOLD, RAM_THRESHOLD, DISK_THRESHOLD, 
    RESOURCE_ALERT_COOLDOWN
)

BUTTON_TEXT = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"

def get_button() -> KeyboardButton:
    return KeyboardButton(text=BUTTON_TEXT)

def register_handlers(dp: Dispatcher):
    dp.message(F.text == BUTTON_TEXT)(notifications_menu_handler)
    
    # Callbacks
    dp.callback_query(F.data.startswith("toggle_alert_"))(cq_toggle_alert)
    dp.callback_query(F.data == "alert_downtime_stub")(cq_alert_downtime_stub)

def start_background_tasks(bot: Bot) -> list[asyncio.Task]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ main()"""
    
    # 1. –ú–æ–Ω–∏—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤
    task_resources = asyncio.create_task(resource_monitor(bot), name="ResourceMonitor")
    
    # 2. –ú–æ–Ω–∏—Ç–æ—Ä SSH
    ssh_log_file_to_monitor = None
    if os.path.exists("/var/log/secure"): 
        ssh_log_file_to_monitor = "/var/log/secure"
    elif os.path.exists("/var/log/auth.log"): 
        ssh_log_file_to_monitor = "/var/log/auth.log"
        
    task_logins = None
    if ssh_log_file_to_monitor:
        task_logins = asyncio.create_task(
            reliable_tail_log_monitor(bot, ssh_log_file_to_monitor, "logins", parse_ssh_log_line), 
            name="LoginsMonitor"
        )
    else: 
        logging.warning("–ù–µ –Ω–∞–π–¥–µ–Ω –ª–æ–≥ SSH. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ SSH (logins) –Ω–µ –∑–∞–ø—É—â–µ–Ω.")
            
    # 3. –ú–æ–Ω–∏—Ç–æ—Ä F2B
    f2b_log_file_to_monitor = "/var/log/fail2ban.log"
    task_bans = asyncio.create_task(
        reliable_tail_log_monitor(bot, f2b_log_file_to_monitor, "bans", parse_f2b_log_line), 
        name="BansMonitor"
    )

    tasks = [task_resources, task_bans]
    if task_logins:
        tasks.append(task_logins)
        
    return tasks

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---

async def notifications_menu_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "notifications_menu"

    if not is_allowed(user_id, command):
        await send_access_denied_message(message.bot, user_id, chat_id, command)
        return

    await delete_previous_message(user_id, command, chat_id, message.bot)

    keyboard = get_alerts_menu_keyboard(user_id)
    sent_message = await message.answer(
        "üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

async def cq_toggle_alert(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, "toggle_alert_resources"): 
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        alert_type = callback.data.split('_', 2)[-1]
        if alert_type not in ["resources", "logins", "bans"]: 
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–ª–µ—Ä—Ç–∞: {alert_type}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data –≤ cq_toggle_alert: {e} (data: {callback.data})")
        await callback.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π callback).", show_alert=True)
        return
        
    if user_id not in ALERTS_CONFIG: 
        ALERTS_CONFIG[user_id] = {}
        
    current_state = ALERTS_CONFIG[user_id].get(alert_type, False)
    new_state = not current_state
    ALERTS_CONFIG[user_id][alert_type] = new_state
    save_alerts_config() 
    
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª '{alert_type}' –Ω–∞ {new_state}")
    new_keyboard = get_alerts_menu_keyboard(user_id)
    
    try:
        await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        if alert_type == "resources": alert_name = "–†–µ—Å—É—Ä—Å—ã"
        elif alert_type == "logins": alert_name = "–í—Ö–æ–¥—ã/–í—ã—Ö–æ–¥—ã SSH"
        else: alert_name = "–ë–∞–Ω—ã"
        await callback.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è '{alert_name}' {'‚úÖ –í–ö–õ–Æ–ß–ï–ù–´' if new_state else '‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–´'}.")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): await callback.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ cq_toggle_alert: {e}")
        await callback.answer("‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)

async def cq_alert_downtime_stub(callback: types.CallbackQuery):
    await callback.answer(
        "‚è≥ –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–∞—É–Ω—Ç–∞–π–º–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, UptimeRobot).", 
        show_alert=True
    )

# --- –ü–∞—Ä—Å–µ—Ä—ã –ª–æ–≥–æ–≤ ---

async def parse_ssh_log_line(line: str) -> str | None:
    match = re.search(r"Accepted\s+(?:\S+)\s+for\s+(\S+)\s+from\s+(\S+)", line)
    if match:
        try:
            user = escape_html(match.group(1))
            ip = escape_html(match.group(2))
            flag = await asyncio.to_thread(get_country_flag, ip)
            tz_label = get_server_timezone_label()
            now_time = datetime.now().strftime('%H:%M:%S')
            return (f"üîî <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ö–æ–¥ SSH</b>\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user}</b>\n"
                    f"üåç IP: <b>{flag} {ip}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è: <b>{now_time}</b>{tz_label}")
        except Exception as e:
            logging.warning(f"parse_ssh_log_line: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
    return None

async def parse_f2b_log_line(line: str) -> str | None:
    match = re.search(r"fail2ban\.actions.* Ban\s+(\S+)", line)
    if match:
        try:
            ip = escape_html(match.group(1).strip(" \n\t,"))
            flag = await asyncio.to_thread(get_country_flag, ip)
            tz_label = get_server_timezone_label()
            now_time = datetime.now().strftime('%H:%M:%S')
            return (f"üõ°Ô∏è <b>Fail2Ban –∑–∞–±–∞–Ω–∏–ª IP</b>\n\n"
                    f"üåç IP: <b>{flag} {ip}</b>\n"
                    f"‚è∞ –í—Ä–µ–º—è: <b>{now_time}</b>{tz_label}")
        except Exception as e:
            logging.warning(f"parse_f2b_log_line: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return None
    return None

# --- –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ---

async def resource_monitor(bot: Bot):
    global RESOURCE_ALERT_STATE, LAST_RESOURCE_ALERT_TIME
    logging.info("–ú–æ–Ω–∏—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω.")
    await asyncio.sleep(15)

    while True:
        try:
            def check_resources_sync():
                cpu = psutil.cpu_percent(interval=1)
                ram = psutil.virtual_memory().percent
                disk = psutil.disk_usage('/').percent
                return cpu, ram, disk

            cpu_usage, ram_usage, disk_usage = await asyncio.to_thread(check_resources_sync)
            logging.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤: CPU={cpu_usage}%, RAM={ram_usage}%, Disk={disk_usage}%")

            alerts_to_send = []
            current_time = time.time()

            # –õ–æ–≥–∏–∫–∞ CPU
            if cpu_usage >= CPU_THRESHOLD:
                if not RESOURCE_ALERT_STATE["cpu"]:
                    msg = f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ CPU!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{cpu_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {CPU_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç CPU.")
                    RESOURCE_ALERT_STATE["cpu"] = True
                    LAST_RESOURCE_ALERT_TIME["cpu"] = current_time
                elif current_time - LAST_RESOURCE_ALERT_TIME["cpu"] > RESOURCE_ALERT_COOLDOWN:
                    msg = f"‚ÄºÔ∏è <b>CPU –≤—Å–µ –µ—â–µ –í–´–°–û–ö–ò–ô!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{cpu_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {CPU_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç CPU.")
                    LAST_RESOURCE_ALERT_TIME["cpu"] = current_time
            elif cpu_usage < CPU_THRESHOLD and RESOURCE_ALERT_STATE["cpu"]:
                 alerts_to_send.append(f"‚úÖ <b>–ù–∞–≥—Ä—É–∑–∫–∞ CPU –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–∞—Å—å.</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{cpu_usage:.1f}%</b>")
                 logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ CPU.")
                 RESOURCE_ALERT_STATE["cpu"] = False
                 LAST_RESOURCE_ALERT_TIME["cpu"] = 0

            # –õ–æ–≥–∏–∫–∞ RAM
            if ram_usage >= RAM_THRESHOLD:
                if not RESOURCE_ALERT_STATE["ram"]:
                    msg = f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ RAM!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{ram_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {RAM_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç RAM.")
                    RESOURCE_ALERT_STATE["ram"] = True
                    LAST_RESOURCE_ALERT_TIME["ram"] = current_time
                elif current_time - LAST_RESOURCE_ALERT_TIME["ram"] > RESOURCE_ALERT_COOLDOWN:
                    msg = f"‚ÄºÔ∏è <b>RAM –≤—Å–µ –µ—â–µ –í–´–°–û–ö–ê–Ø!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{ram_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {RAM_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç RAM.")
                    LAST_RESOURCE_ALERT_TIME["ram"] = current_time
            elif ram_usage < RAM_THRESHOLD and RESOURCE_ALERT_STATE["ram"]:
                 alerts_to_send.append(f"‚úÖ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–æ—Å—å.</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{ram_usage:.1f}%</b>")
                 logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ RAM.")
                 RESOURCE_ALERT_STATE["ram"] = False
                 LAST_RESOURCE_ALERT_TIME["ram"] = 0

            # –õ–æ–≥–∏–∫–∞ Disk
            if disk_usage >= DISK_THRESHOLD:
                if not RESOURCE_ALERT_STATE["disk"]:
                    msg = f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ Disk!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{disk_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {DISK_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç Disk.")
                    RESOURCE_ALERT_STATE["disk"] = True
                    LAST_RESOURCE_ALERT_TIME["disk"] = current_time
                elif current_time - LAST_RESOURCE_ALERT_TIME["disk"] > RESOURCE_ALERT_COOLDOWN:
                    msg = f"‚ÄºÔ∏è <b>Disk –≤—Å–µ –µ—â–µ –í–´–°–û–ö–ò–ô!</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{disk_usage:.1f}%</b> (–ü–æ—Ä–æ–≥: {DISK_THRESHOLD}%)"
                    alerts_to_send.append(msg)
                    logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∞–ª–µ—Ä—Ç Disk.")
                    LAST_RESOURCE_ALERT_TIME["disk"] = current_time
            elif disk_usage < DISK_THRESHOLD and RESOURCE_ALERT_STATE["disk"]:
                 alerts_to_send.append(f"‚úÖ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Disk –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–ª–æ—Å—å.</b>\n–¢–µ–∫—É—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <b>{disk_usage:.1f}%</b>")
                 logging.info("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–ª–µ—Ä—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ Disk.")
                 RESOURCE_ALERT_STATE["disk"] = False
                 LAST_RESOURCE_ALERT_TIME["disk"] = 0

            if alerts_to_send:
                full_alert_message = "\n\n".join(alerts_to_send)
                await send_alert(bot, full_alert_message, "resources")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")

        await asyncio.sleep(RESOURCE_CHECK_INTERVAL)

async def reliable_tail_log_monitor(bot: Bot, log_file_path: str, alert_type: str, parse_function: callable):
    process = None
    stdout_closed = asyncio.Event()
    stderr_closed = asyncio.Event()

    async def close_pipe(pipe, name, event):
        if pipe and not pipe.at_eof():
            try:
                pipe.feed_eof()
                logging.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–π–ø–∞ {name}...")
            except Exception as e:
                logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—à–∏–±–∫–∞ –ø—Ä–∏ feed_eof() –¥–ª—è –ø–∞–π–ø–∞ {name}: {e}")
            finally:
                 event.set()
        else:
            event.set()

    try:
        while True:
            stdout_closed.clear()
            stderr_closed.clear()

            if not await asyncio.to_thread(os.path.exists, log_file_path):
                 logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä: {log_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60—Å.")
                 await asyncio.sleep(60)
                 continue

            logging.info(f"–ó–∞–ø—É—Å–∫ (–∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫) –º–æ–Ω–∏—Ç–æ—Ä–∞ {alert_type} –¥–ª—è {log_file_path}")
            try:
                process = await asyncio.create_subprocess_shell(
                    f"tail -n 0 -f {log_file_path}",
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type} (PID: {process.pid}) —Å–ª–µ–¥–∏—Ç –∑–∞ {log_file_path}")

                while True:
                    tasks = [
                        asyncio.create_task(process.stdout.readline()),
                        asyncio.create_task(process.stderr.readline())
                    ]
                    done, pending = await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)

                    for task in pending: task.cancel()

                    stdout_line = None
                    stderr_line = None

                    for task in done:
                        try:
                            result = task.result()
                            if task == tasks[0]: stdout_line = result
                            else: stderr_line = result
                        except asyncio.CancelledError: pass
                        except Exception as e:
                             logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ø–∞–π–ø–∞: {e}")
                             if process.returncode is None: await asyncio.sleep(0.1)
                             if process.returncode is not None: break

                    if stdout_line:
                        line_str = stdout_line.decode('utf-8', errors='ignore').strip()
                        message = await parse_function(line_str)
                        if message: await send_alert(bot, message, alert_type)
                    elif stdout_line is not None:
                         logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: stdout –¥–æ—Å—Ç–∏–≥ EOF.")
                         stdout_closed.set()

                    if stderr_line:
                        stderr_str = stderr_line.decode('utf-8', errors='ignore').strip()
                        logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type} (tail stderr): {stderr_str}")
                    elif stderr_line is not None:
                         logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: stderr –¥–æ—Å—Ç–∏–≥ EOF.")
                         stderr_closed.set()

                    if process.returncode is not None:
                        logging.warning(f"–ü—Ä–æ—Ü–µ—Å—Å 'tail' –¥–ª—è {alert_type} (PID: {process.pid if process else 'N/A'}) —É–º–µ—Ä —Å –∫–æ–¥–æ–º {process.returncode}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
                        stdout_closed.set()
                        stderr_closed.set()
                        process = None
                        break

                    if stdout_closed.is_set() and stderr_closed.is_set() and process and process.returncode is None:
                         logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û–±–∞ –ø–∞–π–ø–∞ –∑–∞–∫—Ä—ã—Ç—ã, –Ω–æ –ø—Ä–æ—Ü–µ—Å—Å tail (PID: {process.pid}) –µ—â–µ –∂–∏–≤. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
                         break

            except PermissionError:
                 logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —á—Ç–µ–Ω–∏–µ {log_file_path}. –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 60—Å.")
                 await asyncio.sleep(60)
            except Exception as e:
                pid_info = f"(PID: {process.pid})" if process else ""
                logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º —Ü–∏–∫–ª–µ reliable_tail_log_monitor ({log_file_path}) {pid_info}: {e}")
                if process and process.returncode is None:
                    try: process.terminate()
                    except ProcessLookupError: pass
                process = None
                await asyncio.sleep(10)

    except asyncio.CancelledError:
         logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type} –æ—Ç–º–µ–Ω–µ–Ω (—à—Ç–∞—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ).")

    finally:
        pid = process.pid if process else None
        logging.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∞ {alert_type}, –ø–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ 'tail' (PID: {pid})...")

        pipe_close_tasks = []
        if process:
             if hasattr(process, 'stdout') and process.stdout:
                 pipe_close_tasks.append(close_pipe(process.stdout, 'stdout', stdout_closed))
             else: stdout_closed.set()
             if hasattr(process, 'stderr') and process.stderr:
                 pipe_close_tasks.append(close_pipe(process.stderr, 'stderr', stderr_closed))
             else: stderr_closed.set()

        if pipe_close_tasks:
             try:
                 await asyncio.wait_for(asyncio.gather(*pipe_close_tasks), timeout=1.0)
                 logging.debug(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–π–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
             except asyncio.TimeoutError:
                 logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–∞–π–ø–æ–≤.")
             except Exception as pipe_e:
                  logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–∞–π–ø–æ–≤: {pipe_e}")

        if process and process.returncode is None:
            logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ tail (PID: {pid}).")
            try:
                process.terminate()
                try:
                    await asyncio.wait_for(process.wait(), timeout=2.0)
                    logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (terminate).")
                except asyncio.TimeoutError:
                    logging.warning(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 2 —Å–µ–∫ –ø–æ—Å–ª–µ terminate(). –ü–æ–ø—ã—Ç–∫–∞ kill().")
                    try:
                        process.kill()
                        await asyncio.wait_for(process.wait(), timeout=1.0)
                        logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) —É—Å–ø–µ—à–Ω–æ —É–±–∏—Ç (kill).")
                    except asyncio.TimeoutError: logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ kill().")
                    except ProcessLookupError: pass
                    except Exception as kill_e: logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –û—à–∏–±–∫–∞ –ø—Ä–∏ kill() 'tail' (PID: {pid}): {kill_e}")
            except ProcessLookupError: pass
            except Exception as e: logging.error(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ 'tail' (PID: {pid}): {e}")
        elif process:
             logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: 'tail' (PID: {pid}) —É–∂–µ –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω (–∫–æ–¥: {process.returncode}) –¥–æ –±–ª–æ–∫–∞ finally.")
        else:
            logging.info(f"–ú–æ–Ω–∏—Ç–æ—Ä {alert_type}: –ü—Ä–æ—Ü–µ—Å—Å tail –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ —É–∂–µ –±—ã–ª –æ—á–∏—â–µ–Ω.")