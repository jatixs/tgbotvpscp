# /opt/tg-bot/modules/speedtest.py
import asyncio
import re  # <- –ò–ú–ü–û–†–¢–ò–†–û–í–ê–ù–û
import logging
from aiogram import F, Dispatcher, types
from aiogram.types import KeyboardButton

from core.auth import is_allowed, send_access_denied_message
from core.messaging import delete_previous_message
from core.shared_state import LAST_MESSAGE_IDS
from core.utils import escape_html

BUTTON_TEXT = "üöÄ –°–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏"


def get_button() -> KeyboardButton:
    return KeyboardButton(text=BUTTON_TEXT)


def register_handlers(dp: Dispatcher):
    dp.message(F.text == BUTTON_TEXT)(speedtest_handler)


async def speedtest_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "speedtest"
    if not is_allowed(user_id, command):
        await send_access_denied_message(message.bot, user_id, chat_id, command)
        return

    await message.bot.send_chat_action(chat_id=chat_id, action="typing")
    await delete_previous_message(user_id, command, chat_id, message.bot)

    sent_message = await message.answer("üöÄ –ó–∞–ø—É—Å–∫ speedtest (Cloudflare)... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã.")
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

    # --- [–ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô] ---
    cmd = "npx speed-cloudflare-cli"
    # --- [–ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô] ---
    
    process = await asyncio.create_subprocess_shell(cmd, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    stdout, stderr = await process.communicate()

    await delete_previous_message(user_id, command, chat_id, message.bot)

    if process.returncode == 0:
        output = stdout.decode('utf-8', errors='ignore')
        try:
            # --- [–ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô –ü–ê–†–°–ò–ù–ì–ê] ---
            download_speed = "N/A"
            upload_speed = "N/A"
            ip = "N/A"
            latency = "N/A"
            jitter = "N/A"

            # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            down_match = re.search(r"Download speed:\s*([\d\.]+)", output)
            up_match = re.search(r"Upload speed:\s*([\d\.]+)", output)
            ip_match = re.search(r"Your IP:\s*([^\s\(]+)", output)
            latency_match = re.search(r"Latency:\s*([\d\.]+)", output)
            jitter_match = re.search(r"Jitter:\s*([\d\.]+)", output)

            if down_match:
                download_speed = down_match.group(1)
            if up_match:
                upload_speed = up_match.group(1)
            if ip_match:
                ip = ip_match.group(1)
            if latency_match:
                latency = latency_match.group(1)
            if jitter_match:
                jitter = jitter_match.group(1)

            response_text = (
                f"üöÄ <b>Speedtest –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (Cloudflare):</b>\n\n"
                f"‚¨áÔ∏è <b>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ / Download:</b> {download_speed} –ú–±–∏—Ç/—Å\n"
                f"‚¨ÜÔ∏è <b>–ó–∞–≥—Ä—É–∑–∫–∞ / Upload:</b> {upload_speed} –ú–±–∏—Ç/—Å\n"
                f"‚è± <b>–ó–∞–¥–µ—Ä–∂–∫–∞ / Latency:</b> {latency} –º—Å\n"
                f"üìä <b>–î–∂–∏—Ç—Ç–µ—Ä / Jitter:</b> {jitter} –º—Å\n\n"
                f"üåç <b>–í–∞—à IP / Your IP:</b> <code>{escape_html(ip)}</code>"
            )
            # --- [–ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –ü–ê–†–°–ò–ù–ì–ê] ---

        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ speedtest: {e}")
            response_text = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ speedtest: {escape_html(str(e))}"
    else:
        error_output = stderr.decode(
            'utf-8',
            errors='ignore') or stdout.decode(
            'utf-8',
            errors='ignore')
        logging.error(
            f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è speedtest. –ö–æ–¥: {process.returncode}. –í—ã–≤–æ–¥: {error_output}")
        
        # --- [–ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö] ---
        if "command not found" in error_output.lower() or "not found" in error_output.lower() or "ENOENT" in error_output:
             response_text = "‚ùå <b>–û—à–∏–±–∫–∞:</b> <code>npx</code> –∏–ª–∏ <code>speed-cloudflare-cli</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ <b>NPM</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (<code>sudo apt install npm</code>) –∏ <code>npx</code> –¥–æ—Å—Ç—É–ø–µ–Ω."
        else:
            response_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ speedtest:\n<pre>{escape_html(error_output)}</pre>"
        # --- [–ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö] ---

    sent_message_final = await message.answer(response_text, parse_mode="HTML", disable_web_page_preview=True)
    LAST_MESSAGE_IDS.setdefault(
        user_id, {})[command] = sent_message_final.message_id