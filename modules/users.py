# /opt/tg-bot/modules/users.py
import asyncio
import logging
from aiogram import F, Dispatcher, types
from aiogram.types import KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º 'get_user_name' –≤ –∏–º–ø–æ—Ä—Ç
from core.auth import is_allowed, send_access_denied_message, refresh_user_names, save_users, get_user_name
from core.messaging import delete_previous_message
from core.shared_state import LAST_MESSAGE_IDS, ALLOWED_USERS, USER_NAMES, ALERTS_CONFIG
from core.config import ADMIN_USER_ID
from core.keyboards import (
    get_manage_users_keyboard, get_delete_users_keyboard, get_change_group_keyboard,
    get_group_selection_keyboard, get_self_delete_confirmation_keyboard, get_back_keyboard
)

BUTTON_TEXT = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"

class ManageUsersStates(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_group = State()

def get_button() -> KeyboardButton:
    return KeyboardButton(text=BUTTON_TEXT)

def register_handlers(dp: Dispatcher):
    # Text handlers
    dp.message(F.text == BUTTON_TEXT)(manage_users_handler)
    dp.message(F.text == "üÜî –ú–æ–π ID")(text_get_id_handler) # –°–≤—è–∑–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
    
    # FSM handlers
    dp.message(StateFilter(ManageUsersStates.waiting_for_user_id))(process_add_user_id)
    dp.callback_query(StateFilter(ManageUsersStates.waiting_for_group), F.data.startswith("set_group_new_"))(process_add_user_group)
    
    # Callback handlers
    dp.callback_query(F.data == "back_to_manage_users")(cq_back_to_manage_users)
    dp.callback_query(F.data == "get_id_inline")(cq_get_id_inline)
    
    # Add
    dp.callback_query(F.data == "add_user")(cq_add_user_start)
    
    # Delete
    dp.callback_query(F.data == "delete_user")(cq_delete_user_list)
    dp.callback_query(F.data.startswith("delete_user_"))(cq_delete_user_confirm)
    dp.callback_query(F.data.startswith("request_self_delete_"))(cq_request_self_delete)
    dp.callback_query(F.data.startswith("confirm_self_delete_"))(cq_confirm_self_delete)
    dp.callback_query(F.data == "back_to_delete_users")(cq_back_to_delete_users)
    
    # Change Group
    dp.callback_query(F.data == "change_group")(cq_change_group_list)
    dp.callback_query(F.data.startswith("select_user_change_group_"))(cq_select_user_for_group_change)
    
    # Set Group (–¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    dp.callback_query(StateFilter(None), F.data.startswith("set_group_"))(cq_set_group_existing)


# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---

async def manage_users_handler(message: types.Message):
    user_id = message.from_user.id
    command = "manage_users"
    if not is_allowed(user_id, command):
        await message.bot.send_message(message.chat.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    await delete_previous_message(user_id, command, message.chat.id, message.bot)

    user_list = "\n".join([
        f" ‚Ä¢ {USER_NAMES.get(str(uid), f'ID: {uid}')} (<b>{group}</b>)"
        for uid, group in ALLOWED_USERS.items() if uid != ADMIN_USER_ID
    ])
    if not user_list:
        user_list = "–î—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç."

    sent_message = await message.answer(
        f"üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>:\n\n{user_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_manage_users_keyboard(),
        parse_mode="HTML"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

async def text_get_id_handler(message: types.Message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    command = "get_id"
    if not is_allowed(user_id, command):
        await send_access_denied_message(message.bot, user_id, chat_id, command)
        return
    
    await delete_previous_message(user_id, command, message.chat.id, message.bot)
    sent_message = await message.answer(
        f"–í–∞—à ID: <code>{user_id}</code>\n\n"
        "<i>(–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–µ –≤ –º–µ–Ω—é 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏')</i>", 
        parse_mode="HTML"
    )
    LAST_MESSAGE_IDS.setdefault(user_id, {})[command] = sent_message.message_id

async def cq_get_id_inline(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    command = "get_id_inline"
    if not is_allowed(user_id, command):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        await callback.message.edit_text(
            f"–í–∞—à ID: <code>{user_id}</code>",
            parse_mode="HTML",
            reply_markup=get_back_keyboard("back_to_manage_users")
        )
        await callback.answer(f"–í–∞—à ID: {user_id}")
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): await callback.answer("–í—ã —É–∂–µ –∑–¥–µ—Å—å.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_get_id_inline (edit): {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_get_id_inline: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

async def cq_back_to_manage_users(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    command = "back_to_manage_users"
    if not is_allowed(user_id, command):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        await state.clear() 
        user_list = "\n".join([
            f" ‚Ä¢ {USER_NAMES.get(str(uid), f'ID: {uid}')} (<b>{group}</b>)"
            for uid, group in ALLOWED_USERS.items() if uid != ADMIN_USER_ID
        ])
        if not user_list: user_list = "–î—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç."
        await callback.message.edit_text(
            f"üë§ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>:\n\n{user_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_manage_users_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer()
    except TelegramBadRequest as e:
        if "message is not modified" in str(e): await callback.answer("–í—ã —É–∂–µ –∑–¥–µ—Å—å.")
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_back_to_manage_users (edit): {e}")
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_back_to_manage_users: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

# --- Add User ---
async def cq_add_user_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if not is_allowed(user_id, "add_user"):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_back_keyboard("back_to_manage_users"),
        parse_mode="HTML"
    )
    await state.set_state(ManageUsersStates.waiting_for_user_id)
    await callback.answer()

async def process_add_user_id(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    original_question_msg_id = None
    if user_id in LAST_MESSAGE_IDS and "manage_users" in LAST_MESSAGE_IDS[user_id]:
        original_question_msg_id = LAST_MESSAGE_IDS[user_id].get("manage_users")
    elif message.reply_to_message and message.reply_to_message.from_user.is_bot:
         original_question_msg_id = message.reply_to_message.message_id

    try:
        new_user_id = int(message.text.strip())
        if new_user_id in ALLOWED_USERS:
            await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
            return

        await state.update_data(new_user_id=new_user_id)

        if original_question_msg_id:
            try:
                await message.bot.edit_message_text(
                    "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    chat_id=message.chat.id,
                    message_id=original_question_msg_id,
                    reply_markup=get_group_selection_keyboard()
                )
                await message.delete()
            except TelegramBadRequest as edit_err:
                 logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {original_question_msg_id} –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã: {edit_err}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤–æ–µ.")
                 await message.reply(
                    "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                    reply_markup=get_group_selection_keyboard()
                 )
        else:
             await message.reply(
                "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                reply_markup=get_group_selection_keyboard()
             )

        await state.set_state(ManageUsersStates.waiting_for_group)
    except ValueError:
        await message.reply("‚õî –ù–µ–≤–µ—Ä–Ω—ã–π ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π Telegram ID.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_add_user_id: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def process_add_user_group(callback: types.CallbackQuery, state: FSMContext):
    try:
        group = callback.data.split('_')[-1]
        user_data = await state.get_data()
        new_user_id = user_data.get('new_user_id')

        if not new_user_id:
             raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM.")

        ALLOWED_USERS[new_user_id] = group
        
        # --- –ù–ê–ß–ê–õ–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        
        # 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
        # USER_NAMES[str(new_user_id)] = f"–ù–æ–≤—ã–π_{new_user_id}"
        # save_users()
        # asyncio.create_task(refresh_user_names(callback.bot))

        # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é: –ø–æ–ª—É—á–∞–µ–º –∏–º—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è (–∏–∑ core/auth.py) —Å–∞–º–∞ –ø–æ–ª—É—á–∏—Ç –∏–º—è, –æ–±–Ω–æ–≤–∏—Ç USER_NAMES –∏ –≤—ã–∑–æ–≤–µ—Ç save_users()
        new_user_name = await get_user_name(callback.bot, new_user_id)
        
        logging.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –¥–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_user_name} ({new_user_id}) –≤ –≥—Ä—É–ø–ø—É '{group}'")

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∏–º—è
        await callback.message.edit_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{new_user_name}</b> (<code>{new_user_id}</code>) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É <b>{group}</b>.", 
            parse_mode="HTML", 
            reply_markup=get_back_keyboard("back_to_manage_users")
        )
        
        # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
        
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ process_add_user_group: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=get_back_keyboard("back_to_manage_users"))
    finally:
        await callback.answer()

# --- Delete User ---
async def cq_delete_user_list(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, "delete_user"):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    keyboard = get_delete_users_keyboard(user_id)
    await callback.message.edit_text("‚ûñ <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

async def cq_delete_user_confirm(callback: types.CallbackQuery):
    admin_id = callback.from_user.id
    if not is_allowed(admin_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        user_id_to_delete = int(callback.data.split('_')[-1])
        if user_id_to_delete == ADMIN_USER_ID:
            await callback.answer("‚õî –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –ì–ª–∞–≤–Ω–æ–≥–æ –ê–¥–º–∏–Ω–∞.", show_alert=True)
            return
        if user_id_to_delete not in ALLOWED_USERS:
            await callback.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            keyboard = get_delete_users_keyboard(admin_id)
            await callback.message.edit_reply_markup(reply_markup=keyboard)
            return

        deleted_user_name = USER_NAMES.get(str(user_id_to_delete), f"ID: {user_id_to_delete}")
        deleted_group = ALLOWED_USERS.pop(user_id_to_delete, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        USER_NAMES.pop(str(user_id_to_delete), None)
        save_users()
        logging.info(f"–ê–¥–º–∏–Ω {admin_id} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {deleted_user_name} ({user_id_to_delete}) –∏–∑ –≥—Ä—É–ø–ø—ã '{deleted_group}'")

        keyboard = get_delete_users_keyboard(admin_id)
        await callback.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{deleted_user_name}</b> —É–¥–∞–ª–µ–Ω.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard, parse_mode="HTML")
        await callback.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {deleted_user_name} —É–¥–∞–ª–µ–Ω.", show_alert=False)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_delete_user_confirm: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)

async def cq_request_self_delete(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        user_id_to_delete = int(callback.data.split('_')[-1])
        if user_id != user_id_to_delete:
             await callback.answer("‚õî –û—à–∏–±–∫–∞: ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.", show_alert=True)
             return
        if user_id_to_delete == ADMIN_USER_ID:
            await callback.answer("‚õî –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è.", show_alert=True)
            return

        keyboard = get_self_delete_confirmation_keyboard(user_id)
        await callback.message.edit_text("‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞?</b>\n–í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –∫–æ–º–∞–Ω–¥–∞–º.", reply_markup=keyboard, parse_mode="HTML")
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_request_self_delete: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

async def cq_confirm_self_delete(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        user_id_to_delete = int(callback.data.split('_')[-1])
        if user_id != user_id_to_delete:
             await callback.answer("‚õî –û—à–∏–±–∫–∞: ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.", show_alert=True)
             return
        if user_id_to_delete == ADMIN_USER_ID:
            await callback.answer("‚õî –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è.", show_alert=True)
            return

        deleted_user_name = USER_NAMES.get(str(user_id_to_delete), f"ID: {user_id_to_delete}")
        deleted_group = ALLOWED_USERS.pop(user_id_to_delete, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        USER_NAMES.pop(str(user_id_to_delete), None)
        save_users()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {deleted_user_name} ({user_id_to_delete}) —É–¥–∞–ª–∏–ª —Å–µ–±—è –∏–∑ –≥—Ä—É–ø–ø—ã '{deleted_group}'")

        await callback.message.delete()
        await callback.answer("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.", show_alert=True)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_confirm_self_delete: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)

async def cq_back_to_delete_users(callback: types.CallbackQuery):
     await cq_delete_user_list(callback)

# --- Change Group ---
async def cq_change_group_list(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, "change_group"):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    keyboard = get_change_group_keyboard()
    await callback.message.edit_text("üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

async def cq_select_user_for_group_change(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if not is_allowed(user_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return
    try:
        user_id_to_change = int(callback.data.split('_')[-1])
        if user_id_to_change not in ALLOWED_USERS or user_id_to_change == ADMIN_USER_ID:
            await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω.", show_alert=True)
            return

        user_name = USER_NAMES.get(str(user_id_to_change), f"ID: {user_id_to_change}")
        current_group = ALLOWED_USERS[user_id_to_change]
        keyboard = get_group_selection_keyboard(user_id_to_change)
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user_name}</b>\n–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: <b>{current_group}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_select_user_for_group_change: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞", show_alert=True)

async def cq_set_group_existing(callback: types.CallbackQuery, state: FSMContext):
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –ù–ï –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM (—Ç.–µ. –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞)
    admin_id = callback.from_user.id
    if not is_allowed(admin_id, callback.data):
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.", show_alert=True)
        return

    try:
        parts = callback.data.split('_')
        user_id_to_change = int(parts[2])
        new_group = parts[3]

        if user_id_to_change not in ALLOWED_USERS or user_id_to_change == ADMIN_USER_ID:
            await callback.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ì–ª–∞–≤–Ω—ã–π –ê–¥–º–∏–Ω.", show_alert=True)
            return

        old_group = ALLOWED_USERS[user_id_to_change]
        ALLOWED_USERS[user_id_to_change] = new_group
        save_users()
        user_name = USER_NAMES.get(str(user_id_to_change), f"ID: {user_id_to_change}")
        logging.info(f"–ê–¥–º–∏–Ω {admin_id} –∏–∑–º–µ–Ω–∏–ª –≥—Ä—É–ø–ø—É –¥–ª—è {user_name} ({user_id_to_change}) —Å '{old_group}' –Ω–∞ '{new_group}'")

        keyboard = get_change_group_keyboard()
        await callback.message.edit_text(
             f"‚úÖ –ì—Ä—É–ø–ø–∞ –¥–ª—è <b>{user_name}</b> –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_group}</b>.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
             reply_markup=keyboard,
             parse_mode="HTML"
        )
        await callback.answer(f"–ì—Ä—É–ø–ø–∞ –¥–ª—è {user_name} –∏–∑–º–µ–Ω–µ–Ω–∞.")

    except (IndexError, ValueError) as e:
         logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ callback_data –≤ cq_set_group_existing: {e} (data: {callback.data})")
         await callback.answer("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.", show_alert=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cq_set_group_existing: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≥—Ä—É–ø–ø—ã.", show_alert=True)