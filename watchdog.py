import os
import time
import subprocess
import requests
import logging
import re # –î–æ–±–∞–≤–ª–µ–Ω re –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞
import json
import sys

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
DOTENV_PATH = os.path.join(os.path.dirname(__file__), '.env')

def load_env(dotenv_path):
    env_vars = {}
    try:
        with open(dotenv_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    if value.startswith('"') and value.endswith('"'):
                        value = value[1:-1]
                    elif value.startswith("'") and value.endswith("'"):
                        value = value[1:-1]
                    env_vars[key.strip()] = value.strip()
    except FileNotFoundError:
        print(f"ERROR: .env file not found at {dotenv_path}")
    except Exception as e:
        print(f"ERROR: Could not read .env file: {e}")
    return env_vars

env_config = load_env(DOTENV_PATH)

ALERT_BOT_TOKEN = env_config.get("TG_BOT_TOKEN", None)
ALERT_ADMIN_ID = env_config.get("TG_ADMIN_ID", None)
BOT_SERVICE_NAME = "tg-bot.service"

BASE_DIR = os.path.dirname(__file__)
CONFIG_DIR = os.path.join(BASE_DIR, "config")
RESTART_FLAG_FILE = os.path.join(CONFIG_DIR, "restart_flag.txt")

CHECK_INTERVAL_SECONDS = 5
ALERT_COOLDOWN_SECONDS = 300 # –ö—É–ª–¥–∞—É–Ω –¥–ª—è *–ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö* –∞–ª–µ—Ä—Ç–æ–≤ –æ —Å–±–æ–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –∏ —Ç.–¥.

LOG_FILE = os.path.join(os.path.dirname(__file__), "logs", "watchdog.log")
os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

logging.basicConfig(level=logging.INFO, filename=LOG_FILE,
                    format='%(asctime)s - %(levelname)s - %(message)s', encoding='utf-8')
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(console_handler)

last_alert_times = {}
bot_service_was_down = False
# --- [–ò–ó–ú–ï–ù–ï–ù–ò–ï] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ ---
status_alert_message_id = None
current_reported_state = None # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ *–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ* —Å–æ—Å—Ç–æ—è–Ω–∏–µ
# -----------------------------------------------------------------

# --- [–ò–ó–ú–ï–ù–ï–ù–ò–ï] –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
def send_or_edit_telegram_alert(message, alert_type, message_id_to_edit=None):
    global last_alert_times, status_alert_message_id

    current_time = time.time()
    # –ö—É–ª–¥–∞—É–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∏),
    # –Ω–æ –Ω–µ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º Down/Activating/Active
    apply_cooldown = alert_type in ["bot_restart_fail", "watchdog_config_error", "watchdog_error"]
    if apply_cooldown and current_time - last_alert_times.get(alert_type, 0) < ALERT_COOLDOWN_SECONDS:
        logging.warning(f"–ê–∫—Ç–∏–≤–µ–Ω –∫—É–ª–¥–∞—É–Ω –¥–ª—è '{alert_type}', –ø—Ä–æ–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return message_id_to_edit # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π ID, –µ—Å–ª–∏ –æ–Ω –±—ã–ª

    text_to_send = f"üö® <b>–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (Alert):</b>\n\n{message}"
    
    message_sent_or_edited = False
    new_message_id = message_id_to_edit # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π

    # 1. –ü–æ–ø—ã—Ç–∫–∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å ID)
    if message_id_to_edit:
        url = f"https://api.telegram.org/bot{ALERT_BOT_TOKEN}/editMessageText"
        payload = {
            'chat_id': ALERT_ADMIN_ID,
            'message_id': message_id_to_edit,
            'text': text_to_send,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=payload, timeout=10)
            if response.status_code == 200:
                logging.info(f"Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ ID {message_id_to_edit} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (—Ç–∏–ø '{alert_type}').")
                message_sent_or_edited = True
                # new_message_id –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
                if apply_cooldown: last_alert_times[alert_type] = current_time
            elif response.status_code == 400 and "message is not modified" in response.text:
                 logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ ID {message_id_to_edit} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (—Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç).")
                 message_sent_or_edited = True # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç.–∫. —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message_id_to_edit}. –°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.")
                # –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ID, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                status_alert_message_id = None # –í–∞–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π ID
                new_message_id = None
        except Exception as e:
            logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è ID {message_id_to_edit}: {e}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.")
            status_alert_message_id = None
            new_message_id = None

    # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –ù–æ–≤–æ–≥–æ –°–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å)
    if not message_sent_or_edited:
        url = f"https://api.telegram.org/bot{ALERT_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': ALERT_ADMIN_ID,
            'text': text_to_send,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=payload, timeout=10)
            if response.status_code == 200:
                sent_message_data = response.json()
                new_message_id = sent_message_data.get('result', {}).get('message_id')
                logging.info(f"Telegram-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ '{alert_type}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {new_message_id}).")
                if apply_cooldown: last_alert_times[alert_type] = current_time
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ '{alert_type}'. –°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
                new_message_id = None # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        except Exception as e:
            logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è '{alert_type}': {e}")
            new_message_id = None

    return new_message_id
# --- [–ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø] ---

def check_bot_service():
    global bot_service_was_down, status_alert_message_id, current_reported_state
    
    actual_state = "unknown" # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    state_to_report = None # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Ö–æ—Ç–∏–º *–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    alert_type = None      # –¢–∏–ø –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤/–∫—É–ª–¥–∞—É–Ω–∞
    message_text = None    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        status_result = subprocess.run(['systemctl', 'status', BOT_SERVICE_NAME], capture_output=True, text=True, check=False)
        status_output_full = status_result.stdout.strip()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if "Active: active (running)" in status_output_full:
            actual_state = "active"
        elif "Active: activating" in status_output_full:
             actual_state = "activating"
        elif "Active: inactive (dead)" in status_output_full:
             actual_state = "inactive"
        elif "Active: failed" in status_output_full:
             actual_state = "failed"
        
        # --- [–ò–ó–ú–ï–ù–ï–ù–ò–ï] –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –û–¢–ü–†–ê–í–ö–ò/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ---
        
        # 1. –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
        if actual_state == "active":
            logging.debug(f"–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ '{BOT_SERVICE_NAME}' –∞–∫—Ç–∏–≤–µ–Ω.")
            if bot_service_was_down: # –ï—Å–ª–∏ –æ–Ω *–±—ã–ª* –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
                state_to_report = "active"
                alert_type = "bot_service_up"
                message_text = f"–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ <b>{BOT_SERVICE_NAME}</b> –ê–∫—Ç–∏–≤–µ–Ω üü¢"
                bot_service_was_down = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ "–±—ã–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            # –ï—Å–ª–∏ –æ–Ω –∏ —Ç–∞–∫ —Ä–∞–±–æ—Ç–∞–ª, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–æ–±—â–∞–µ–º

        # 2. –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
        elif actual_state == "activating":
            logging.info(f"–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ '{BOT_SERVICE_NAME}' –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...")
            if bot_service_was_down: # –ï—Å–ª–∏ –æ–Ω –±—ã–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                 state_to_report = "activating"
                 alert_type = "bot_service_activating"
                 message_text = f"–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ <b>{BOT_SERVICE_NAME}</b> –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è üü°"
            # –ï—Å–ª–∏ –æ–Ω –Ω–µ –±—ã–ª down (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫), –Ω–µ —à–ª–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å

        # 3. –°–µ—Ä–≤–∏—Å –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç (inactive, failed, unknown)
        else:
            logging.warning(f"–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ '{BOT_SERVICE_NAME}' –ù–ï–ê–ö–¢–ò–í–ï–ù. –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: '{actual_state}'.")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ (–æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞–∂–Ω–æ–π!)
            if os.path.exists(RESTART_FLAG_FILE):
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫. Alert-—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è.")
                # –ï—Å–ª–∏ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ–µ, –Ω—É–∂–Ω–æ –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å?
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –±–æ—Ç —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ–µ –ø—Ä–∏ –ø–ª–∞–Ω–æ–≤–æ–º —Ä–µ—Å—Ç–∞—Ä—Ç–µ - –Ω—É–∂–Ω–∞ –¥–æ–ø. –ª–æ–≥–∏–∫–∞
                return 

            # –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–±–æ–π
            if not bot_service_was_down: # –ï—Å–ª–∏ —ç—Ç–æ *–ø–µ—Ä–≤–æ–µ* –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–±–æ—è
                state_to_report = "down"
                alert_type = "bot_service_down"
                message_text = f"–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ <b>{BOT_SERVICE_NAME}</b> –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω üî¥"
                if actual_state == "failed":
                      fail_reason_match = re.search(r"Failed with result '([^']*)'", status_output_full)
                      if fail_reason_match:
                           message_text += f" (–ü—Ä–∏—á–∏–Ω–∞: {fail_reason_match.group(1)})"
                      else:
                           message_text += " (–°—Ç–∞—Ç—É—Å: failed)"
                bot_service_was_down = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ "–±—ã–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {BOT_SERVICE_NAME}...")
                restart_result = subprocess.run(['sudo', 'systemctl', 'restart', BOT_SERVICE_NAME], capture_output=True, text=True, check=False)
                if restart_result.returncode != 0:
                     error_msg = restart_result.stderr.strip()
                     logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è {BOT_SERVICE_NAME}. –û—à–∏–±–∫–∞: {error_msg}")
                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞, –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è
                     send_or_edit_telegram_alert(f"‚ö†Ô∏è Alert-—Å–∏—Å—Ç–µ–º–∞ –ù–ï –°–ú–û–ì–õ–ê –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è <b>{BOT_SERVICE_NAME}</b>. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.\n–û—à–∏–±–∫–∞: {error_msg}", "bot_restart_fail", None)

            # –ï—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª down, –∏ –≤—Å–µ –µ—â–µ down - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–Ω–µ —Å–ø–∞–º–∏–º)
            # state_to_report –æ—Å—Ç–∞–µ—Ç—Å—è None

        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–æ–æ–±—â–µ–Ω–∏—è ---
        if state_to_report and state_to_report != current_reported_state:
            logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞ '{state_to_report}'. –û—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ down - –≤—Å–µ–≥–¥–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_id_for_operation = status_alert_message_id if state_to_report != "down" else None
            
            new_id = send_or_edit_telegram_alert(message_text, alert_type, message_id_for_operation)

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            status_alert_message_id = new_id
            current_reported_state = state_to_report

            # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            if state_to_report == "active":
                 status_alert_message_id = None
                 current_reported_state = None # –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤–æ–º—É —Ü–∏–∫–ª—É —Å–±–æ—è
        
        elif state_to_report and state_to_report == current_reported_state:
             logging.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ '{state_to_report}' –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–ø—É—Å–∫.")

        # --- [–ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø] ---

    except FileNotFoundError:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ systemctl (–æ—Å—Ç–∞–µ—Ç—Å—è)
        logging.error("–ö–æ–º–∞–Ω–¥–∞ systemctl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
        send_or_edit_telegram_alert("‚ö†Ô∏è <code>systemctl</code> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞.", "watchdog_config_error", None)
        time.sleep(CHECK_INTERVAL_SECONDS * 5)
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (–æ—Å—Ç–∞–µ—Ç—Å—è)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_or_edit_telegram_alert(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞: {e}", "watchdog_error", None)


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∞ (–æ—Å—Ç–∞—é—Ç—Å—è)
    if not ALERT_BOT_TOKEN:
        logging.error("FATAL: Telegram Bot Token (TG_BOT_TOKEN) not found or empty in .env file.")
        sys.exit(1)
    if not ALERT_ADMIN_ID:
        logging.error("FATAL: Telegram Admin ID (TG_ADMIN_ID) not found or empty in .env file.")
        sys.exit(1)
    try:
        int(ALERT_ADMIN_ID)
    except ValueError:
        logging.error(f"FATAL: TG_ADMIN_ID in .env file ('{ALERT_ADMIN_ID}') is not a valid integer.")
        sys.exit(1)

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Å—Ç–∞–µ—Ç—Å—è)
    logging.info("–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (Alert) –∑–∞–ø—É—â–µ–Ω–∞.")
    send_or_edit_telegram_alert("üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å '–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (Alert)' –∑–∞–ø—É—â–µ–Ω.", "watchdog_start", None)

    # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª (–æ—Å—Ç–∞–µ—Ç—Å—è)
    while True:
        check_bot_service()
        time.sleep(CHECK_INTERVAL_SECONDS)