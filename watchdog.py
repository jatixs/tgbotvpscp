import os
import time
import subprocess
import requests
import logging
import psutil
import json

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
# –ü—Ä–æ—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
DOTENV_PATH = os.path.join(os.path.dirname(__file__), '.env')

def load_env(dotenv_path):
    env_vars = {}
    try:
        with open(dotenv_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if value.startswith('"') and value.endswith('"'):
                        value = value[1:-1]
                    elif value.startswith("'") and value.endswith("'"):
                        value = value[1:-1]
                    env_vars[key.strip()] = value.strip()
    except FileNotFoundError:
        print(f"ERROR: .env file not found at {dotenv_path}")
    except Exception as e:
        print(f"ERROR: Could not read .env file: {e}")
    return env_vars

env_config = load_env(DOTENV_PATH)

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ .env –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
ALERT_BOT_TOKEN = env_config.get("TG_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE") # –¢–æ–∫–µ–Ω –±–æ—Ç–∞
ALERT_ADMIN_ID = env_config.get("TG_ADMIN_ID", "YOUR_ADMIN_ID_HERE")    # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
BOT_SERVICE_NAME = "tg-bot.service"   # –ò–º—è systemd-—Å–µ—Ä–≤–∏—Å–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤
CPU_THRESHOLD = 90.0         # %
RAM_THRESHOLD = 90.0         # %
DISK_THRESHOLD = 95.0        # % (–¥–ª—è '/')

CHECK_INTERVAL_SECONDS = 60      # –ö–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å (—Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É)
ALERT_COOLDOWN_SECONDS = 300     # –ù–µ —Å–ø–∞–º–∏—Ç—å –∞–ª–µ—Ä—Ç–∞–º–∏ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç

LOG_FILE = os.path.join(os.path.dirname(__file__), "logs", "watchdog.log") # –õ–æ–≥ –≤ –ø–æ–¥–ø–∞–ø–∫–µ logs
os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, filename=LOG_FILE,
                    format='%(asctime)s - %(levelname)s - %(message)s', encoding='utf-8')
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(console_handler)

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
last_alert_times = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—É–ª–¥–∞—É–Ω–æ–≤ –ø–æ —Ç–∏–ø–∞–º –∞–ª–µ—Ä—Ç–æ–≤
bot_service_was_down = False # –§–ª–∞–≥, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞ –±—ã–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

# --- –§—É–Ω–∫—Ü–∏–∏ ---
def send_telegram_alert(message, alert_type):
    global last_alert_times
    current_time = time.time()

    if current_time - last_alert_times.get(alert_type, 0) < ALERT_COOLDOWN_SECONDS:
        logging.warning(f"Alert cooldown active for type '{alert_type}', skipping notification.")
        return

    url = f"https://api.telegram.org/bot{ALERT_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': ALERT_ADMIN_ID,
        'text': f"üê∂ <b>Watchdog Alert:</b>\n\n{message}",
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        if response.status_code == 200:
            logging.info(f"Telegram alert '{alert_type}' sent successfully.")
            last_alert_times[alert_type] = current_time
        else:
            logging.error(f"Failed to send Telegram alert '{alert_type}'. Status: {response.status_code}, Response: {response.text}")
    except Exception as e:
        logging.error(f"Exception while sending Telegram alert '{alert_type}': {e}")

def check_resources():
    alerts = []
    try:
        cpu = psutil.cpu_percent(interval=1)
        ram = psutil.virtual_memory().percent
        disk = psutil.disk_usage('/').percent

        logging.debug(f"Resource check: CPU={cpu:.1f}%, RAM={ram:.1f}%, Disk={disk:.1f}%")

        if cpu >= CPU_THRESHOLD:
            alerts.append({"type": "cpu_high", "msg": f"üî• CPU usage high: <b>{cpu:.1f}%</b> (Threshold: {CPU_THRESHOLD}%)"})
        if ram >= RAM_THRESHOLD:
            alerts.append({"type": "ram_high", "msg": f"üíæ RAM usage high: <b>{ram:.1f}%</b> (Threshold: {RAM_THRESHOLD}%)"})
        if disk >= DISK_THRESHOLD:
            alerts.append({"type": "disk_high", "msg": f"üíΩ Disk usage high: <b>{disk:.1f}%</b> (Threshold: {DISK_THRESHOLD}%)"})

    except Exception as e:
        logging.error(f"Error checking resources: {e}")
        alerts.append({"type": "check_error", "msg": f"‚ö†Ô∏è Error checking resources: {e}"})
    return alerts

def check_bot_service():
    global bot_service_was_down
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å systemd —Å–µ—Ä–≤–∏—Å–∞
        result = subprocess.run(['systemctl', 'is-active', BOT_SERVICE_NAME], capture_output=True, text=True)
        is_active = result.stdout.strip() == 'active'

        if not is_active:
            logging.warning(f"Bot service '{BOT_SERVICE_NAME}' is INACTIVE.")
            if not bot_service_was_down: # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏
                 send_telegram_alert(f"üö® Bot service <b>{BOT_SERVICE_NAME}</b> is DOWN!", "bot_service_down")
                 bot_service_was_down = True
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            logging.info(f"Attempting to restart {BOT_SERVICE_NAME}...")
            restart_result = subprocess.run(['sudo', 'systemctl', 'restart', BOT_SERVICE_NAME], capture_output=True, text=True)
            if restart_result.returncode == 0:
                logging.info(f"Restart command sent for {BOT_SERVICE_NAME}.")
                # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                time.sleep(5)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                result_after = subprocess.run(['systemctl', 'is-active', BOT_SERVICE_NAME], capture_output=True, text=True)
                if result_after.stdout.strip() == 'active':
                    logging.info(f"{BOT_SERVICE_NAME} restarted successfully.")
                    send_telegram_alert(f"‚úÖ Bot service <b>{BOT_SERVICE_NAME}</b> was restarted successfully.", "bot_service_restart")
                    bot_service_was_down = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                else:
                    logging.error(f"Failed to restart {BOT_SERVICE_NAME} successfully. Still inactive.")
                    # –ê–ª–µ—Ä—Ç –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –Ω–æ –º–æ–∂–µ—Ç —Å–ø–∞–º–∏—Ç—å
            else:
                logging.error(f"Failed to send restart command for {BOT_SERVICE_NAME}. Error: {restart_result.stderr}")
                send_telegram_alert(f"‚ö†Ô∏è Failed to send restart command for <b>{BOT_SERVICE_NAME}</b>. Manual check required.", "bot_restart_fail")

        else:
            logging.debug(f"Bot service '{BOT_SERVICE_NAME}' is active.")
            if bot_service_was_down: # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –ø–æ–¥–Ω—è–ª—Å—è –ø–æ—Å–ª–µ –ø–∞–¥–µ–Ω–∏—è
                send_telegram_alert(f"‚úÖ Bot service <b>{BOT_SERVICE_NAME}</b> is now ACTIVE again.", "bot_service_up")
                bot_service_was_down = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

    except FileNotFoundError:
        logging.error("systemctl command not found. Cannot check service status.")
        send_telegram_alert("‚ö†Ô∏è <code>systemctl</code> not found. Cannot check bot service status.", "watchdog_config_error")
    except Exception as e:
        logging.error(f"Error checking bot service: {e}")
        send_telegram_alert(f"‚ö†Ô∏è Error checking bot service status: {e}", "watchdog_error")

# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ---
if __name__ == "__main__":
    if not ALERT_BOT_TOKEN or "YOUR_BOT_TOKEN_HERE" in ALERT_BOT_TOKEN:
        logging.error("FATAL: Telegram Bot Token is not configured in .env file.")
        sys.exit(1)
    if not ALERT_ADMIN_ID or "YOUR_ADMIN_ID_HERE" in ALERT_ADMIN_ID:
        logging.error("FATAL: Telegram Admin ID is not configured in .env file.")
        sys.exit(1)

    logging.info("Watchdog started.")
    send_telegram_alert("üê∂ Internal Watchdog service started.", "watchdog_start") # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ

    while True:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        resource_alerts = check_resources()
        for alert in resource_alerts:
            send_telegram_alert(alert["msg"], alert["type"])

        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞
        check_bot_service()

        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        time.sleep(CHECK_INTERVAL_SECONDS)