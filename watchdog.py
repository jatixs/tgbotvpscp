# /opt/tg-bot/watchdog.py
# --- –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø ---
import os
import time
import subprocess
import requests
import logging
import re # –î–æ–±–∞–≤–ª–µ–Ω re –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞
import json
import sys

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
DOTENV_PATH = os.path.join(os.path.dirname(__file__), '.env')

def load_env(dotenv_path):
    env_vars = {}
    try:
        with open(dotenv_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if value.startswith('"') and value.endswith('"'):
                        value = value[1:-1]
                    elif value.startswith("'") and value.endswith("'"):
                        value = value[1:-1]
                    env_vars[key.strip()] = value.strip()
    except FileNotFoundError:
        print(f"ERROR: .env file not found at {dotenv_path}")
    except Exception as e:
        print(f"ERROR: Could not read .env file: {e}")
    return env_vars

env_config = load_env(DOTENV_PATH)

ALERT_BOT_TOKEN = env_config.get("TG_BOT_TOKEN", None)
ALERT_ADMIN_ID = env_config.get("TG_ADMIN_ID", None)
BOT_SERVICE_NAME = "tg-bot.service"
BOT_NAME = env_config.get("TG_BOT_NAME", BOT_SERVICE_NAME) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ .env –∏–ª–∏ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞

BASE_DIR = os.path.dirname(__file__)
CONFIG_DIR = os.path.join(BASE_DIR, "config")
RESTART_FLAG_FILE = os.path.join(CONFIG_DIR, "restart_flag.txt")

BOT_LOG_FILE = os.path.join(BASE_DIR, "logs", "bot.log")

CHECK_INTERVAL_SECONDS = 5 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
ALERT_COOLDOWN_SECONDS = 300 # –ö—É–ª–¥–∞—É–Ω –¥–ª—è *–ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö* –∞–ª–µ—Ä—Ç–æ–≤ –æ —Å–±–æ–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –∏ —Ç.–¥.

LOG_FILE = os.path.join(os.path.dirname(__file__), "logs", "watchdog.log")
os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)

logging.basicConfig(level=logging.INFO, filename=LOG_FILE,
                    format='%(asctime)s - %(levelname)s - %(message)s', encoding='utf-8')
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logging.getLogger().addHandler(console_handler)

last_alert_times = {}
bot_service_was_down_or_activating = False # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
status_alert_message_id = None
current_reported_state = None # –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ *–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ* —Å–æ—Å—Ç–æ—è–Ω–∏–µ ('down', 'activating', 'active_ok', 'active_error')

def send_or_edit_telegram_alert(message, alert_type, message_id_to_edit=None):
    global last_alert_times, status_alert_message_id

    current_time = time.time()
    # –ö—É–ª–¥–∞—É–Ω –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∏),
    # –Ω–æ –Ω–µ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º Down/Activating/Active
    apply_cooldown = alert_type in ["bot_restart_fail", "watchdog_config_error", "watchdog_error", "bot_service_error_on_start"]
    if apply_cooldown and current_time - last_alert_times.get(alert_type, 0) < ALERT_COOLDOWN_SECONDS:
        logging.warning(f"–ê–∫—Ç–∏–≤–µ–Ω –∫—É–ª–¥–∞—É–Ω –¥–ª—è '{alert_type}', –ø—Ä–æ–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        return message_id_to_edit # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–π ID, –µ—Å–ª–∏ –æ–Ω –±—ã–ª

    text_to_send = f"üö® <b>–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (Alert):</b>\n\n{message}"

    message_sent_or_edited = False
    new_message_id = message_id_to_edit # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π

    # 1. –ü–æ–ø—ã—Ç–∫–∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å ID)
    if message_id_to_edit:
        url = f"https://api.telegram.org/bot{ALERT_BOT_TOKEN}/editMessageText"
        payload = {
            'chat_id': ALERT_ADMIN_ID,
            'message_id': message_id_to_edit,
            'text': text_to_send,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=payload, timeout=10)
            if response.status_code == 200:
                logging.info(f"Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ ID {message_id_to_edit} —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ (—Ç–∏–ø '{alert_type}').")
                message_sent_or_edited = True
                if apply_cooldown: last_alert_times[alert_type] = current_time
            elif response.status_code == 400 and "message is not modified" in response.text:
                 logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ ID {message_id_to_edit} –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ (—Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç).")
                 message_sent_or_edited = True # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç.–∫. —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ID {message_id_to_edit}. –°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.")
                status_alert_message_id = None
                new_message_id = None
        except Exception as e:
            logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è ID {message_id_to_edit}: {e}. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ.")
            status_alert_message_id = None
            new_message_id = None

    # 2. –û—Ç–ø—Ä–∞–≤–∫–∞ –ù–æ–≤–æ–≥–æ –°–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–ª–∏ –Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å)
    if not message_sent_or_edited:
        url = f"https://api.telegram.org/bot{ALERT_BOT_TOKEN}/sendMessage"
        payload = {
            'chat_id': ALERT_ADMIN_ID,
            'text': text_to_send,
            'parse_mode': 'HTML'
        }
        try:
            response = requests.post(url, data=payload, timeout=10)
            if response.status_code == 200:
                sent_message_data = response.json()
                new_message_id = sent_message_data.get('result', {}).get('message_id')
                logging.info(f"Telegram-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ '{alert_type}' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ID {new_message_id}).")
                if apply_cooldown: last_alert_times[alert_type] = current_time
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram-–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ '{alert_type}'. –°—Ç–∞—Ç—É—Å: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}")
                new_message_id = None # –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        except Exception as e:
            logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-–æ–ø–æ–≤–µ—â–µ–Ω–∏—è '{alert_type}': {e}")
            new_message_id = None

    return new_message_id

def check_bot_log_for_errors():
    """–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–∞ –±–æ—Ç–∞ –∏ –∏—â–µ—Ç –æ—à–∏–±–∫–∏."""
    try:
        if not os.path.exists(BOT_LOG_FILE):
            logging.warning(f"–õ–æ–≥-—Ñ–∞–π–ª –±–æ—Ç–∞ {BOT_LOG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫–∏.")
            return None # –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç

        result = subprocess.run(
            ['tail', '-n', '20', BOT_LOG_FILE],
            capture_output=True, text=True, check=False, encoding='utf-8'
        )

        if result.returncode != 0:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å {BOT_LOG_FILE} —á–µ—Ä–µ–∑ tail: {result.stderr}")
            return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {result.stderr}"

        log_content = result.stdout
        log_content_lower = log_content.lower()

        if "critical" in log_content_lower or "error" in log_content_lower:
            last_error_line = ""
            for line in log_content.splitlines():
                 if "ERROR" in line or "CRITICAL" in line:
                      last_error_line = line

            if last_error_line:
                 # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Å –æ—à–∏–±–∫–æ–π (–∫—Ä–∞—Ç–∫–æ), —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
                 last_error_safe = last_error_line.replace('<', '&lt;').replace('>', '&gt;')
                 return f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–®–ò–ë–ö–ê: ...{last_error_safe[-150:]}"

            return "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ (ERROR/CRITICAL) –≤ –ª–æ–≥–µ"

        return "OK" # –û—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

    except Exception as e:
        logging.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ check_bot_log_for_errors: {e}", exc_info=True)
        return f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–∞: {str(e).replace('<', '&lt;').replace('>', '&gt;')}"


def check_bot_service():
    global bot_service_was_down_or_activating, status_alert_message_id, current_reported_state

    actual_state = "unknown" # –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ ('active', 'activating', 'inactive', 'failed', 'unknown')
    state_to_report = None # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º—ã —Ö–æ—Ç–∏–º *–æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ('active_ok', 'active_error', 'activating', 'down')
    alert_type = None      # –¢–∏–ø –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤/–∫—É–ª–¥–∞—É–Ω–∞
    message_text = None    # –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

    try:
        status_result = subprocess.run(['systemctl', 'status', BOT_SERVICE_NAME], capture_output=True, text=True, check=False)
        status_output_full = status_result.stdout.strip()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if "Active: active (running)" in status_output_full:
            actual_state = "active"
        elif "Active: activating" in status_output_full:
             actual_state = "activating"
        elif "Active: inactive (dead)" in status_output_full:
             actual_state = "inactive"
        elif "Active: failed" in status_output_full:
             actual_state = "failed"


        # --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –û–¢–ü–†–ê–í–ö–ò/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ---

        # 1. –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç (active)
        if actual_state == "active":
            logging.debug(f"–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ '{BOT_SERVICE_NAME}' –∞–∫—Ç–∏–≤–µ–Ω.")
            # –ï—Å–ª–∏ –æ–Ω *–±—ã–ª* –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –ò–õ–ò –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª—Å—è
            if bot_service_was_down_or_activating:
                logging.info("–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'active'. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(3) # –î–∞–µ–º –±–æ—Ç—É –≤—Ä–µ–º—è –¥–æ–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥
                log_status = check_bot_log_for_errors()

                if log_status == "OK":
                    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞: OK.")
                    state_to_report = "active_ok"
                    alert_type = "bot_service_up_ok"
                    message_text = f"–°–µ—Ä–≤–∏—Å <b>{BOT_NAME}</b>: –ê–∫—Ç–∏–≤–µ–Ω üü¢"
                elif log_status is not None:
                    logging.warning(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞: –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–®–ò–ë–ö–ò ({log_status}).")
                    state_to_report = "active_error"
                    alert_type = "bot_service_up_error"
                    message_text = f"–°–µ—Ä–≤–∏—Å <b>{BOT_NAME}</b>: –ê–∫—Ç–∏–≤–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏ üü†\n\n<b>–î–µ—Ç–∞–ª–∏:</b> {log_status}\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å `bot.log`."
                else: # –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥
                    logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥ –±–æ—Ç–∞.")
                    state_to_report = "active_ok" # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å–µ –æ–∫, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É
                    alert_type = "bot_service_up_no_log_check"
                    message_text = f"–°–µ—Ä–≤–∏—Å <b>{BOT_NAME}</b>: –ê–∫—Ç–∏–≤–µ–Ω üü¢ (–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å)"

                bot_service_was_down_or_activating = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

        # 2. –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è (activating)
        elif actual_state == "activating":
            logging.info(f"–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ '{BOT_SERVICE_NAME}' –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è...")
            state_to_report = "activating" # –•–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å
            alert_type = "bot_service_activating"
            message_text = f"–°–µ—Ä–≤–∏—Å <b>{BOT_NAME}</b>: –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è üü°"
            bot_service_was_down_or_activating = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥

        # 3. –°–µ—Ä–≤–∏—Å –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç (inactive, failed, unknown)
        else:
            logging.warning(f"–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ '{BOT_SERVICE_NAME}' –ù–ï–ê–ö–¢–ò–í–ï–ù. –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: '{actual_state}'.")
            if os.path.exists(RESTART_FLAG_FILE):
                logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–ª–∞–Ω–æ–≤—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ (restart_flag.txt). Alert-—Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≤–º–µ—à–∏–≤–∞–µ—Ç—Å—è.")
                # –ï—Å–ª–∏ –±—ã–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ–µ, –æ–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
                return

            state_to_report = "down" # –•–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å
            alert_type = "bot_service_down"
            message_text = f"–°–µ—Ä–≤–∏—Å <b>{BOT_NAME}</b>: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω üî¥"
            if actual_state == "failed":
                  fail_reason_match = re.search(r"Failed with result '([^']*)'", status_output_full)
                  if fail_reason_match:
                       message_text += f"\n(–ü—Ä–∏—á–∏–Ω–∞: {fail_reason_match.group(1)})"
                  else:
                       message_text += "\n(–°—Ç–∞—Ç—É—Å: failed)"

            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω *–Ω–µ –±—ã–ª* —É–∂–µ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ down/activating
            if not bot_service_was_down_or_activating:
                logging.info(f"–ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Å–±–æ—è. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ {BOT_SERVICE_NAME}...")
                restart_result = subprocess.run(['sudo', 'systemctl', 'restart', BOT_SERVICE_NAME], capture_output=True, text=True, check=False)
                if restart_result.returncode != 0:
                     error_msg = restart_result.stderr.strip().replace('<', '&lt;').replace('>', '&gt;')
                     logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è {BOT_SERVICE_NAME}. –û—à–∏–±–∫–∞: {error_msg}")
                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
                     send_or_edit_telegram_alert(f"‚ö†Ô∏è Alert-—Å–∏—Å—Ç–µ–º–∞ –ù–ï –°–ú–û–ì–õ–ê –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–ª—è <b>{BOT_SERVICE_NAME}</b>. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.\n–û—à–∏–±–∫–∞: {error_msg}", "bot_restart_fail", None)

            bot_service_was_down_or_activating = True # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥


        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–æ–æ–±—â–µ–Ω–∏—è ---
        if state_to_report and state_to_report != current_reported_state:
            logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: '{current_reported_state}' -> '{state_to_report}'. –û—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ down - –≤—Å–µ–≥–¥–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä–æ–µ "–∞–∫—Ç–∏–≤–µ–Ω"
            message_id_for_operation = status_alert_message_id if state_to_report != "down" else None

            new_id = send_or_edit_telegram_alert(message_text, alert_type, message_id_for_operation)

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            # –ï—Å–ª–∏ new_id = None (–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏), status_alert_message_id –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–º –∏–ª–∏ —Å—Ç–∞–Ω–µ—Ç None
            status_alert_message_id = new_id if new_id is not None else status_alert_message_id
            current_reported_state = state_to_report

            # –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å —Å—Ç–∞–ª –∞–∫—Ç–∏–≤–µ–Ω (OK –∏–ª–∏ —Å –æ—à–∏–±–∫–∞–º–∏), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞,
            # —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–∞–¥–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–ª–æ—Å—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            if state_to_report == "active_ok" or state_to_report == "active_error":
                 status_alert_message_id = None
                 # current_reported_state –æ—Å—Ç–∞–µ—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ —É—Å–ø–µ—Ö–µ

        elif state_to_report and state_to_report == current_reported_state:
             logging.debug(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ '{state_to_report}' –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü—Ä–æ–ø—É—Å–∫.")
        elif not state_to_report and current_reported_state and current_reported_state.startswith("active"):
             # –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª (active_ok –∏–ª–∏ active_error) –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å,
             # current_reported_state –æ—Å—Ç–∞–µ—Ç—Å—è, state_to_report=None, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.
             logging.debug(f"–°–µ—Ä–≤–∏—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ '{current_reported_state}'. –ü—Ä–æ–ø—É—Å–∫.")


    except FileNotFoundError:
        logging.error("–ö–æ–º–∞–Ω–¥–∞ systemctl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–æ–±—â–∞–ª–∏ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ
        if current_reported_state != "systemctl_error":
             send_or_edit_telegram_alert("‚ö†Ô∏è <code>systemctl</code> –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞.", "watchdog_config_error", None)
             current_reported_state = "systemctl_error" # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏
             status_alert_message_id = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID
        time.sleep(CHECK_INTERVAL_SECONDS * 5)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä–≤–∏—Å–∞ –±–æ—Ç–∞: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–æ–±—â–∞–ª–∏ –æ–± —ç—Ç–æ–π –æ—à–∏–±–∫–µ
        if current_reported_state != "check_error":
            send_or_edit_telegram_alert(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞: {str(e).replace('<', '&lt;').replace('>', '&gt;')}", "watchdog_error", None)
            current_reported_state = "check_error" # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–∏–ª–∏
            status_alert_message_id = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏ ID –∞–¥–º–∏–Ω–∞
    if not ALERT_BOT_TOKEN:
        logging.error("FATAL: Telegram Bot Token (TG_BOT_TOKEN) not found or empty in .env file.")
        sys.exit(1)
    if not ALERT_ADMIN_ID:
        logging.error("FATAL: Telegram Admin ID (TG_ADMIN_ID) not found or empty in .env file.")
        sys.exit(1)
    try:
        int(ALERT_ADMIN_ID)
    except ValueError:
        logging.error(f"FATAL: TG_ADMIN_ID in .env file ('{ALERT_ADMIN_ID}') is not a valid integer.")
        sys.exit(1)

    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    logging.info(f"–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (Alert) –∑–∞–ø—É—â–µ–Ω–∞. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: {BOT_SERVICE_NAME}")
    send_or_edit_telegram_alert(f"üö® –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–µ—Ä–≤–∏—Å '–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (Alert)' –∑–∞–ø—É—â–µ–Ω.\n–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: <b>{BOT_NAME}</b>", "watchdog_start", None)

    # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while True:
        check_bot_service()
        time.sleep(CHECK_INTERVAL_SECONDS)